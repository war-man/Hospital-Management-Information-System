//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuantaLabsDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class embutown_labEntities : DbContext
    {
        public embutown_labEntities()
            : base("name=embutown_labEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BillTransaction> BillTransactions { get; set; }
        public virtual DbSet<contactInformation> contactInformations { get; set; }
        public virtual DbSet<DetailTestReport> DetailTestReports { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Expens> Expenses { get; set; }
        public virtual DbSet<Mail> Mails { get; set; }
        public virtual DbSet<MenuItem> MenuItems { get; set; }
        public virtual DbSet<P_SpecialNote> P_SpecialNote { get; set; }
        public virtual DbSet<Pic_Printing> Pic_Printing { get; set; }
        public virtual DbSet<PROFILE> PROFILEs { get; set; }
        public virtual DbSet<PSCItemMaster> PSCItemMasters { get; set; }
        public virtual DbSet<reg_code1> reg_code1 { get; set; }
        public virtual DbSet<ReportSetting1> ReportSetting1 { get; set; }
        public virtual DbSet<Sample> Samples { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TblLog> TblLogs { get; set; }
        public virtual DbSet<tblMarquee> tblMarquees { get; set; }
        public virtual DbSet<TblTextMemo> TblTextMemoes { get; set; }
        public virtual DbSet<tblUserAuthority> tblUserAuthorities { get; set; }
        public virtual DbSet<tblWardDeptMaster> tblWardDeptMasters { get; set; }
        public virtual DbSet<Temp_Transaction> Temp_Transaction { get; set; }
        public virtual DbSet<TempTestResultFormat> TempTestResultFormats { get; set; }
        public virtual DbSet<TestReagent> TestReagents { get; set; }
        public virtual DbSet<Transaction1> Transaction1 { get; set; }
        public virtual DbSet<adduser> addusers { get; set; }
        public virtual DbSet<alert> alerts { get; set; }
        public virtual DbSet<AssignSign> AssignSigns { get; set; }
        public virtual DbSet<AuditTrial> AuditTrials { get; set; }
        public virtual DbSet<AutoRegNo> AutoRegNoes { get; set; }
        public virtual DbSet<bill_setting> bill_setting { get; set; }
        public virtual DbSet<BioChemisrty_Interface> BioChemisrty_Interface { get; set; }
        public virtual DbSet<Bom_Details> Bom_Details { get; set; }
        public virtual DbSet<Bom_Main> Bom_Main { get; set; }
        public virtual DbSet<Bom_Unitwise> Bom_Unitwise { get; set; }
        public virtual DbSet<CashCreditMain> CashCreditMains { get; set; }
        public virtual DbSet<CategoryWiseTest> CategoryWiseTests { get; set; }
        public virtual DbSet<Coll_receipt> Coll_receipt { get; set; }
        public virtual DbSet<Column3> Column3 { get; set; }
        public virtual DbSet<ContactinformationTemp> ContactinformationTemps { get; set; }
        public virtual DbSet<CytoSpeciman> CytoSpecimen { get; set; }
        public virtual DbSet<DamageFilm> DamageFilms { get; set; }
        public virtual DbSet<DamageFilmNUsedEquipment> DamageFilmNUsedEquipments { get; set; }
        public virtual DbSet<DefaultCountSet> DefaultCountSets { get; set; }
        public virtual DbSet<drCodeAuto> drCodeAutoes { get; set; }
        public virtual DbSet<drnametable> drnametables { get; set; }
        public virtual DbSet<EnglishToSpanish> EnglishToSpanishes { get; set; }
        public virtual DbSet<FormulaTbl> FormulaTbls { get; set; }
        public virtual DbSet<Group_details> Group_details { get; set; }
        public virtual DbSet<GroupName_Master> GroupName_Master { get; set; }
        public virtual DbSet<Haem_agape> Haem_agape { get; set; }
        public virtual DbSet<Headings_n> Headings_n { get; set; }
        public virtual DbSet<Headings_n_Company> Headings_n_Company { get; set; }
        public virtual DbSet<Help_TestMaster> Help_TestMaster { get; set; }
        public virtual DbSet<HistoCytoOldReport> HistoCytoOldReports { get; set; }
        public virtual DbSet<Histopathalogy_Future> Histopathalogy_Future { get; set; }
        public virtual DbSet<histopatho> histopathoes { get; set; }
        public virtual DbSet<histopathology> histopathologies { get; set; }
        public virtual DbSet<HistoPathoPic> HistoPathoPics { get; set; }
        public virtual DbSet<HistoSpeciman> HistoSpecimen { get; set; }
        public virtual DbSet<HospitalBillMaster> HospitalBillMasters { get; set; }
        public virtual DbSet<initial> initials { get; set; }
        public virtual DbSet<initial_Company> initial_Company { get; set; }
        public virtual DbSet<ItemMaster> ItemMasters { get; set; }
        public virtual DbSet<LedgerMaster> LedgerMasters { get; set; }
        public virtual DbSet<LedgerTransaction> LedgerTransactions { get; set; }
        public virtual DbSet<machinemaster> machinemasters { get; set; }
        public virtual DbSet<Makebill> Makebills { get; set; }
        public virtual DbSet<Makebill_Details> Makebill_Details { get; set; }
        public virtual DbSet<OutSourceLabMaster> OutSourceLabMasters { get; set; }
        public virtual DbSet<OutSourceLabWiseRate> OutSourceLabWiseRates { get; set; }
        public virtual DbSet<printstatu> printstatus { get; set; }
        public virtual DbSet<printsticker> printstickers { get; set; }
        public virtual DbSet<profile_result> profile_result { get; set; }
        public virtual DbSet<PSCItemMasterAlter> PSCItemMasterAlters { get; set; }
        public virtual DbSet<ratetype_master> ratetype_master { get; set; }
        public virtual DbSet<ReasonMaster> ReasonMasters { get; set; }
        public virtual DbSet<RejectedTest> RejectedTests { get; set; }
        public virtual DbSet<Report_setting> Report_setting { get; set; }
        public virtual DbSet<SampleMaster> SampleMasters { get; set; }
        public virtual DbSet<Shortform> Shortforms { get; set; }
        public virtual DbSet<signature> signatures { get; set; }
        public virtual DbSet<SOPMaster> SOPMasters { get; set; }
        public virtual DbSet<SpecialNote> SpecialNotes { get; set; }
        public virtual DbSet<system_M> system_M { get; set; }
        public virtual DbSet<SystemConstant> SystemConstants { get; set; }
        public virtual DbSet<tbl_Panicvalue> tbl_Panicvalue { get; set; }
        public virtual DbSet<tblCompanyAddress> tblCompanyAddresses { get; set; }
        public virtual DbSet<TblDeptCompMaster> TblDeptCompMasters { get; set; }
        public virtual DbSet<tblLevel1> tblLevel1 { get; set; }
        public virtual DbSet<tblLevel1b> tblLevel1b { get; set; }
        public virtual DbSet<Tbllogin> Tbllogins { get; set; }
        public virtual DbSet<tblNormalValue> tblNormalValues { get; set; }
        public virtual DbSet<tblSlideDesc> tblSlideDescs { get; set; }
        public virtual DbSet<Temp_storetests_Format> Temp_storetests_Format { get; set; }
        public virtual DbSet<Test_n> Test_n { get; set; }
        public virtual DbSet<TestByOutsourceLab> TestByOutsourceLabs { get; set; }
        public virtual DbSet<testturntime> testturntimes { get; set; }
        public virtual DbSet<Titles_n> Titles_n { get; set; }
        public virtual DbSet<Titles_n_Company> Titles_n_Company { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
        public virtual DbSet<vialtypemaster> vialtypemasters { get; set; }
        public virtual DbSet<vtest> vtests { get; set; }
        public virtual DbSet<ReportParam> ReportParams { get; set; }
        public virtual DbSet<Bc2800_machine> Bc2800_machine { get; set; }
        public virtual DbSet<bioname_machine> bioname_machine { get; set; }
        public virtual DbSet<CompanyWIncomeReport> CompanyWIncomeReports { get; set; }
        public virtual DbSet<contact_test> contact_test { get; set; }
        public virtual DbSet<culture> cultures { get; set; }
        public virtual DbSet<DailyTest> DailyTests { get; set; }
        public virtual DbSet<dailytest1> dailytests1 { get; set; }
        public virtual DbSet<DailyTestsTlcode> DailyTestsTlcodes { get; set; }
        public virtual DbSet<DatewDoctorAmount> DatewDoctorAmounts { get; set; }
        public virtual DbSet<DatewDoctorAmountAlter> DatewDoctorAmountAlters { get; set; }
        public virtual DbSet<DDDDDD> DDDDDDs { get; set; }
        public virtual DbSet<DeptpartmentWIncomeReport> DeptpartmentWIncomeReports { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<haemogram> haemograms { get; set; }
        public virtual DbSet<Heading> Headings { get; set; }
        public virtual DbSet<MemoView> MemoViews { get; set; }
        public virtual DbSet<OrderSheetAllHeading> OrderSheetAllHeadings { get; set; }
        public virtual DbSet<OrderSheetAllHeadingAlter> OrderSheetAllHeadingAlters { get; set; }
        public virtual DbSet<PatientWReagentReport> PatientWReagentReports { get; set; }
        public virtual DbSet<PatientWReagentReportAlter> PatientWReagentReportAlters { get; set; }
        public virtual DbSet<pepatid_multiplereg> pepatid_multiplereg { get; set; }
        public virtual DbSet<PSCItemMasterView> PSCItemMasterViews { get; set; }
        public virtual DbSet<PSCItemMasterView1> PSCItemMasterView1 { get; set; }
        public virtual DbSet<Reciept> Reciepts { get; set; }
        public virtual DbSet<ReportExpDate> ReportExpDates { get; set; }
        public virtual DbSet<ReportTransectionBelowReorderLevel> ReportTransectionBelowReorderLevels { get; set; }
        public virtual DbSet<rpt_AllColl_CenterCompliment> rpt_AllColl_CenterCompliment { get; set; }
        public virtual DbSet<rpt_AllColl_CenterCompliment1> rpt_AllColl_CenterCompliment1 { get; set; }
        public virtual DbSet<rpt_AllTechCompliment> rpt_AllTechCompliment { get; set; }
        public virtual DbSet<rpt_AllTechCompliment1> rpt_AllTechCompliment1 { get; set; }
        public virtual DbSet<Rpt_Coll_Center_income> Rpt_Coll_Center_income { get; set; }
        public virtual DbSet<Rpt_Coll_Center_income1> Rpt_Coll_Center_income1 { get; set; }
        public virtual DbSet<Rpt_Coll_Center_incomeAlter> Rpt_Coll_Center_incomeAlter { get; set; }
        public virtual DbSet<rpt_ContactInformation> rpt_ContactInformation { get; set; }
        public virtual DbSet<Rpt_DrCompliment> Rpt_DrCompliment { get; set; }
        public virtual DbSet<Rpt_DrCompliment1> Rpt_DrCompliment1 { get; set; }
        public virtual DbSet<Rpt_DrCompliment2> Rpt_DrCompliment2 { get; set; }
        public virtual DbSet<rpt_drnametable> rpt_drnametable { get; set; }
        public virtual DbSet<rpt_Expenses> rpt_Expenses { get; set; }
        public virtual DbSet<Rpt_Form3c> Rpt_Form3c { get; set; }
        public virtual DbSet<rpt_GetPatientInfoByHeading> rpt_GetPatientInfoByHeading { get; set; }
        public virtual DbSet<rpt_GetPatientInfoByHeading1> rpt_GetPatientInfoByHeading1 { get; set; }
        public virtual DbSet<Rpt_Histo_Cry> Rpt_Histo_Cry { get; set; }
        public virtual DbSet<rpt_MakeBill> rpt_MakeBill { get; set; }
        public virtual DbSet<Rpt_MakeBillIncome> Rpt_MakeBillIncome { get; set; }
        public virtual DbSet<rpt_MakeBillIncome1> rpt_MakeBillIncome1 { get; set; }
        public virtual DbSet<Rpt_PatientOutStandingBalance> Rpt_PatientOutStandingBalance { get; set; }
        public virtual DbSet<Rpt_PatientOutStandingBalance1> Rpt_PatientOutStandingBalance1 { get; set; }
        public virtual DbSet<Rpt_PrintBarCode> Rpt_PrintBarCode { get; set; }
        public virtual DbSet<rpt_PrintSticker> rpt_PrintSticker { get; set; }
        public virtual DbSet<Rpt_PrintStickerDoctor> Rpt_PrintStickerDoctor { get; set; }
        public virtual DbSet<rpt_ReportTransaction> rpt_ReportTransaction { get; set; }
        public virtual DbSet<rpt_ReportTransaction1> rpt_ReportTransaction1 { get; set; }
        public virtual DbSet<rpt_SpecialCharges> rpt_SpecialCharges { get; set; }
        public virtual DbSet<rpt_TestcodeTestname> rpt_TestcodeTestname { get; set; }
        public virtual DbSet<Rpt_TestRate> Rpt_TestRate { get; set; }
        public virtual DbSet<rpt_TestRate_Groupwise> rpt_TestRate_Groupwise { get; set; }
        public virtual DbSet<rpt_testresult> rpt_testresult { get; set; }
        public virtual DbSet<rpt_testresult_plt> rpt_testresult_plt { get; set; }
        public virtual DbSet<rpt_testresult_rbc> rpt_testresult_rbc { get; set; }
        public virtual DbSet<rpt_testresult_wbc> rpt_testresult_wbc { get; set; }
        public virtual DbSet<rpt_testresultDC> rpt_testresultDC { get; set; }
        public virtual DbSet<rpt_testresultMG> rpt_testresultMG { get; set; }
        public virtual DbSet<rpt_Titles> rpt_Titles { get; set; }
        public virtual DbSet<Rpt_TmpSch> Rpt_TmpSch { get; set; }
        public virtual DbSet<Rpt_ViewCompWPatientDaily> Rpt_ViewCompWPatientDaily { get; set; }
        public virtual DbSet<Rpt_ViewCompWPatientDailyAlter> Rpt_ViewCompWPatientDailyAlter { get; set; }
        public virtual DbSet<Rpt_ViewDeptWPatientDaily> Rpt_ViewDeptWPatientDaily { get; set; }
        public virtual DbSet<Rpt_ViewDeptWPatientDailyAlter> Rpt_ViewDeptWPatientDailyAlter { get; set; }
        public virtual DbSet<RptPatientWiseDateWiseTestGraph> RptPatientWiseDateWiseTestGraphs { get; set; }
        public virtual DbSet<RptPatientWiseDateWiseTestGraph11> RptPatientWiseDateWiseTestGraph11 { get; set; }
        public virtual DbSet<RptSampleStatu> RptSampleStatus { get; set; }
        public virtual DbSet<RptSampleStatusAlter> RptSampleStatusAlters { get; set; }
        public virtual DbSet<RptTestWorkSheet> RptTestWorkSheets { get; set; }
        public virtual DbSet<shsview> shsviews { get; set; }
        public virtual DbSet<SignatureLeft> SignatureLefts { get; set; }
        public virtual DbSet<SingnatureRight> SingnatureRights { get; set; }
        public virtual DbSet<SiteGraph1> SiteGraph1 { get; set; }
        public virtual DbSet<TEMPVIEWTestFormat> TEMPVIEWTestFormats { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<TestNameDetail> TestNameDetails { get; set; }
        public virtual DbSet<testresult> testresults { get; set; }
        public virtual DbSet<TestWIncomeReport> TestWIncomeReports { get; set; }
        public virtual DbSet<TestWIncomeReportAlter> TestWIncomeReportAlters { get; set; }
        public virtual DbSet<Title_Heading> Title_Heading { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<Transaction1View> Transaction1View { get; set; }
        public virtual DbSet<Transaction1ViewAlter> Transaction1ViewAlter { get; set; }
        public virtual DbSet<V_TestValueSearch> V_TestValueSearch { get; set; }
        public virtual DbSet<View_BindRediologyTreeNode> View_BindRediologyTreeNode { get; set; }
        public virtual DbSet<View_DispatchNew> View_DispatchNew { get; set; }
        public virtual DbSet<View_ReturnCollCenterAmount> View_ReturnCollCenterAmount { get; set; }
        public virtual DbSet<View_ReturnTechAmount> View_ReturnTechAmount { get; set; }
        public virtual DbSet<View_SearchPatients_RADIOLOGY> View_SearchPatients_RADIOLOGY { get; set; }
        public virtual DbSet<VIEW1> VIEW1 { get; set; }
        public virtual DbSet<VIEW2> VIEW2 { get; set; }
        public virtual DbSet<VIEW3> VIEW3 { get; set; }
        public virtual DbSet<VIEWCollCenter> VIEWCollCenters { get; set; }
        public virtual DbSet<ViewComprehRpt> ViewComprehRpts { get; set; }
        public virtual DbSet<ViewCOMPVSBillAmount> ViewCOMPVSBillAmounts { get; set; }
        public virtual DbSet<ViewCOMPVSBillAmountAlter> ViewCOMPVSBillAmountAlters { get; set; }
        public virtual DbSet<ViewCOMPVsBillAmountMonth> ViewCOMPVsBillAmountMonths { get; set; }
        public virtual DbSet<ViewCompVsPatientDaily> ViewCompVsPatientDailies { get; set; }
        public virtual DbSet<ViewContactinformationTLCode> ViewContactinformationTLCodes { get; set; }
        public virtual DbSet<ViewDeptVSBillAmount> ViewDeptVSBillAmounts { get; set; }
        public virtual DbSet<ViewDeptVSBillAmountAlter> ViewDeptVSBillAmountAlters { get; set; }
        public virtual DbSet<ViewDeptVsBillAmountMonth> ViewDeptVsBillAmountMonths { get; set; }
        public virtual DbSet<ViewDeptVsPatientDaily> ViewDeptVsPatientDailies { get; set; }
        public virtual DbSet<ViewDiagnosisPicReport> ViewDiagnosisPicReports { get; set; }
        public virtual DbSet<ViewDiagnosisReport> ViewDiagnosisReports { get; set; }
        public virtual DbSet<ViewGTTRpt> ViewGTTRpts { get; set; }
        public virtual DbSet<ViewPatientDiagnosi> ViewPatientDiagnosis { get; set; }
        public virtual DbSet<ViewShowMemo> ViewShowMemoes { get; set; }
        public virtual DbSet<ViewTechnician> ViewTechnicians { get; set; }
        public virtual DbSet<ViewTestreagent> ViewTestreagents { get; set; }
        public virtual DbSet<ViewUserAuthorityHeading> ViewUserAuthorityHeadings { get; set; }
        public virtual DbSet<ViewUserAuthorityTest> ViewUserAuthorityTests { get; set; }
        public virtual DbSet<ViewUserAuthorityTitle> ViewUserAuthorityTitles { get; set; }
        public virtual DbSet<Vw_Abnormal> Vw_Abnormal { get; set; }
        public virtual DbSet<Vw_Abnormal_19_06_2014> Vw_Abnormal_19_06_2014 { get; set; }
        public virtual DbSet<Vw_Accession> Vw_Accession { get; set; }
        public virtual DbSet<Vw_Accession_Old> Vw_Accession_Old { get; set; }
        public virtual DbSet<Vw_AccessionSampleCollected> Vw_AccessionSampleCollected { get; set; }
        public virtual DbSet<Vw_AncMontlyReport> Vw_AncMontlyReport { get; set; }
        public virtual DbSet<Vw_AuthorisingList> Vw_AuthorisingList { get; set; }
        public virtual DbSet<Vw_BloodbankMontlyReport> Vw_BloodbankMontlyReport { get; set; }
        public virtual DbSet<Vw_ComputerWIncomeReport> Vw_ComputerWIncomeReport { get; set; }
        public virtual DbSet<vw_Concatetest> vw_Concatetest { get; set; }
        public virtual DbSet<Vw_ContactDoctor> Vw_ContactDoctor { get; set; }
        public virtual DbSet<Vw_ContactInfo> Vw_ContactInfo { get; set; }
        public virtual DbSet<VW_ContactInformation> VW_ContactInformation { get; set; }
        public virtual DbSet<VW_ContactInformationTLCode> VW_ContactInformationTLCode { get; set; }
        public virtual DbSet<VW_counttlcodeforBOMNew> VW_counttlcodeforBOMNew { get; set; }
        public virtual DbSet<Vw_Culture> Vw_Culture { get; set; }
        public virtual DbSet<Vw_DailyWorkSheet> Vw_DailyWorkSheet { get; set; }
        public virtual DbSet<Vw_DailyWorkSheet1> Vw_DailyWorkSheet1 { get; set; }
        public virtual DbSet<VW_DateRadiologyTest> VW_DateRadiologyTest { get; set; }
        public virtual DbSet<vw_deptwisetestreport> vw_deptwisetestreport { get; set; }
        public virtual DbSet<Vw_DoubleColumn> Vw_DoubleColumn { get; set; }
        public virtual DbSet<vw_FindTurnAroundTime> vw_FindTurnAroundTime { get; set; }
        public virtual DbSet<vw_FindTurnAroundTime_3_7_2014> vw_FindTurnAroundTime_3_7_2014 { get; set; }
        public virtual DbSet<Vw_ForBlankReport> Vw_ForBlankReport { get; set; }
        public virtual DbSet<vw_ForDeletePatient> vw_ForDeletePatient { get; set; }
        public virtual DbSet<Vw_GetAllTests> Vw_GetAllTests { get; set; }
        public virtual DbSet<Vw_GetConsumption> Vw_GetConsumption { get; set; }
        public virtual DbSet<Vw_GetConsumptions> Vw_GetConsumptions { get; set; }
        public virtual DbSet<Vw_getGrideReciptDetails> Vw_getGrideReciptDetails { get; set; }
        public virtual DbSet<Vw_getInvestigationforclaim> Vw_getInvestigationforclaim { get; set; }
        public virtual DbSet<vw_GroupByLabcode> vw_GroupByLabcode { get; set; }
        public virtual DbSet<vw_GroupByLabcode_New> vw_GroupByLabcode_New { get; set; }
        public virtual DbSet<vw_GroupByLabcode_New_20082013> vw_GroupByLabcode_New_20082013 { get; set; }
        public virtual DbSet<vw_GroupByLabcode_New1> vw_GroupByLabcode_New1 { get; set; }
        public virtual DbSet<vw_GroupByLabcode_New1ReportNo> vw_GroupByLabcode_New1ReportNo { get; set; }
        public virtual DbSet<vw_GroupByLabcode_tech> vw_GroupByLabcode_tech { get; set; }
        public virtual DbSet<vw_GroupByLabcode_techReportNo> vw_GroupByLabcode_techReportNo { get; set; }
        public virtual DbSet<vw_GroupByLabcode1> vw_GroupByLabcode1 { get; set; }
        public virtual DbSet<vw_GroupByLabcode2> vw_GroupByLabcode2 { get; set; }
        public virtual DbSet<Vw_GTT> Vw_GTT { get; set; }
        public virtual DbSet<Vw_HealthUnitLabCP> Vw_HealthUnitLabCP { get; set; }
        public virtual DbSet<Vw_HealthUnitLabHM> Vw_HealthUnitLabHM { get; set; }
        public virtual DbSet<Vw_HealthUnitLabIM> Vw_HealthUnitLabIM { get; set; }
        public virtual DbSet<Vw_HealthUnitLabMI> Vw_HealthUnitLabMI { get; set; }
        public virtual DbSet<Vw_HealthUnitLabPA> Vw_HealthUnitLabPA { get; set; }
        public virtual DbSet<Vw_HealthUnitLabSE> Vw_HealthUnitLabSE { get; set; }
        public virtual DbSet<Vw_HivMontlyReport> Vw_HivMontlyReport { get; set; }
        public virtual DbSet<vw_HLPDsk_LabDetails> vw_HLPDsk_LabDetails { get; set; }
        public virtual DbSet<Vw_Investigation> Vw_Investigation { get; set; }
        public virtual DbSet<VW_InvestigationDetails> VW_InvestigationDetails { get; set; }
        public virtual DbSet<Vw_Machindetails> Vw_Machindetails { get; set; }
        public virtual DbSet<Vw_MainPateintSearch> Vw_MainPateintSearch { get; set; }
        public virtual DbSet<Vw_MakeBillView> Vw_MakeBillView { get; set; }
        public virtual DbSet<Vw_MakeBillView1> Vw_MakeBillView1 { get; set; }
        public virtual DbSet<Vw_MemoField> Vw_MemoField { get; set; }
        public virtual DbSet<Vw_MemoField1> Vw_MemoField1 { get; set; }
        public virtual DbSet<Vw_MemoField2> Vw_MemoField2 { get; set; }
        public virtual DbSet<Vw_NoFieldMemo> Vw_NoFieldMemo { get; set; }
        public virtual DbSet<Vw_OtherHMontlyReport> Vw_OtherHMontlyReport { get; set; }
        public virtual DbSet<vw_OutsourceLabReport> vw_OutsourceLabReport { get; set; }
        public virtual DbSet<Vw_Panic> Vw_Panic { get; set; }
        public virtual DbSet<VW_PateintGraphReport> VW_PateintGraphReport { get; set; }
        public virtual DbSet<Vw_PatientInvestiHelpDesk> Vw_PatientInvestiHelpDesk { get; set; }
        public virtual DbSet<Vw_PatientSearchByCatagary> Vw_PatientSearchByCatagary { get; set; }
        public virtual DbSet<Vw_PatientSearchByCatagary11> Vw_PatientSearchByCatagary11 { get; set; }
        public virtual DbSet<Vw_PatientSearchDepartment> Vw_PatientSearchDepartment { get; set; }
        public virtual DbSet<Vw_PatientSearchHeading> Vw_PatientSearchHeading { get; set; }
        public virtual DbSet<Vw_PendingReportList> Vw_PendingReportList { get; set; }
        public virtual DbSet<vw_PrintSamples> vw_PrintSamples { get; set; }
        public virtual DbSet<Vw_RadiologyDoctor> Vw_RadiologyDoctor { get; set; }
        public virtual DbSet<VW_RadiologyTest> VW_RadiologyTest { get; set; }
        public virtual DbSet<vw_ReagentDetails> vw_ReagentDetails { get; set; }
        public virtual DbSet<vw_referbydoctor> vw_referbydoctor { get; set; }
        public virtual DbSet<Vw_ReportDownloading> Vw_ReportDownloading { get; set; }
        public virtual DbSet<Vw_ReportExpDateAlter> Vw_ReportExpDateAlter { get; set; }
        public virtual DbSet<Vw_ReportTransactionAlter> Vw_ReportTransactionAlter { get; set; }
        public virtual DbSet<Vw_ReportTransectionBelowReorderLevel> Vw_ReportTransectionBelowReorderLevel { get; set; }
        public virtual DbSet<Vw_Rpt_LabCGHScode> Vw_Rpt_LabCGHScode { get; set; }
        public virtual DbSet<vw_Rpt_MonthlyTestContainer> vw_Rpt_MonthlyTestContainer { get; set; }
        public virtual DbSet<vw_rpt_PathalogyPatientWise> vw_rpt_PathalogyPatientWise { get; set; }
        public virtual DbSet<vw_Rpt_PathoLogyCount> vw_Rpt_PathoLogyCount { get; set; }
        public virtual DbSet<vw_rpt_PathologyCount_PatientWise> vw_rpt_PathologyCount_PatientWise { get; set; }
        public virtual DbSet<vw_rpt_PatientWiseRate> vw_rpt_PatientWiseRate { get; set; }
        public virtual DbSet<vw_Rpt_RadioLogyCount> vw_Rpt_RadioLogyCount { get; set; }
        public virtual DbSet<vw_rpt_RadiologyCount_PatientWise> vw_rpt_RadiologyCount_PatientWise { get; set; }
        public virtual DbSet<Vw_RptRejectTestReport> Vw_RptRejectTestReport { get; set; }
        public virtual DbSet<Vw_searchPatient> Vw_searchPatient { get; set; }
        public virtual DbSet<Vw_SearchPatientByFnLnRgn> Vw_SearchPatientByFnLnRgn { get; set; }
        public virtual DbSet<Vw_SearchPatientByHospital> Vw_SearchPatientByHospital { get; set; }
        public virtual DbSet<Vw_searchPatientTest> Vw_searchPatientTest { get; set; }
        public virtual DbSet<Vw_TbMontlyReport> Vw_TbMontlyReport { get; set; }
        public virtual DbSet<Vw_TempPatientCategory> Vw_TempPatientCategory { get; set; }
        public virtual DbSet<Vw_TempPatientHospital> Vw_TempPatientHospital { get; set; }
        public virtual DbSet<Vw_TempViewPatientDeptRpt> Vw_TempViewPatientDeptRpt { get; set; }
        public virtual DbSet<Vw_TempViewRpt> Vw_TempViewRpt { get; set; }
        public virtual DbSet<Vw_TempViewRptHospital> Vw_TempViewRptHospital { get; set; }
        public virtual DbSet<Vw_TestNameTestCode> Vw_TestNameTestCode { get; set; }
        public virtual DbSet<Vw_TestTestCodeForGraphicalMIS> Vw_TestTestCodeForGraphicalMIS { get; set; }
        public virtual DbSet<Vw_TestTurnAroundTime> Vw_TestTurnAroundTime { get; set; }
        public virtual DbSet<Vw_TestValueSearch> Vw_TestValueSearch { get; set; }
        public virtual DbSet<Vw_TitleTlCodeForGraphicalMIS> Vw_TitleTlCodeForGraphicalMIS { get; set; }
        public virtual DbSet<Vw_TurnAroundDifference> Vw_TurnAroundDifference { get; set; }
        public virtual DbSet<vw_TurnarroundDiffRegister> vw_TurnarroundDiffRegister { get; set; }
        public virtual DbSet<Vw_VCTMonthlyReport> Vw_VCTMonthlyReport { get; set; }
        public virtual DbSet<vwNormalValue> vwNormalValues { get; set; }
    
        public virtual int dt_addtosourcecontrol(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_addtosourcecontrol_u(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol_u", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_adduserobject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject");
        }
    
        public virtual int dt_adduserobject_vcs(string vchProperty)
        {
            var vchPropertyParameter = vchProperty != null ?
                new ObjectParameter("vchProperty", vchProperty) :
                new ObjectParameter("vchProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject_vcs", vchPropertyParameter);
        }
    
        public virtual int dt_checkinobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkinobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkoutobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_checkoutobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_displayoaerror(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_displayoaerror_u(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror_u", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_droppropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_droppropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual int dt_dropuserobjectbyid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_dropuserobjectbyid", idParameter);
        }
    
        public virtual int dt_generateansiname(ObjectParameter name)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_generateansiname", name);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop(string property, string value)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop", propertyParameter, valueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop_u(string property, string uvalue)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop_u", propertyParameter, uvalueParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_Result> dt_getpropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_Result>("dt_getpropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_u_Result> dt_getpropertiesbyid_u(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_u_Result>("dt_getpropertiesbyid_u", idParameter, propertyParameter);
        }
    
        public virtual int dt_getpropertiesbyid_vcs(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_getpropertiesbyid_vcs_u(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs_u", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_isundersourcecontrol(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_isundersourcecontrol_u(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol_u", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_removefromsourcecontrol()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_removefromsourcecontrol");
        }
    
        public virtual int dt_setpropertybyid(Nullable<int> id, string property, string value, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid", idParameter, propertyParameter, valueParameter, lvalueParameter);
        }
    
        public virtual int dt_setpropertybyid_u(Nullable<int> id, string property, string uvalue, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid_u", idParameter, propertyParameter, uvalueParameter, lvalueParameter);
        }
    
        public virtual int dt_validateloginparams(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_validateloginparams_u(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams_u", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_vcsenabled()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_vcsenabled");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp006()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp006");
        }
    
        public virtual ObjectResult<string> dt_whocheckedout(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("dt_whocheckedout", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual ObjectResult<string> dt_whocheckedout_u(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("dt_whocheckedout_u", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual ObjectResult<FillDropDownHisto_Result> FillDropDownHisto(string cat, string regNo, string hCFlag, string financialYearID, string iOPD, string conhms)
        {
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var hCFlagParameter = hCFlag != null ?
                new ObjectParameter("HCFlag", hCFlag) :
                new ObjectParameter("HCFlag", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var conhmsParameter = conhms != null ?
                new ObjectParameter("conhms", conhms) :
                new ObjectParameter("conhms", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDropDownHisto_Result>("FillDropDownHisto", catParameter, regNoParameter, hCFlagParameter, financialYearIDParameter, iOPDParameter, conhmsParameter);
        }
    
        public virtual ObjectResult<string> FillReffReportNo(string hCFlag, string pePatId, Nullable<int> rno, Nullable<int> companyid, string reportNo)
        {
            var hCFlagParameter = hCFlag != null ?
                new ObjectParameter("HCFlag", hCFlag) :
                new ObjectParameter("HCFlag", typeof(string));
    
            var pePatIdParameter = pePatId != null ?
                new ObjectParameter("PePatId", pePatId) :
                new ObjectParameter("PePatId", typeof(string));
    
            var rnoParameter = rno.HasValue ?
                new ObjectParameter("rno", rno) :
                new ObjectParameter("rno", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var reportNoParameter = reportNo != null ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FillReffReportNo", hCFlagParameter, pePatIdParameter, rnoParameter, companyidParameter, reportNoParameter);
        }
    
        public virtual ObjectResult<GetLabEmailDetails_Result> GetLabEmailDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLabEmailDetails_Result>("GetLabEmailDetails");
        }
    
        public virtual ObjectResult<GetTlcodeWithTests_Result> GetTlcodeWithTests(string regNo, string iOPD, Nullable<int> compID, string mainDept, string username, string userType, string reportNo, string department, string tlcodes, string statusTest, string vialID)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("compID", compID) :
                new ObjectParameter("compID", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var reportNoParameter = reportNo != null ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var tlcodesParameter = tlcodes != null ?
                new ObjectParameter("Tlcodes", tlcodes) :
                new ObjectParameter("Tlcodes", typeof(string));
    
            var statusTestParameter = statusTest != null ?
                new ObjectParameter("StatusTest", statusTest) :
                new ObjectParameter("StatusTest", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTlcodeWithTests_Result>("GetTlcodeWithTests", regNoParameter, iOPDParameter, compIDParameter, mainDeptParameter, usernameParameter, userTypeParameter, reportNoParameter, departmentParameter, tlcodesParameter, statusTestParameter, vialIDParameter);
        }
    
        public virtual int InsertContactinformation_Lab(Nullable<int> c_ID, string username, string usertype, string tests, string pePatID, string regNo, string iOPD, Nullable<System.DateTime> dateOfEntry, string intial, string firstName, string lastName, string sex, string age, string mDY, string refDr, string check_Flag, Nullable<bool> printFlag, Nullable<bool> emergencyflag, Nullable<System.DateTime> reportdate, string report_time, Nullable<System.DateTime> exam_date, Nullable<System.DateTime> exam_time, string patientPhoneNo, string patientCity, string patient_addr, string emailID, string technician_Name, string collection_Center, string tech_Code, string dr_Code, string docName, string coll_Code, string compCode, string compName, string financialYearID, Nullable<bool> cbcflag, Nullable<int> xa, Nullable<int> xr, Nullable<int> ec, Nullable<int> mr, Nullable<int> ct, Nullable<int> se, Nullable<int> pt, Nullable<double> testCharges, string sampleID, string wDeptNo, string bedNo, string wardNo, Nullable<int> hospitalID, Nullable<int> companyid, string sampleStatus, string vialID, string clinical_History, string courierDetails, string telNo, string roomnum, string bednum, string deptNo, Nullable<int> oPDNo, string orderPriority, Nullable<int> iPDNo, Nullable<bool> flag_CollCenter, string graph, Nullable<bool> flag_Tech, string wbc, string rbc, string plt, string plt1, string coulter, string sampleType, string sampleNotes, string pSCRegNo, Nullable<int> pat_id)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(string));
    
            var testsParameter = tests != null ?
                new ObjectParameter("Tests", tests) :
                new ObjectParameter("Tests", typeof(string));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var intialParameter = intial != null ?
                new ObjectParameter("intial", intial) :
                new ObjectParameter("intial", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(string));
    
            var mDYParameter = mDY != null ?
                new ObjectParameter("MDY", mDY) :
                new ObjectParameter("MDY", typeof(string));
    
            var refDrParameter = refDr != null ?
                new ObjectParameter("RefDr", refDr) :
                new ObjectParameter("RefDr", typeof(string));
    
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var printFlagParameter = printFlag.HasValue ?
                new ObjectParameter("PrintFlag", printFlag) :
                new ObjectParameter("PrintFlag", typeof(bool));
    
            var emergencyflagParameter = emergencyflag.HasValue ?
                new ObjectParameter("emergencyflag", emergencyflag) :
                new ObjectParameter("emergencyflag", typeof(bool));
    
            var reportdateParameter = reportdate.HasValue ?
                new ObjectParameter("Reportdate", reportdate) :
                new ObjectParameter("Reportdate", typeof(System.DateTime));
    
            var report_timeParameter = report_time != null ?
                new ObjectParameter("Report_time", report_time) :
                new ObjectParameter("Report_time", typeof(string));
    
            var exam_dateParameter = exam_date.HasValue ?
                new ObjectParameter("exam_date", exam_date) :
                new ObjectParameter("exam_date", typeof(System.DateTime));
    
            var exam_timeParameter = exam_time.HasValue ?
                new ObjectParameter("exam_time", exam_time) :
                new ObjectParameter("exam_time", typeof(System.DateTime));
    
            var patientPhoneNoParameter = patientPhoneNo != null ?
                new ObjectParameter("PatientPhoneNo", patientPhoneNo) :
                new ObjectParameter("PatientPhoneNo", typeof(string));
    
            var patientCityParameter = patientCity != null ?
                new ObjectParameter("PatientCity", patientCity) :
                new ObjectParameter("PatientCity", typeof(string));
    
            var patient_addrParameter = patient_addr != null ?
                new ObjectParameter("patient_addr", patient_addr) :
                new ObjectParameter("patient_addr", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var technician_NameParameter = technician_Name != null ?
                new ObjectParameter("Technician_Name", technician_Name) :
                new ObjectParameter("Technician_Name", typeof(string));
    
            var collection_CenterParameter = collection_Center != null ?
                new ObjectParameter("Collection_Center", collection_Center) :
                new ObjectParameter("Collection_Center", typeof(string));
    
            var tech_CodeParameter = tech_Code != null ?
                new ObjectParameter("Tech_Code", tech_Code) :
                new ObjectParameter("Tech_Code", typeof(string));
    
            var dr_CodeParameter = dr_Code != null ?
                new ObjectParameter("Dr_Code", dr_Code) :
                new ObjectParameter("Dr_Code", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var coll_CodeParameter = coll_Code != null ?
                new ObjectParameter("Coll_Code", coll_Code) :
                new ObjectParameter("Coll_Code", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var cbcflagParameter = cbcflag.HasValue ?
                new ObjectParameter("cbcflag", cbcflag) :
                new ObjectParameter("cbcflag", typeof(bool));
    
            var xaParameter = xa.HasValue ?
                new ObjectParameter("xa", xa) :
                new ObjectParameter("xa", typeof(int));
    
            var xrParameter = xr.HasValue ?
                new ObjectParameter("xr", xr) :
                new ObjectParameter("xr", typeof(int));
    
            var ecParameter = ec.HasValue ?
                new ObjectParameter("ec", ec) :
                new ObjectParameter("ec", typeof(int));
    
            var mrParameter = mr.HasValue ?
                new ObjectParameter("mr", mr) :
                new ObjectParameter("mr", typeof(int));
    
            var ctParameter = ct.HasValue ?
                new ObjectParameter("ct", ct) :
                new ObjectParameter("ct", typeof(int));
    
            var seParameter = se.HasValue ?
                new ObjectParameter("se", se) :
                new ObjectParameter("se", typeof(int));
    
            var ptParameter = pt.HasValue ?
                new ObjectParameter("pt", pt) :
                new ObjectParameter("pt", typeof(int));
    
            var testChargesParameter = testCharges.HasValue ?
                new ObjectParameter("TestCharges", testCharges) :
                new ObjectParameter("TestCharges", typeof(double));
    
            var sampleIDParameter = sampleID != null ?
                new ObjectParameter("SampleID", sampleID) :
                new ObjectParameter("SampleID", typeof(string));
    
            var wDeptNoParameter = wDeptNo != null ?
                new ObjectParameter("WDeptNo", wDeptNo) :
                new ObjectParameter("WDeptNo", typeof(string));
    
            var bedNoParameter = bedNo != null ?
                new ObjectParameter("BedNo", bedNo) :
                new ObjectParameter("BedNo", typeof(string));
    
            var wardNoParameter = wardNo != null ?
                new ObjectParameter("WardNo", wardNo) :
                new ObjectParameter("WardNo", typeof(string));
    
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var clinical_HistoryParameter = clinical_History != null ?
                new ObjectParameter("Clinical_History", clinical_History) :
                new ObjectParameter("Clinical_History", typeof(string));
    
            var courierDetailsParameter = courierDetails != null ?
                new ObjectParameter("CourierDetails", courierDetails) :
                new ObjectParameter("CourierDetails", typeof(string));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var roomnumParameter = roomnum != null ?
                new ObjectParameter("roomnum", roomnum) :
                new ObjectParameter("roomnum", typeof(string));
    
            var bednumParameter = bednum != null ?
                new ObjectParameter("bednum", bednum) :
                new ObjectParameter("bednum", typeof(string));
    
            var deptNoParameter = deptNo != null ?
                new ObjectParameter("deptNo", deptNo) :
                new ObjectParameter("deptNo", typeof(string));
    
            var oPDNoParameter = oPDNo.HasValue ?
                new ObjectParameter("OPDNo", oPDNo) :
                new ObjectParameter("OPDNo", typeof(int));
    
            var orderPriorityParameter = orderPriority != null ?
                new ObjectParameter("OrderPriority", orderPriority) :
                new ObjectParameter("OrderPriority", typeof(string));
    
            var iPDNoParameter = iPDNo.HasValue ?
                new ObjectParameter("IPDNo", iPDNo) :
                new ObjectParameter("IPDNo", typeof(int));
    
            var flag_CollCenterParameter = flag_CollCenter.HasValue ?
                new ObjectParameter("Flag_CollCenter", flag_CollCenter) :
                new ObjectParameter("Flag_CollCenter", typeof(bool));
    
            var graphParameter = graph != null ?
                new ObjectParameter("graph", graph) :
                new ObjectParameter("graph", typeof(string));
    
            var flag_TechParameter = flag_Tech.HasValue ?
                new ObjectParameter("Flag_Tech", flag_Tech) :
                new ObjectParameter("Flag_Tech", typeof(bool));
    
            var wbcParameter = wbc != null ?
                new ObjectParameter("wbc", wbc) :
                new ObjectParameter("wbc", typeof(string));
    
            var rbcParameter = rbc != null ?
                new ObjectParameter("rbc", rbc) :
                new ObjectParameter("rbc", typeof(string));
    
            var pltParameter = plt != null ?
                new ObjectParameter("plt", plt) :
                new ObjectParameter("plt", typeof(string));
    
            var plt1Parameter = plt1 != null ?
                new ObjectParameter("plt1", plt1) :
                new ObjectParameter("plt1", typeof(string));
    
            var coulterParameter = coulter != null ?
                new ObjectParameter("coulter", coulter) :
                new ObjectParameter("coulter", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var sampleNotesParameter = sampleNotes != null ?
                new ObjectParameter("SampleNotes", sampleNotes) :
                new ObjectParameter("SampleNotes", typeof(string));
    
            var pSCRegNoParameter = pSCRegNo != null ?
                new ObjectParameter("pSCRegNo", pSCRegNo) :
                new ObjectParameter("pSCRegNo", typeof(string));
    
            var pat_idParameter = pat_id.HasValue ?
                new ObjectParameter("pat_id", pat_id) :
                new ObjectParameter("pat_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertContactinformation_Lab", c_IDParameter, usernameParameter, usertypeParameter, testsParameter, pePatIDParameter, regNoParameter, iOPDParameter, dateOfEntryParameter, intialParameter, firstNameParameter, lastNameParameter, sexParameter, ageParameter, mDYParameter, refDrParameter, check_FlagParameter, printFlagParameter, emergencyflagParameter, reportdateParameter, report_timeParameter, exam_dateParameter, exam_timeParameter, patientPhoneNoParameter, patientCityParameter, patient_addrParameter, emailIDParameter, technician_NameParameter, collection_CenterParameter, tech_CodeParameter, dr_CodeParameter, docNameParameter, coll_CodeParameter, compCodeParameter, compNameParameter, financialYearIDParameter, cbcflagParameter, xaParameter, xrParameter, ecParameter, mrParameter, ctParameter, seParameter, ptParameter, testChargesParameter, sampleIDParameter, wDeptNoParameter, bedNoParameter, wardNoParameter, hospitalIDParameter, companyidParameter, sampleStatusParameter, vialIDParameter, clinical_HistoryParameter, courierDetailsParameter, telNoParameter, roomnumParameter, bednumParameter, deptNoParameter, oPDNoParameter, orderPriorityParameter, iPDNoParameter, flag_CollCenterParameter, graphParameter, flag_TechParameter, wbcParameter, rbcParameter, pltParameter, plt1Parameter, coulterParameter, sampleTypeParameter, sampleNotesParameter, pSCRegNoParameter, pat_idParameter);
        }
    
        public virtual int InsertVial_Master_Lab(Nullable<int> c_ID, string vialID, string sampleType, string testCodes, string testNames, string sampleStatus, string remark, Nullable<int> companyid)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var testCodesParameter = testCodes != null ?
                new ObjectParameter("TestCodes", testCodes) :
                new ObjectParameter("TestCodes", typeof(string));
    
            var testNamesParameter = testNames != null ?
                new ObjectParameter("TestNames", testNames) :
                new ObjectParameter("TestNames", typeof(string));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertVial_Master_Lab", c_IDParameter, vialIDParameter, sampleTypeParameter, testCodesParameter, testNamesParameter, sampleStatusParameter, remarkParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Pat_Info_Result> Pat_Info(Nullable<int> deptid1, Nullable<System.DateTime> dateto, Nullable<System.DateTime> datefrom)
        {
            var deptid1Parameter = deptid1.HasValue ?
                new ObjectParameter("deptid1", deptid1) :
                new ObjectParameter("deptid1", typeof(int));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pat_Info_Result>("Pat_Info", deptid1Parameter, datetoParameter, datefromParameter);
        }
    
        public virtual int Pat_Info1111(Nullable<int> deptid1, string dateto, string datefrom)
        {
            var deptid1Parameter = deptid1.HasValue ?
                new ObjectParameter("deptid1", deptid1) :
                new ObjectParameter("deptid1", typeof(int));
    
            var datetoParameter = dateto != null ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(string));
    
            var datefromParameter = datefrom != null ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pat_Info1111", deptid1Parameter, datetoParameter, datefromParameter);
        }
    
        public virtual int Proc1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc1");
        }
    
        public virtual int ReturnColl_CenterAmount(Nullable<int> regno1, string iopd1, Nullable<double> percentage)
        {
            var regno1Parameter = regno1.HasValue ?
                new ObjectParameter("regno1", regno1) :
                new ObjectParameter("regno1", typeof(int));
    
            var iopd1Parameter = iopd1 != null ?
                new ObjectParameter("iopd1", iopd1) :
                new ObjectParameter("iopd1", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnColl_CenterAmount", regno1Parameter, iopd1Parameter, percentageParameter);
        }
    
        public virtual int ReturnColl_CenterAmountNew(Nullable<int> regno1, string iopd1, Nullable<int> percentage, ObjectParameter total1)
        {
            var regno1Parameter = regno1.HasValue ?
                new ObjectParameter("regno1", regno1) :
                new ObjectParameter("regno1", typeof(int));
    
            var iopd1Parameter = iopd1 != null ?
                new ObjectParameter("iopd1", iopd1) :
                new ObjectParameter("iopd1", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnColl_CenterAmountNew", regno1Parameter, iopd1Parameter, percentageParameter, total1);
        }
    
        public virtual int ReturnTechAmount(Nullable<int> regno1, string iopd1, Nullable<int> percentage, ObjectParameter total1)
        {
            var regno1Parameter = regno1.HasValue ?
                new ObjectParameter("regno1", regno1) :
                new ObjectParameter("regno1", typeof(int));
    
            var iopd1Parameter = iopd1 != null ?
                new ObjectParameter("iopd1", iopd1) :
                new ObjectParameter("iopd1", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnTechAmount", regno1Parameter, iopd1Parameter, percentageParameter, total1);
        }
    
        public virtual int ReturnTechAmount3(Nullable<int> regno1, string iopd1, ObjectParameter total1)
        {
            var regno1Parameter = regno1.HasValue ?
                new ObjectParameter("regno1", regno1) :
                new ObjectParameter("regno1", typeof(int));
    
            var iopd1Parameter = iopd1 != null ?
                new ObjectParameter("iopd1", iopd1) :
                new ObjectParameter("iopd1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnTechAmount3", regno1Parameter, iopd1Parameter, total1);
        }
    
        public virtual int sp_allvialmaster(Nullable<int> vial_srno, string vialtype, string username, Nullable<int> companyid, string vial_flag)
        {
            var vial_srnoParameter = vial_srno.HasValue ?
                new ObjectParameter("vial_srno", vial_srno) :
                new ObjectParameter("vial_srno", typeof(int));
    
            var vialtypeParameter = vialtype != null ?
                new ObjectParameter("vialtype", vialtype) :
                new ObjectParameter("vialtype", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var vial_flagParameter = vial_flag != null ?
                new ObjectParameter("vial_flag", vial_flag) :
                new ObjectParameter("vial_flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_allvialmaster", vial_srnoParameter, vialtypeParameter, usernameParameter, companyidParameter, vial_flagParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_BioChemistry_Interface(string tLCode, string testCode, string testMachinName, string machinName, Nullable<int> companyid)
        {
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var testMachinNameParameter = testMachinName != null ?
                new ObjectParameter("TestMachinName", testMachinName) :
                new ObjectParameter("TestMachinName", typeof(string));
    
            var machinNameParameter = machinName != null ?
                new ObjectParameter("MachinName", machinName) :
                new ObjectParameter("MachinName", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BioChemistry_Interface", tLCodeParameter, testCodeParameter, testMachinNameParameter, machinNameParameter, companyidParameter);
        }
    
        public virtual int SP_ContactInfo1111111()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ContactInfo1111111");
        }
    
        public virtual ObjectResult<SP_contactinformationByDOF_Result> SP_contactinformationByDOF(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_contactinformationByDOF_Result>("SP_contactinformationByDOF", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<SP_contactinformationByRegDOF_Result> SP_contactinformationByRegDOF(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> regno, Nullable<int> companyid)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var regnoParameter = regno.HasValue ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_contactinformationByRegDOF_Result>("SP_contactinformationByRegDOF", fromdateParameter, todateParameter, regnoParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_contactinformationByRegIopd_Result> SP_contactinformationByRegIopd(string iOPD, Nullable<int> regno, Nullable<int> companyid)
        {
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var regnoParameter = regno.HasValue ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_contactinformationByRegIopd_Result>("SP_contactinformationByRegIopd", iOPDParameter, regnoParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_ContactInformationTLCode_Result> SP_ContactInformationTLCode(string iOPD, Nullable<int> companyid, Nullable<int> regNo)
        {
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var regNoParameter = regNo.HasValue ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ContactInformationTLCode_Result>("SP_ContactInformationTLCode", iOPDParameter, companyidParameter, regNoParameter);
        }
    
        public virtual ObjectResult<SP_ContactInformationTLCodeByRegIopd_Result> SP_ContactInformationTLCodeByRegIopd(Nullable<int> regno, string iopd, Nullable<int> companyid)
        {
            var regnoParameter = regno.HasValue ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(int));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ContactInformationTLCodeByRegIopd_Result>("SP_ContactInformationTLCodeByRegIopd", regnoParameter, iopdParameter, companyidParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_CreatePerticularForCompany(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> deptid1)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var deptid1Parameter = deptid1.HasValue ?
                new ObjectParameter("deptid1", deptid1) :
                new ObjectParameter("deptid1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreatePerticularForCompany", datefromParameter, datetoParameter, deptid1Parameter);
        }
    
        public virtual int SP_CreatePerticularForCompany11(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> compid1)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var compid1Parameter = compid1.HasValue ?
                new ObjectParameter("Compid1", compid1) :
                new ObjectParameter("Compid1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreatePerticularForCompany11", datefromParameter, datetoParameter, compid1Parameter);
        }
    
        public virtual int SP_CreatePerticularForDepartment(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> deptid1)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var deptid1Parameter = deptid1.HasValue ?
                new ObjectParameter("deptid1", deptid1) :
                new ObjectParameter("deptid1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreatePerticularForDepartment", datefromParameter, datetoParameter, deptid1Parameter);
        }
    
        public virtual int SP_CreatePerticularForDepartment11(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto, Nullable<int> deptid1)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            var deptid1Parameter = deptid1.HasValue ?
                new ObjectParameter("deptid1", deptid1) :
                new ObjectParameter("deptid1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreatePerticularForDepartment11", datefromParameter, datetoParameter, deptid1Parameter);
        }
    
        public virtual int sp_DeleteHealthPackage_Update(string groupCode, Nullable<int> companyid)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteHealthPackage_Update", groupCodeParameter, companyidParameter);
        }
    
        public virtual int SP_DeletePatient(Nullable<int> c_ID, string regno, string iOPD, Nullable<int> companyid)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeletePatient", c_IDParameter, regnoParameter, iOPDParameter, companyidParameter);
        }
    
        public virtual int SP_DeleteSample(string regNo, string iOPD)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteSample", regNoParameter, iOPDParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<Sp_FillItemDescription_Result> Sp_FillItemDescription(string patientName)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_FillItemDescription_Result>("Sp_FillItemDescription", patientNameParameter);
        }
    
        public virtual ObjectResult<Sp_FillTest_Result> Sp_FillTest(string patientName, Nullable<int> companyid, string mainDept)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_FillTest_Result>("Sp_FillTest", patientNameParameter, companyidParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<Sp_FillTestforReagentconsumption_Result> Sp_FillTestforReagentconsumption(string patientName, Nullable<int> companyid, string mainDept, string pepatid)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("Pepatid", pepatid) :
                new ObjectParameter("Pepatid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_FillTestforReagentconsumption_Result>("Sp_FillTestforReagentconsumption", patientNameParameter, companyidParameter, mainDeptParameter, pepatidParameter);
        }
    
        public virtual ObjectResult<Sp_getAllDataPSC_Result> Sp_getAllDataPSC(string usertype, string mainDept, string orderField, Nullable<int> companyid)
        {
            var usertypeParameter = usertype != null ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var orderFieldParameter = orderField != null ?
                new ObjectParameter("orderField", orderField) :
                new ObjectParameter("orderField", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_getAllDataPSC_Result>("Sp_getAllDataPSC", usertypeParameter, mainDeptParameter, orderFieldParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_getAllTest_Result> SP_getAllTest(string tLCode, Nullable<int> companyid)
        {
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getAllTest_Result>("SP_getAllTest", tLCodeParameter, companyidParameter);
        }
    
        public virtual int SP_GetAuthorisedpatientlist(string labCode, string fromDate, string toDate, Nullable<int> companyid)
        {
            var labCodeParameter = labCode != null ?
                new ObjectParameter("labCode", labCode) :
                new ObjectParameter("labCode", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetAuthorisedpatientlist", labCodeParameter, fromDateParameter, toDateParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_GetBOM_Result> SP_GetBOM(string mainDept, Nullable<int> companyId)
        {
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBOM_Result>("SP_GetBOM", mainDeptParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetCollectionName_Result> Sp_GetCollectionName(string patientName, string labcode, Nullable<int> companyid)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var labcodeParameter = labcode != null ?
                new ObjectParameter("labcode", labcode) :
                new ObjectParameter("labcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetCollectionName_Result>("Sp_GetCollectionName", patientNameParameter, labcodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_getCurrentFinancialYear_Result> SP_getCurrentFinancialYear(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getCurrentFinancialYear_Result>("SP_getCurrentFinancialYear", dateParameter);
        }
    
        public virtual ObjectResult<SP_GetDamageFilm_Result> SP_GetDamageFilm(Nullable<int> id, string mainDept, Nullable<int> companyid, Nullable<int> task, string drugType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            var drugTypeParameter = drugType != null ?
                new ObjectParameter("DrugType", drugType) :
                new ObjectParameter("DrugType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDamageFilm_Result>("SP_GetDamageFilm", idParameter, mainDeptParameter, companyidParameter, taskParameter, drugTypeParameter);
        }
    
        public virtual int sp_GetDataForAuthorised(string status, string pepatId, Nullable<int> companyId, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var pepatIdParameter = pepatId != null ?
                new ObjectParameter("PepatId", pepatId) :
                new ObjectParameter("PepatId", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetDataForAuthorised", statusParameter, pepatIdParameter, companyIdParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<string> Sp_GetDataFromGroupDetails(string groupCode, Nullable<int> companyid)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_GetDataFromGroupDetails", groupCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_getDeptCompName_Result> SP_getDeptCompName(string deptCompFlag)
        {
            var deptCompFlagParameter = deptCompFlag != null ?
                new ObjectParameter("DeptCompFlag", deptCompFlag) :
                new ObjectParameter("DeptCompFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getDeptCompName_Result>("SP_getDeptCompName", deptCompFlagParameter);
        }
    
        public virtual ObjectResult<Sp_getDeptCompNameMainDeptWise_Result> Sp_getDeptCompNameMainDeptWise(string deptCompFlag, string mainDept, Nullable<int> companyid)
        {
            var deptCompFlagParameter = deptCompFlag != null ?
                new ObjectParameter("DeptCompFlag", deptCompFlag) :
                new ObjectParameter("DeptCompFlag", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_getDeptCompNameMainDeptWise_Result>("Sp_getDeptCompNameMainDeptWise", deptCompFlagParameter, mainDeptParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Sp_GetDispatchedData_Result> Sp_GetDispatchedData(Nullable<int> companyid, string maindept, string iopd)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetDispatchedData_Result>("Sp_GetDispatchedData", companyidParameter, maindeptParameter, iopdParameter);
        }
    
        public virtual ObjectResult<Sp_GetDispatchedDataFromTo_Result> Sp_GetDispatchedDataFromTo(Nullable<int> companyid, string maindept, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string iopd)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetDispatchedDataFromTo_Result>("Sp_GetDispatchedDataFromTo", companyidParameter, maindeptParameter, fromdateParameter, todateParameter, iopdParameter);
        }
    
        public virtual ObjectResult<string> sp_GetDoctorEmail(string regNo, string iOPD, Nullable<int> companyId)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetDoctorEmail", regNoParameter, iOPDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<sp_gethcode_Result> sp_gethcode(string tlcode, Nullable<int> companyid, string mainDept)
        {
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_gethcode_Result>("sp_gethcode", tlcodeParameter, companyidParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<SP_getHeadings_Result> SP_getHeadings(Nullable<int> companyid, string mainDept)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getHeadings_Result>("SP_getHeadings", companyidParameter, mainDeptParameter);
        }
    
        public virtual int SP_getHeadings_MASM(Nullable<int> companyid, string mainDept)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_getHeadings_MASM", companyidParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<SP_getHeadings_MIS_Result> SP_getHeadings_MIS(Nullable<int> companyid, string maindept)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getHeadings_MIS_Result>("SP_getHeadings_MIS", companyidParameter, maindeptParameter);
        }
    
        public virtual ObjectResult<SP_getLabSubParticular_Result> SP_getLabSubParticular(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getLabSubParticular_Result>("SP_getLabSubParticular", companyidParameter);
        }
    
        public virtual ObjectResult<sp_GetLabTestList_Result> sp_GetLabTestList(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLabTestList_Result>("sp_GetLabTestList", companyIdParameter);
        }
    
        public virtual ObjectResult<SP_GetPaitentTestResultforChart_Result> SP_GetPaitentTestResultforChart(Nullable<int> companyid, string fromdate, string todate, string pePatId, string parameterName, string testCode)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(string));
    
            var pePatIdParameter = pePatId != null ?
                new ObjectParameter("PePatId", pePatId) :
                new ObjectParameter("PePatId", typeof(string));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPaitentTestResultforChart_Result>("SP_GetPaitentTestResultforChart", companyidParameter, fromdateParameter, todateParameter, pePatIdParameter, parameterNameParameter, testCodeParameter);
        }
    
        public virtual ObjectResult<string> Sp_GetPatientNameByPrefix(string patientName, string labcode, Nullable<int> companyid)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var labcodeParameter = labcode != null ?
                new ObjectParameter("labcode", labcode) :
                new ObjectParameter("labcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_GetPatientNameByPrefix", patientNameParameter, labcodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Sp_GetPatientNameByPrefixWithPePatid_Result> Sp_GetPatientNameByPrefixWithPePatid(string patientName, string labcode, Nullable<int> companyid)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var labcodeParameter = labcode != null ?
                new ObjectParameter("labcode", labcode) :
                new ObjectParameter("labcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetPatientNameByPrefixWithPePatid_Result>("Sp_GetPatientNameByPrefixWithPePatid", patientNameParameter, labcodeParameter, companyidParameter);
        }
    
        public virtual int SP_GetPendingpatientlist(string labCode, string fromDate, string toDate, Nullable<int> companyid, string collcode)
        {
            var labCodeParameter = labCode != null ?
                new ObjectParameter("labCode", labCode) :
                new ObjectParameter("labCode", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var collcodeParameter = collcode != null ?
                new ObjectParameter("Collcode", collcode) :
                new ObjectParameter("Collcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetPendingpatientlist", labCodeParameter, fromDateParameter, toDateParameter, companyidParameter, collcodeParameter);
        }
    
        public virtual ObjectResult<Sp_GetPrintedDataFromTo_Result> Sp_GetPrintedDataFromTo(Nullable<int> companyid, string maindept, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string iopd)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetPrintedDataFromTo_Result>("Sp_GetPrintedDataFromTo", companyidParameter, maindeptParameter, fromdateParameter, todateParameter, iopdParameter);
        }
    
        public virtual ObjectResult<sp_GetRejectTestForDoctor_Result> sp_GetRejectTestForDoctor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRejectTestForDoctor_Result>("sp_GetRejectTestForDoctor");
        }
    
        public virtual ObjectResult<sp_GetRejectTestForUser_Result> sp_GetRejectTestForUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRejectTestForUser_Result>("sp_GetRejectTestForUser");
        }
    
        public virtual int SP_GetSampleworksheetData(string fromDate, string toDate, string tlcode, string patientName, string regnoID, string coll_code, string maindept, string vial, Nullable<int> companyid)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("patientName", patientName) :
                new ObjectParameter("patientName", typeof(string));
    
            var regnoIDParameter = regnoID != null ?
                new ObjectParameter("regnoID", regnoID) :
                new ObjectParameter("regnoID", typeof(string));
    
            var coll_codeParameter = coll_code != null ?
                new ObjectParameter("coll_code", coll_code) :
                new ObjectParameter("coll_code", typeof(string));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var vialParameter = vial != null ?
                new ObjectParameter("vial", vial) :
                new ObjectParameter("vial", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetSampleworksheetData", fromDateParameter, toDateParameter, tlcodeParameter, patientNameParameter, regnoIDParameter, coll_codeParameter, maindeptParameter, vialParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_getSelectByCollCen_Result> SP_getSelectByCollCen(string check_Flag, string tech, Nullable<int> companyid)
        {
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var techParameter = tech != null ?
                new ObjectParameter("Tech", tech) :
                new ObjectParameter("Tech", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getSelectByCollCen_Result>("SP_getSelectByCollCen", check_FlagParameter, techParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_getSelectByName_Result> SP_getSelectByName(string check_Flag, Nullable<int> companyid)
        {
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getSelectByName_Result>("SP_getSelectByName", check_FlagParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_getSelectByTech_Result> SP_getSelectByTech(string check_Flag, string tech, Nullable<int> companyid)
        {
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var techParameter = tech != null ?
                new ObjectParameter("Tech", tech) :
                new ObjectParameter("Tech", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getSelectByTech_Result>("SP_getSelectByTech", check_FlagParameter, techParameter, companyidParameter);
        }
    
        public virtual ObjectResult<string> Sp_GetshortformResult(string regno, string iOPD, Nullable<int> companyId)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_GetshortformResult", regnoParameter, iOPDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<sp_GetStatus_Result> sp_GetStatus(Nullable<int> c_id, Nullable<int> companyid, string deptcode, string username)
        {
            var c_idParameter = c_id.HasValue ?
                new ObjectParameter("C_id", c_id) :
                new ObjectParameter("C_id", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var deptcodeParameter = deptcode != null ?
                new ObjectParameter("deptcode", deptcode) :
                new ObjectParameter("deptcode", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStatus_Result>("sp_GetStatus", c_idParameter, companyidParameter, deptcodeParameter, usernameParameter);
        }
    
        public virtual int sp_GetStatusFromSmWorkSheet(Nullable<int> c_id, Nullable<int> companyid, string deptcode, Nullable<int> task, string username, string deptid, string status, string vialid, string tlcodes, string reportNo)
        {
            var c_idParameter = c_id.HasValue ?
                new ObjectParameter("C_id", c_id) :
                new ObjectParameter("C_id", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var deptcodeParameter = deptcode != null ?
                new ObjectParameter("deptcode", deptcode) :
                new ObjectParameter("deptcode", typeof(string));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var deptidParameter = deptid != null ?
                new ObjectParameter("Deptid", deptid) :
                new ObjectParameter("Deptid", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var vialidParameter = vialid != null ?
                new ObjectParameter("Vialid", vialid) :
                new ObjectParameter("Vialid", typeof(string));
    
            var tlcodesParameter = tlcodes != null ?
                new ObjectParameter("Tlcodes", tlcodes) :
                new ObjectParameter("Tlcodes", typeof(string));
    
            var reportNoParameter = reportNo != null ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetStatusFromSmWorkSheet", c_idParameter, companyidParameter, deptcodeParameter, taskParameter, usernameParameter, deptidParameter, statusParameter, vialidParameter, tlcodesParameter, reportNoParameter);
        }
    
        public virtual ObjectResult<string> sp_GetStatusReject(Nullable<int> c_id, Nullable<int> companyid, string deptcode, string tlcode)
        {
            var c_idParameter = c_id.HasValue ?
                new ObjectParameter("C_id", c_id) :
                new ObjectParameter("C_id", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var deptcodeParameter = deptcode != null ?
                new ObjectParameter("deptcode", deptcode) :
                new ObjectParameter("deptcode", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetStatusReject", c_idParameter, companyidParameter, deptcodeParameter, tlcodeParameter);
        }
    
        public virtual int Sp_GetTest(Nullable<int> companyid, string maindept, string department)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GetTest", companyidParameter, maindeptParameter, departmentParameter);
        }
    
        public virtual int sp_GetTestForGroupReport(string regno, string iopd, Nullable<int> companyid, string maindept, Nullable<int> task, string username, string deptid, string tLCodes, string vialid, string authorized)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var deptidParameter = deptid != null ?
                new ObjectParameter("Deptid", deptid) :
                new ObjectParameter("Deptid", typeof(string));
    
            var tLCodesParameter = tLCodes != null ?
                new ObjectParameter("TLCodes", tLCodes) :
                new ObjectParameter("TLCodes", typeof(string));
    
            var vialidParameter = vialid != null ?
                new ObjectParameter("Vialid", vialid) :
                new ObjectParameter("Vialid", typeof(string));
    
            var authorizedParameter = authorized != null ?
                new ObjectParameter("Authorized", authorized) :
                new ObjectParameter("Authorized", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetTestForGroupReport", regnoParameter, iopdParameter, companyidParameter, maindeptParameter, taskParameter, usernameParameter, deptidParameter, tLCodesParameter, vialidParameter, authorizedParameter);
        }
    
        public virtual ObjectResult<Sp_GetTestName_Result> Sp_GetTestName(string hCode, Nullable<decimal> companyid)
        {
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetTestName_Result>("Sp_GetTestName", hCodeParameter, companyidParameter);
        }
    
        public virtual int SP_GetTestResultInfo(string pateintName, string permanentID, Nullable<int> companyid)
        {
            var pateintNameParameter = pateintName != null ?
                new ObjectParameter("PateintName", pateintName) :
                new ObjectParameter("PateintName", typeof(string));
    
            var permanentIDParameter = permanentID != null ?
                new ObjectParameter("PermanentID", permanentID) :
                new ObjectParameter("PermanentID", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetTestResultInfo", pateintNameParameter, permanentIDParameter, companyidParameter);
        }
    
        public virtual ObjectResult<sp_GetTestsForFilm_Result> sp_GetTestsForFilm(Nullable<int> c_id, Nullable<int> companyid, string deptcode, string username)
        {
            var c_idParameter = c_id.HasValue ?
                new ObjectParameter("C_id", c_id) :
                new ObjectParameter("C_id", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var deptcodeParameter = deptcode != null ?
                new ObjectParameter("deptcode", deptcode) :
                new ObjectParameter("deptcode", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTestsForFilm_Result>("sp_GetTestsForFilm", c_idParameter, companyidParameter, deptcodeParameter, usernameParameter);
        }
    
        public virtual ObjectResult<SP_getTitle_Result> SP_getTitle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getTitle_Result>("SP_getTitle");
        }
    
        public virtual ObjectResult<SP_getTitleByHcode_Result> SP_getTitleByHcode(string hcode, Nullable<int> companyid)
        {
            var hcodeParameter = hcode != null ?
                new ObjectParameter("Hcode", hcode) :
                new ObjectParameter("Hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getTitleByHcode_Result>("SP_getTitleByHcode", hcodeParameter, companyidParameter);
        }
    
        public virtual int SP_getTitleByHcode_MASM(string hcode, Nullable<int> companyid)
        {
            var hcodeParameter = hcode != null ?
                new ObjectParameter("Hcode", hcode) :
                new ObjectParameter("Hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_getTitleByHcode_MASM", hcodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_getTlcodeByRegnoIOPDHCode_Result> SP_getTlcodeByRegnoIOPDHCode(Nullable<int> regno, string iopd, string hCode)
        {
            var regnoParameter = regno.HasValue ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(int));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getTlcodeByRegnoIOPDHCode_Result>("SP_getTlcodeByRegnoIOPDHCode", regnoParameter, iopdParameter, hCodeParameter);
        }
    
        public virtual ObjectResult<SP_GetTurnAroundTimeByName_Result> SP_GetTurnAroundTimeByName(string firstName, string mainDept, Nullable<decimal> companyId, string iopd)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(decimal));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetTurnAroundTimeByName_Result>("SP_GetTurnAroundTimeByName", firstNameParameter, mainDeptParameter, companyIdParameter, iopdParameter);
        }
    
        public virtual ObjectResult<SP_GetTurnAroundTimeByRegNo_Result> SP_GetTurnAroundTimeByRegNo(string regNo, string mainDept, Nullable<decimal> companyId, string iopd)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(decimal));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetTurnAroundTimeByRegNo_Result>("SP_GetTurnAroundTimeByRegNo", regNoParameter, mainDeptParameter, companyIdParameter, iopdParameter);
        }
    
        public virtual ObjectResult<Sp_GetUndispatchedData_Result> Sp_GetUndispatchedData(Nullable<int> companyid, string iopd)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetUndispatchedData_Result>("Sp_GetUndispatchedData", companyidParameter, iopdParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Insert_ContactInformation1(string username, string usertype, string tests, string pePatID, string regNo, string iOPD, Nullable<System.DateTime> dateOfEntry, string intial, string firstName, string lastName, string sex, Nullable<int> age, string mDY, string refDr, string check_Flag, Nullable<bool> printFlag, Nullable<bool> flag_CollCenter, Nullable<bool> flag_Tech, Nullable<bool> emergencyflag, Nullable<System.DateTime> reportdate, string report_time, Nullable<System.DateTime> exam_date, string exam_time, string patientPhoneNo, string patientCity, string patient_addr, string emailID, string technician_Name, string collection_Center, string tech_Code, string dr_Code, string docName, string coll_Code, string compCode, string compName, string financialYearID, Nullable<bool> cbcflag, string graph, Nullable<int> xa, Nullable<int> xr, Nullable<int> ec, Nullable<int> mr, Nullable<int> ct, Nullable<int> se, Nullable<int> pt, string wbc, string rbc, string plt, string plt1, string coulter, Nullable<double> testCharges, string sampleID, Nullable<decimal> hospitalID, string wardNo, string bedNo, string wDeptNo, string deptno, Nullable<int> iPDNo, string bednum, string roomnum, Nullable<int> companyid, string sampleStatus, string sampleType, string sampleNotes, string pSCRegNo, string vialID, string clinical_History, string courierDetails, Nullable<int> oPDNo, Nullable<int> labNo, string telNo, Nullable<int> pat_id, string orderPriority, string tLCode, string hCode, string groupCode, Nullable<double> testRate, string remark, string lab_code, string codeTes, string vSampleType, string vTestCodes, string vTestNames, string vCodeTes, string ptype, Nullable<int> count, Nullable<int> cIDNew, Nullable<int> hivNo, Nullable<int> clinicNo, string hivType)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(string));
    
            var testsParameter = tests != null ?
                new ObjectParameter("Tests", tests) :
                new ObjectParameter("Tests", typeof(string));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var intialParameter = intial != null ?
                new ObjectParameter("intial", intial) :
                new ObjectParameter("intial", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var mDYParameter = mDY != null ?
                new ObjectParameter("MDY", mDY) :
                new ObjectParameter("MDY", typeof(string));
    
            var refDrParameter = refDr != null ?
                new ObjectParameter("RefDr", refDr) :
                new ObjectParameter("RefDr", typeof(string));
    
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var printFlagParameter = printFlag.HasValue ?
                new ObjectParameter("PrintFlag", printFlag) :
                new ObjectParameter("PrintFlag", typeof(bool));
    
            var flag_CollCenterParameter = flag_CollCenter.HasValue ?
                new ObjectParameter("Flag_CollCenter", flag_CollCenter) :
                new ObjectParameter("Flag_CollCenter", typeof(bool));
    
            var flag_TechParameter = flag_Tech.HasValue ?
                new ObjectParameter("Flag_Tech", flag_Tech) :
                new ObjectParameter("Flag_Tech", typeof(bool));
    
            var emergencyflagParameter = emergencyflag.HasValue ?
                new ObjectParameter("emergencyflag", emergencyflag) :
                new ObjectParameter("emergencyflag", typeof(bool));
    
            var reportdateParameter = reportdate.HasValue ?
                new ObjectParameter("Reportdate", reportdate) :
                new ObjectParameter("Reportdate", typeof(System.DateTime));
    
            var report_timeParameter = report_time != null ?
                new ObjectParameter("Report_time", report_time) :
                new ObjectParameter("Report_time", typeof(string));
    
            var exam_dateParameter = exam_date.HasValue ?
                new ObjectParameter("exam_date", exam_date) :
                new ObjectParameter("exam_date", typeof(System.DateTime));
    
            var exam_timeParameter = exam_time != null ?
                new ObjectParameter("exam_time", exam_time) :
                new ObjectParameter("exam_time", typeof(string));
    
            var patientPhoneNoParameter = patientPhoneNo != null ?
                new ObjectParameter("PatientPhoneNo", patientPhoneNo) :
                new ObjectParameter("PatientPhoneNo", typeof(string));
    
            var patientCityParameter = patientCity != null ?
                new ObjectParameter("PatientCity", patientCity) :
                new ObjectParameter("PatientCity", typeof(string));
    
            var patient_addrParameter = patient_addr != null ?
                new ObjectParameter("patient_addr", patient_addr) :
                new ObjectParameter("patient_addr", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var technician_NameParameter = technician_Name != null ?
                new ObjectParameter("Technician_Name", technician_Name) :
                new ObjectParameter("Technician_Name", typeof(string));
    
            var collection_CenterParameter = collection_Center != null ?
                new ObjectParameter("Collection_Center", collection_Center) :
                new ObjectParameter("Collection_Center", typeof(string));
    
            var tech_CodeParameter = tech_Code != null ?
                new ObjectParameter("Tech_Code", tech_Code) :
                new ObjectParameter("Tech_Code", typeof(string));
    
            var dr_CodeParameter = dr_Code != null ?
                new ObjectParameter("Dr_Code", dr_Code) :
                new ObjectParameter("Dr_Code", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var coll_CodeParameter = coll_Code != null ?
                new ObjectParameter("Coll_Code", coll_Code) :
                new ObjectParameter("Coll_Code", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var cbcflagParameter = cbcflag.HasValue ?
                new ObjectParameter("cbcflag", cbcflag) :
                new ObjectParameter("cbcflag", typeof(bool));
    
            var graphParameter = graph != null ?
                new ObjectParameter("graph", graph) :
                new ObjectParameter("graph", typeof(string));
    
            var xaParameter = xa.HasValue ?
                new ObjectParameter("xa", xa) :
                new ObjectParameter("xa", typeof(int));
    
            var xrParameter = xr.HasValue ?
                new ObjectParameter("xr", xr) :
                new ObjectParameter("xr", typeof(int));
    
            var ecParameter = ec.HasValue ?
                new ObjectParameter("ec", ec) :
                new ObjectParameter("ec", typeof(int));
    
            var mrParameter = mr.HasValue ?
                new ObjectParameter("mr", mr) :
                new ObjectParameter("mr", typeof(int));
    
            var ctParameter = ct.HasValue ?
                new ObjectParameter("ct", ct) :
                new ObjectParameter("ct", typeof(int));
    
            var seParameter = se.HasValue ?
                new ObjectParameter("se", se) :
                new ObjectParameter("se", typeof(int));
    
            var ptParameter = pt.HasValue ?
                new ObjectParameter("pt", pt) :
                new ObjectParameter("pt", typeof(int));
    
            var wbcParameter = wbc != null ?
                new ObjectParameter("wbc", wbc) :
                new ObjectParameter("wbc", typeof(string));
    
            var rbcParameter = rbc != null ?
                new ObjectParameter("rbc", rbc) :
                new ObjectParameter("rbc", typeof(string));
    
            var pltParameter = plt != null ?
                new ObjectParameter("plt", plt) :
                new ObjectParameter("plt", typeof(string));
    
            var plt1Parameter = plt1 != null ?
                new ObjectParameter("plt1", plt1) :
                new ObjectParameter("plt1", typeof(string));
    
            var coulterParameter = coulter != null ?
                new ObjectParameter("coulter", coulter) :
                new ObjectParameter("coulter", typeof(string));
    
            var testChargesParameter = testCharges.HasValue ?
                new ObjectParameter("TestCharges", testCharges) :
                new ObjectParameter("TestCharges", typeof(double));
    
            var sampleIDParameter = sampleID != null ?
                new ObjectParameter("SampleID", sampleID) :
                new ObjectParameter("SampleID", typeof(string));
    
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(decimal));
    
            var wardNoParameter = wardNo != null ?
                new ObjectParameter("WardNo", wardNo) :
                new ObjectParameter("WardNo", typeof(string));
    
            var bedNoParameter = bedNo != null ?
                new ObjectParameter("BedNo", bedNo) :
                new ObjectParameter("BedNo", typeof(string));
    
            var wDeptNoParameter = wDeptNo != null ?
                new ObjectParameter("WDeptNo", wDeptNo) :
                new ObjectParameter("WDeptNo", typeof(string));
    
            var deptnoParameter = deptno != null ?
                new ObjectParameter("deptno", deptno) :
                new ObjectParameter("deptno", typeof(string));
    
            var iPDNoParameter = iPDNo.HasValue ?
                new ObjectParameter("IPDNo", iPDNo) :
                new ObjectParameter("IPDNo", typeof(int));
    
            var bednumParameter = bednum != null ?
                new ObjectParameter("bednum", bednum) :
                new ObjectParameter("bednum", typeof(string));
    
            var roomnumParameter = roomnum != null ?
                new ObjectParameter("roomnum", roomnum) :
                new ObjectParameter("roomnum", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var sampleNotesParameter = sampleNotes != null ?
                new ObjectParameter("SampleNotes", sampleNotes) :
                new ObjectParameter("SampleNotes", typeof(string));
    
            var pSCRegNoParameter = pSCRegNo != null ?
                new ObjectParameter("pSCRegNo", pSCRegNo) :
                new ObjectParameter("pSCRegNo", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var clinical_HistoryParameter = clinical_History != null ?
                new ObjectParameter("Clinical_History", clinical_History) :
                new ObjectParameter("Clinical_History", typeof(string));
    
            var courierDetailsParameter = courierDetails != null ?
                new ObjectParameter("CourierDetails", courierDetails) :
                new ObjectParameter("CourierDetails", typeof(string));
    
            var oPDNoParameter = oPDNo.HasValue ?
                new ObjectParameter("OPDNo", oPDNo) :
                new ObjectParameter("OPDNo", typeof(int));
    
            var labNoParameter = labNo.HasValue ?
                new ObjectParameter("labNo", labNo) :
                new ObjectParameter("labNo", typeof(int));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var pat_idParameter = pat_id.HasValue ?
                new ObjectParameter("pat_id", pat_id) :
                new ObjectParameter("pat_id", typeof(int));
    
            var orderPriorityParameter = orderPriority != null ?
                new ObjectParameter("OrderPriority", orderPriority) :
                new ObjectParameter("OrderPriority", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            var codeTesParameter = codeTes != null ?
                new ObjectParameter("CodeTes", codeTes) :
                new ObjectParameter("CodeTes", typeof(string));
    
            var vSampleTypeParameter = vSampleType != null ?
                new ObjectParameter("VSampleType", vSampleType) :
                new ObjectParameter("VSampleType", typeof(string));
    
            var vTestCodesParameter = vTestCodes != null ?
                new ObjectParameter("VTestCodes", vTestCodes) :
                new ObjectParameter("VTestCodes", typeof(string));
    
            var vTestNamesParameter = vTestNames != null ?
                new ObjectParameter("VTestNames", vTestNames) :
                new ObjectParameter("VTestNames", typeof(string));
    
            var vCodeTesParameter = vCodeTes != null ?
                new ObjectParameter("VCodeTes", vCodeTes) :
                new ObjectParameter("VCodeTes", typeof(string));
    
            var ptypeParameter = ptype != null ?
                new ObjectParameter("ptype", ptype) :
                new ObjectParameter("ptype", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var cIDNewParameter = cIDNew.HasValue ?
                new ObjectParameter("CIDNew", cIDNew) :
                new ObjectParameter("CIDNew", typeof(int));
    
            var hivNoParameter = hivNo.HasValue ?
                new ObjectParameter("HivNo", hivNo) :
                new ObjectParameter("HivNo", typeof(int));
    
            var clinicNoParameter = clinicNo.HasValue ?
                new ObjectParameter("ClinicNo", clinicNo) :
                new ObjectParameter("ClinicNo", typeof(int));
    
            var hivTypeParameter = hivType != null ?
                new ObjectParameter("HivType", hivType) :
                new ObjectParameter("HivType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Insert_ContactInformation1", usernameParameter, usertypeParameter, testsParameter, pePatIDParameter, regNoParameter, iOPDParameter, dateOfEntryParameter, intialParameter, firstNameParameter, lastNameParameter, sexParameter, ageParameter, mDYParameter, refDrParameter, check_FlagParameter, printFlagParameter, flag_CollCenterParameter, flag_TechParameter, emergencyflagParameter, reportdateParameter, report_timeParameter, exam_dateParameter, exam_timeParameter, patientPhoneNoParameter, patientCityParameter, patient_addrParameter, emailIDParameter, technician_NameParameter, collection_CenterParameter, tech_CodeParameter, dr_CodeParameter, docNameParameter, coll_CodeParameter, compCodeParameter, compNameParameter, financialYearIDParameter, cbcflagParameter, graphParameter, xaParameter, xrParameter, ecParameter, mrParameter, ctParameter, seParameter, ptParameter, wbcParameter, rbcParameter, pltParameter, plt1Parameter, coulterParameter, testChargesParameter, sampleIDParameter, hospitalIDParameter, wardNoParameter, bedNoParameter, wDeptNoParameter, deptnoParameter, iPDNoParameter, bednumParameter, roomnumParameter, companyidParameter, sampleStatusParameter, sampleTypeParameter, sampleNotesParameter, pSCRegNoParameter, vialIDParameter, clinical_HistoryParameter, courierDetailsParameter, oPDNoParameter, labNoParameter, telNoParameter, pat_idParameter, orderPriorityParameter, tLCodeParameter, hCodeParameter, groupCodeParameter, testRateParameter, remarkParameter, lab_codeParameter, codeTesParameter, vSampleTypeParameter, vTestCodesParameter, vTestNamesParameter, vCodeTesParameter, ptypeParameter, countParameter, cIDNewParameter, hivNoParameter, clinicNoParameter, hivTypeParameter);
        }
    
        public virtual int sp_Insert_param(string wbc_g, string tblname, Nullable<int> g_regno, string g_iopd)
        {
            var wbc_gParameter = wbc_g != null ?
                new ObjectParameter("wbc_g", wbc_g) :
                new ObjectParameter("wbc_g", typeof(string));
    
            var tblnameParameter = tblname != null ?
                new ObjectParameter("tblname", tblname) :
                new ObjectParameter("tblname", typeof(string));
    
            var g_regnoParameter = g_regno.HasValue ?
                new ObjectParameter("G_regno", g_regno) :
                new ObjectParameter("G_regno", typeof(int));
    
            var g_iopdParameter = g_iopd != null ?
                new ObjectParameter("g_iopd", g_iopd) :
                new ObjectParameter("g_iopd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_param", wbc_gParameter, tblnameParameter, g_regnoParameter, g_iopdParameter);
        }
    
        public virtual int SP_InsertAuditTrial(string hCode, string tlcode, string regNo, string iOPD, Nullable<System.DateTime> dateOfRecord, string status, string userName)
        {
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var dateOfRecordParameter = dateOfRecord.HasValue ?
                new ObjectParameter("dateOfRecord", dateOfRecord) :
                new ObjectParameter("dateOfRecord", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertAuditTrial", hCodeParameter, tlcodeParameter, regNoParameter, iOPDParameter, dateOfRecordParameter, statusParameter, userNameParameter);
        }
    
        public virtual int SP_InsertBOMUnitWise(string username, Nullable<int> drugID, Nullable<int> qtyperPack, string unit, Nullable<int> companyid)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var drugIDParameter = drugID.HasValue ?
                new ObjectParameter("DrugID", drugID) :
                new ObjectParameter("DrugID", typeof(int));
    
            var qtyperPackParameter = qtyperPack.HasValue ?
                new ObjectParameter("QtyperPack", qtyperPack) :
                new ObjectParameter("QtyperPack", typeof(int));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBOMUnitWise", usernameParameter, drugIDParameter, qtyperPackParameter, unitParameter, companyidParameter);
        }
    
        public virtual int Sp_InsertContactinformationTLCode(string regNo, string iOPD, string vialID, string tLCode, string hCode, string groupCode, Nullable<System.DateTime> dateOfEntry, Nullable<double> testRate, Nullable<int> c_ID, Nullable<int> companyid, string lab_code)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(double));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertContactinformationTLCode", regNoParameter, iOPDParameter, vialIDParameter, tLCodeParameter, hCodeParameter, groupCodeParameter, dateOfEntryParameter, testRateParameter, c_IDParameter, companyidParameter, lab_codeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_InsertDamageFilm(Nullable<int> id, string username, Nullable<int> drugID, Nullable<int> qty, Nullable<System.DateTime> date, Nullable<int> companyid, string itemDescription, Nullable<int> task, string drugType, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var drugIDParameter = drugID.HasValue ?
                new ObjectParameter("DrugID", drugID) :
                new ObjectParameter("DrugID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            var drugTypeParameter = drugType != null ?
                new ObjectParameter("DrugType", drugType) :
                new ObjectParameter("DrugType", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_InsertDamageFilm", idParameter, usernameParameter, drugIDParameter, qtyParameter, dateParameter, companyidParameter, itemDescriptionParameter, taskParameter, drugTypeParameter, remarkParameter);
        }
    
        public virtual int sp_InsertDelete_BC2800(string regno, string iopd, string testcode, string tlcode, string result, Nullable<System.DateTime> entrydate, Nullable<decimal> testno, string testname, Nullable<decimal> testorderno, string financialYearID, string hcode, Nullable<decimal> companyid, string titlename, Nullable<decimal> pepatid)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var testcodeParameter = testcode != null ?
                new ObjectParameter("testcode", testcode) :
                new ObjectParameter("testcode", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var resultParameter = result != null ?
                new ObjectParameter("result", result) :
                new ObjectParameter("result", typeof(string));
    
            var entrydateParameter = entrydate.HasValue ?
                new ObjectParameter("entrydate", entrydate) :
                new ObjectParameter("entrydate", typeof(System.DateTime));
    
            var testnoParameter = testno.HasValue ?
                new ObjectParameter("testno", testno) :
                new ObjectParameter("testno", typeof(decimal));
    
            var testnameParameter = testname != null ?
                new ObjectParameter("testname", testname) :
                new ObjectParameter("testname", typeof(string));
    
            var testordernoParameter = testorderno.HasValue ?
                new ObjectParameter("testorderno", testorderno) :
                new ObjectParameter("testorderno", typeof(decimal));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("hcode", hcode) :
                new ObjectParameter("hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(decimal));
    
            var titlenameParameter = titlename != null ?
                new ObjectParameter("titlename", titlename) :
                new ObjectParameter("titlename", typeof(string));
    
            var pepatidParameter = pepatid.HasValue ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertDelete_BC2800", regnoParameter, iopdParameter, testcodeParameter, tlcodeParameter, resultParameter, entrydateParameter, testnoParameter, testnameParameter, testordernoParameter, financialYearIDParameter, hcodeParameter, companyidParameter, titlenameParameter, pepatidParameter);
        }
    
        public virtual int sp_InsertDelete_BC2800_04_08_2014(string regno, string iopd, string testcode, string tlcode, string result, Nullable<System.DateTime> entrydate, Nullable<decimal> testno, string testname, Nullable<decimal> testorderno, string financialYearID, string hcode, Nullable<decimal> companyid, string titlename, string pepatid)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var testcodeParameter = testcode != null ?
                new ObjectParameter("testcode", testcode) :
                new ObjectParameter("testcode", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var resultParameter = result != null ?
                new ObjectParameter("result", result) :
                new ObjectParameter("result", typeof(string));
    
            var entrydateParameter = entrydate.HasValue ?
                new ObjectParameter("entrydate", entrydate) :
                new ObjectParameter("entrydate", typeof(System.DateTime));
    
            var testnoParameter = testno.HasValue ?
                new ObjectParameter("testno", testno) :
                new ObjectParameter("testno", typeof(decimal));
    
            var testnameParameter = testname != null ?
                new ObjectParameter("testname", testname) :
                new ObjectParameter("testname", typeof(string));
    
            var testordernoParameter = testorderno.HasValue ?
                new ObjectParameter("testorderno", testorderno) :
                new ObjectParameter("testorderno", typeof(decimal));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("hcode", hcode) :
                new ObjectParameter("hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(decimal));
    
            var titlenameParameter = titlename != null ?
                new ObjectParameter("titlename", titlename) :
                new ObjectParameter("titlename", typeof(string));
    
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertDelete_BC2800_04_08_2014", regnoParameter, iopdParameter, testcodeParameter, tlcodeParameter, resultParameter, entrydateParameter, testnoParameter, testnameParameter, testordernoParameter, financialYearIDParameter, hcodeParameter, companyidParameter, titlenameParameter, pepatidParameter);
        }
    
        public virtual int SP_InsertDirectWorkOrder1(Nullable<System.DateTime> dateOfEntry, string intial, string firstName, string lastName, string sex, Nullable<int> age, string mob_no, string email, string mDY, string refDr, string pateint_addr, string remark, string refCustomer, string clinical_history, Nullable<int> companyid, string username, string usertype, string tests, string regNo, string iOPD, string check_Flag, string technician_Name, string collection_Center, Nullable<bool> flag_CollCenter, Nullable<bool> printFlag, Nullable<System.DateTime> reportdate, Nullable<System.DateTime> exam_date, string report_time, string exam_time, string patientPhoneNo, string patientCity, string patient_addr, Nullable<decimal> pePatID, Nullable<bool> emergencyflag, Nullable<int> xa, Nullable<int> xr, Nullable<int> ec, Nullable<int> mr, Nullable<int> ct, Nullable<int> se, Nullable<int> pt, Nullable<bool> cbcflag, string graph, string dr_Code, string docName, string tech_Code, Nullable<bool> flag_Tech, string coll_Code, string compCode, string compName, string financialYearID, string wbc, string rbc, string plt, string plt1, string coulter, Nullable<double> testCharges, string sampleID, Nullable<decimal> hospitalID, string wardNo, string bedNo, string wDeptNo, string sampleType, string sampleNotes, string pSCRegNo, string sampleStatus, string vialID, string courierDetails, string telNo, Nullable<System.DateTime> registratonDateTime, string pUserName, string pPassword, string testName, string lab_code, string tLCode, string hCode, string groupCode, Nullable<double> testRate, string airBillNo, Nullable<double> dr_amount, Nullable<int> maindeptid, Nullable<decimal> percentagediscount, string codeTes, string vSampleType, string vTestCodes, string vTestNames, string vCodeTes, string ptype)
        {
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var intialParameter = intial != null ?
                new ObjectParameter("intial", intial) :
                new ObjectParameter("intial", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var mob_noParameter = mob_no != null ?
                new ObjectParameter("Mob_no", mob_no) :
                new ObjectParameter("Mob_no", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mDYParameter = mDY != null ?
                new ObjectParameter("MDY", mDY) :
                new ObjectParameter("MDY", typeof(string));
    
            var refDrParameter = refDr != null ?
                new ObjectParameter("RefDr", refDr) :
                new ObjectParameter("RefDr", typeof(string));
    
            var pateint_addrParameter = pateint_addr != null ?
                new ObjectParameter("Pateint_addr", pateint_addr) :
                new ObjectParameter("Pateint_addr", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var refCustomerParameter = refCustomer != null ?
                new ObjectParameter("RefCustomer", refCustomer) :
                new ObjectParameter("RefCustomer", typeof(string));
    
            var clinical_historyParameter = clinical_history != null ?
                new ObjectParameter("clinical_history", clinical_history) :
                new ObjectParameter("clinical_history", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(string));
    
            var testsParameter = tests != null ?
                new ObjectParameter("Tests", tests) :
                new ObjectParameter("Tests", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var technician_NameParameter = technician_Name != null ?
                new ObjectParameter("Technician_Name", technician_Name) :
                new ObjectParameter("Technician_Name", typeof(string));
    
            var collection_CenterParameter = collection_Center != null ?
                new ObjectParameter("Collection_Center", collection_Center) :
                new ObjectParameter("Collection_Center", typeof(string));
    
            var flag_CollCenterParameter = flag_CollCenter.HasValue ?
                new ObjectParameter("Flag_CollCenter", flag_CollCenter) :
                new ObjectParameter("Flag_CollCenter", typeof(bool));
    
            var printFlagParameter = printFlag.HasValue ?
                new ObjectParameter("PrintFlag", printFlag) :
                new ObjectParameter("PrintFlag", typeof(bool));
    
            var reportdateParameter = reportdate.HasValue ?
                new ObjectParameter("Reportdate", reportdate) :
                new ObjectParameter("Reportdate", typeof(System.DateTime));
    
            var exam_dateParameter = exam_date.HasValue ?
                new ObjectParameter("exam_date", exam_date) :
                new ObjectParameter("exam_date", typeof(System.DateTime));
    
            var report_timeParameter = report_time != null ?
                new ObjectParameter("Report_time", report_time) :
                new ObjectParameter("Report_time", typeof(string));
    
            var exam_timeParameter = exam_time != null ?
                new ObjectParameter("exam_time", exam_time) :
                new ObjectParameter("exam_time", typeof(string));
    
            var patientPhoneNoParameter = patientPhoneNo != null ?
                new ObjectParameter("PatientPhoneNo", patientPhoneNo) :
                new ObjectParameter("PatientPhoneNo", typeof(string));
    
            var patientCityParameter = patientCity != null ?
                new ObjectParameter("PatientCity", patientCity) :
                new ObjectParameter("PatientCity", typeof(string));
    
            var patient_addrParameter = patient_addr != null ?
                new ObjectParameter("patient_addr", patient_addr) :
                new ObjectParameter("patient_addr", typeof(string));
    
            var pePatIDParameter = pePatID.HasValue ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(decimal));
    
            var emergencyflagParameter = emergencyflag.HasValue ?
                new ObjectParameter("emergencyflag", emergencyflag) :
                new ObjectParameter("emergencyflag", typeof(bool));
    
            var xaParameter = xa.HasValue ?
                new ObjectParameter("xa", xa) :
                new ObjectParameter("xa", typeof(int));
    
            var xrParameter = xr.HasValue ?
                new ObjectParameter("xr", xr) :
                new ObjectParameter("xr", typeof(int));
    
            var ecParameter = ec.HasValue ?
                new ObjectParameter("ec", ec) :
                new ObjectParameter("ec", typeof(int));
    
            var mrParameter = mr.HasValue ?
                new ObjectParameter("mr", mr) :
                new ObjectParameter("mr", typeof(int));
    
            var ctParameter = ct.HasValue ?
                new ObjectParameter("ct", ct) :
                new ObjectParameter("ct", typeof(int));
    
            var seParameter = se.HasValue ?
                new ObjectParameter("se", se) :
                new ObjectParameter("se", typeof(int));
    
            var ptParameter = pt.HasValue ?
                new ObjectParameter("pt", pt) :
                new ObjectParameter("pt", typeof(int));
    
            var cbcflagParameter = cbcflag.HasValue ?
                new ObjectParameter("cbcflag", cbcflag) :
                new ObjectParameter("cbcflag", typeof(bool));
    
            var graphParameter = graph != null ?
                new ObjectParameter("graph", graph) :
                new ObjectParameter("graph", typeof(string));
    
            var dr_CodeParameter = dr_Code != null ?
                new ObjectParameter("Dr_Code", dr_Code) :
                new ObjectParameter("Dr_Code", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var tech_CodeParameter = tech_Code != null ?
                new ObjectParameter("Tech_Code", tech_Code) :
                new ObjectParameter("Tech_Code", typeof(string));
    
            var flag_TechParameter = flag_Tech.HasValue ?
                new ObjectParameter("Flag_Tech", flag_Tech) :
                new ObjectParameter("Flag_Tech", typeof(bool));
    
            var coll_CodeParameter = coll_Code != null ?
                new ObjectParameter("Coll_Code", coll_Code) :
                new ObjectParameter("Coll_Code", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var wbcParameter = wbc != null ?
                new ObjectParameter("wbc", wbc) :
                new ObjectParameter("wbc", typeof(string));
    
            var rbcParameter = rbc != null ?
                new ObjectParameter("rbc", rbc) :
                new ObjectParameter("rbc", typeof(string));
    
            var pltParameter = plt != null ?
                new ObjectParameter("plt", plt) :
                new ObjectParameter("plt", typeof(string));
    
            var plt1Parameter = plt1 != null ?
                new ObjectParameter("plt1", plt1) :
                new ObjectParameter("plt1", typeof(string));
    
            var coulterParameter = coulter != null ?
                new ObjectParameter("coulter", coulter) :
                new ObjectParameter("coulter", typeof(string));
    
            var testChargesParameter = testCharges.HasValue ?
                new ObjectParameter("TestCharges", testCharges) :
                new ObjectParameter("TestCharges", typeof(double));
    
            var sampleIDParameter = sampleID != null ?
                new ObjectParameter("SampleID", sampleID) :
                new ObjectParameter("SampleID", typeof(string));
    
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(decimal));
    
            var wardNoParameter = wardNo != null ?
                new ObjectParameter("WardNo", wardNo) :
                new ObjectParameter("WardNo", typeof(string));
    
            var bedNoParameter = bedNo != null ?
                new ObjectParameter("BedNo", bedNo) :
                new ObjectParameter("BedNo", typeof(string));
    
            var wDeptNoParameter = wDeptNo != null ?
                new ObjectParameter("WDeptNo", wDeptNo) :
                new ObjectParameter("WDeptNo", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var sampleNotesParameter = sampleNotes != null ?
                new ObjectParameter("SampleNotes", sampleNotes) :
                new ObjectParameter("SampleNotes", typeof(string));
    
            var pSCRegNoParameter = pSCRegNo != null ?
                new ObjectParameter("pSCRegNo", pSCRegNo) :
                new ObjectParameter("pSCRegNo", typeof(string));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var courierDetailsParameter = courierDetails != null ?
                new ObjectParameter("CourierDetails", courierDetails) :
                new ObjectParameter("CourierDetails", typeof(string));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var registratonDateTimeParameter = registratonDateTime.HasValue ?
                new ObjectParameter("RegistratonDateTime", registratonDateTime) :
                new ObjectParameter("RegistratonDateTime", typeof(System.DateTime));
    
            var pUserNameParameter = pUserName != null ?
                new ObjectParameter("PUserName", pUserName) :
                new ObjectParameter("PUserName", typeof(string));
    
            var pPasswordParameter = pPassword != null ?
                new ObjectParameter("PPassword", pPassword) :
                new ObjectParameter("PPassword", typeof(string));
    
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(double));
    
            var airBillNoParameter = airBillNo != null ?
                new ObjectParameter("AirBillNo", airBillNo) :
                new ObjectParameter("AirBillNo", typeof(string));
    
            var dr_amountParameter = dr_amount.HasValue ?
                new ObjectParameter("dr_amount", dr_amount) :
                new ObjectParameter("dr_amount", typeof(double));
    
            var maindeptidParameter = maindeptid.HasValue ?
                new ObjectParameter("maindeptid", maindeptid) :
                new ObjectParameter("maindeptid", typeof(int));
    
            var percentagediscountParameter = percentagediscount.HasValue ?
                new ObjectParameter("percentagediscount", percentagediscount) :
                new ObjectParameter("percentagediscount", typeof(decimal));
    
            var codeTesParameter = codeTes != null ?
                new ObjectParameter("CodeTes", codeTes) :
                new ObjectParameter("CodeTes", typeof(string));
    
            var vSampleTypeParameter = vSampleType != null ?
                new ObjectParameter("VSampleType", vSampleType) :
                new ObjectParameter("VSampleType", typeof(string));
    
            var vTestCodesParameter = vTestCodes != null ?
                new ObjectParameter("VTestCodes", vTestCodes) :
                new ObjectParameter("VTestCodes", typeof(string));
    
            var vTestNamesParameter = vTestNames != null ?
                new ObjectParameter("VTestNames", vTestNames) :
                new ObjectParameter("VTestNames", typeof(string));
    
            var vCodeTesParameter = vCodeTes != null ?
                new ObjectParameter("VCodeTes", vCodeTes) :
                new ObjectParameter("VCodeTes", typeof(string));
    
            var ptypeParameter = ptype != null ?
                new ObjectParameter("ptype", ptype) :
                new ObjectParameter("ptype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertDirectWorkOrder1", dateOfEntryParameter, intialParameter, firstNameParameter, lastNameParameter, sexParameter, ageParameter, mob_noParameter, emailParameter, mDYParameter, refDrParameter, pateint_addrParameter, remarkParameter, refCustomerParameter, clinical_historyParameter, companyidParameter, usernameParameter, usertypeParameter, testsParameter, regNoParameter, iOPDParameter, check_FlagParameter, technician_NameParameter, collection_CenterParameter, flag_CollCenterParameter, printFlagParameter, reportdateParameter, exam_dateParameter, report_timeParameter, exam_timeParameter, patientPhoneNoParameter, patientCityParameter, patient_addrParameter, pePatIDParameter, emergencyflagParameter, xaParameter, xrParameter, ecParameter, mrParameter, ctParameter, seParameter, ptParameter, cbcflagParameter, graphParameter, dr_CodeParameter, docNameParameter, tech_CodeParameter, flag_TechParameter, coll_CodeParameter, compCodeParameter, compNameParameter, financialYearIDParameter, wbcParameter, rbcParameter, pltParameter, plt1Parameter, coulterParameter, testChargesParameter, sampleIDParameter, hospitalIDParameter, wardNoParameter, bedNoParameter, wDeptNoParameter, sampleTypeParameter, sampleNotesParameter, pSCRegNoParameter, sampleStatusParameter, vialIDParameter, courierDetailsParameter, telNoParameter, registratonDateTimeParameter, pUserNameParameter, pPasswordParameter, testNameParameter, lab_codeParameter, tLCodeParameter, hCodeParameter, groupCodeParameter, testRateParameter, airBillNoParameter, dr_amountParameter, maindeptidParameter, percentagediscountParameter, codeTesParameter, vSampleTypeParameter, vTestCodesParameter, vTestNamesParameter, vCodeTesParameter, ptypeParameter);
        }
    
        public virtual int Sp_InsertHistoAccession(string username, Nullable<int> c_Id, Nullable<int> companyid, string maindept, string year)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var c_IdParameter = c_Id.HasValue ?
                new ObjectParameter("C_Id", c_Id) :
                new ObjectParameter("C_Id", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertHistoAccession", usernameParameter, c_IdParameter, companyidParameter, maindeptParameter, yearParameter);
        }
    
        public virtual int SP_InsertImage(string slide1, string slide2, string slide3, byte[] image1, byte[] image2, byte[] image3, string hCFlag, string regno)
        {
            var slide1Parameter = slide1 != null ?
                new ObjectParameter("Slide1", slide1) :
                new ObjectParameter("Slide1", typeof(string));
    
            var slide2Parameter = slide2 != null ?
                new ObjectParameter("Slide2", slide2) :
                new ObjectParameter("Slide2", typeof(string));
    
            var slide3Parameter = slide3 != null ?
                new ObjectParameter("Slide3", slide3) :
                new ObjectParameter("Slide3", typeof(string));
    
            var image1Parameter = image1 != null ?
                new ObjectParameter("Image1", image1) :
                new ObjectParameter("Image1", typeof(byte[]));
    
            var image2Parameter = image2 != null ?
                new ObjectParameter("Image2", image2) :
                new ObjectParameter("Image2", typeof(byte[]));
    
            var image3Parameter = image3 != null ?
                new ObjectParameter("Image3", image3) :
                new ObjectParameter("Image3", typeof(byte[]));
    
            var hCFlagParameter = hCFlag != null ?
                new ObjectParameter("HCFlag", hCFlag) :
                new ObjectParameter("HCFlag", typeof(string));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertImage", slide1Parameter, slide2Parameter, slide3Parameter, image1Parameter, image2Parameter, image3Parameter, hCFlagParameter, regnoParameter);
        }
    
        public virtual int Sp_InsertMachine(string machinename, Nullable<int> companyid)
        {
            var machinenameParameter = machinename != null ?
                new ObjectParameter("machinename", machinename) :
                new ObjectParameter("machinename", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertMachine", machinenameParameter, companyidParameter);
        }
    
        public virtual int Sp_InsertPrintStatus(string regno, string iopd, string hcode, string tlcode, Nullable<bool> printstatus, string testCode, string reason, Nullable<System.DateTime> dateofentry, Nullable<bool> teststatus, Nullable<int> testorderno, Nullable<int> pePatID, string status, string registerUser, string groupCode, Nullable<int> companyid)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("hcode", hcode) :
                new ObjectParameter("hcode", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var printstatusParameter = printstatus.HasValue ?
                new ObjectParameter("printstatus", printstatus) :
                new ObjectParameter("printstatus", typeof(bool));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var dateofentryParameter = dateofentry.HasValue ?
                new ObjectParameter("dateofentry", dateofentry) :
                new ObjectParameter("dateofentry", typeof(System.DateTime));
    
            var teststatusParameter = teststatus.HasValue ?
                new ObjectParameter("teststatus", teststatus) :
                new ObjectParameter("teststatus", typeof(bool));
    
            var testordernoParameter = testorderno.HasValue ?
                new ObjectParameter("testorderno", testorderno) :
                new ObjectParameter("testorderno", typeof(int));
    
            var pePatIDParameter = pePatID.HasValue ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertPrintStatus", regnoParameter, iopdParameter, hcodeParameter, tlcodeParameter, printstatusParameter, testCodeParameter, reasonParameter, dateofentryParameter, teststatusParameter, testordernoParameter, pePatIDParameter, statusParameter, registerUserParameter, groupCodeParameter, companyidParameter);
        }
    
        public virtual int Sp_InsertPrintstatusNew(string vialID, string registerUser, Nullable<int> c_Id, Nullable<int> companyid, string maindept)
        {
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            var c_IdParameter = c_Id.HasValue ?
                new ObjectParameter("C_Id", c_Id) :
                new ObjectParameter("C_Id", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertPrintstatusNew", vialIDParameter, registerUserParameter, c_IdParameter, companyidParameter, maindeptParameter);
        }
    
        public virtual int Sp_InsertPrintstatusSamplecollect(string vialID, string registerUser, Nullable<int> c_Id, Nullable<int> companyid, string maindept)
        {
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            var c_IdParameter = c_Id.HasValue ?
                new ObjectParameter("C_Id", c_Id) :
                new ObjectParameter("C_Id", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertPrintstatusSamplecollect", vialIDParameter, registerUserParameter, c_IdParameter, companyidParameter, maindeptParameter);
        }
    
        public virtual int Sp_InsertSOP(string specialNote, Nullable<decimal> companyid, string username, string title, string tLCode, string hCode, string heading, string flag)
        {
            var specialNoteParameter = specialNote != null ?
                new ObjectParameter("SpecialNote", specialNote) :
                new ObjectParameter("SpecialNote", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(decimal));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var headingParameter = heading != null ?
                new ObjectParameter("Heading", heading) :
                new ObjectParameter("Heading", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertSOP", specialNoteParameter, companyidParameter, usernameParameter, titleParameter, tLCodeParameter, hCodeParameter, headingParameter, flagParameter);
        }
    
        public virtual int SP_InsertToAuditTrial(string regno, string iopd, string tlCode, string testCode, string status, string remarks, Nullable<System.DateTime> dateOfRecord, string userName, string testResults, Nullable<int> companyid, Nullable<int> c_ID)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var dateOfRecordParameter = dateOfRecord.HasValue ?
                new ObjectParameter("dateOfRecord", dateOfRecord) :
                new ObjectParameter("dateOfRecord", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var testResultsParameter = testResults != null ?
                new ObjectParameter("TestResults", testResults) :
                new ObjectParameter("TestResults", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertToAuditTrial", regnoParameter, iopdParameter, tlCodeParameter, testCodeParameter, statusParameter, remarksParameter, dateOfRecordParameter, userNameParameter, testResultsParameter, companyidParameter, c_IDParameter);
        }
    
        public virtual int SP_InsertUpdateBOM(Nullable<int> bom_Mid, string tLCode, Nullable<double> totalQty, Nullable<int> action, Nullable<System.DateTime> bOMDate, Nullable<int> deptid)
        {
            var bom_MidParameter = bom_Mid.HasValue ?
                new ObjectParameter("Bom_Mid", bom_Mid) :
                new ObjectParameter("Bom_Mid", typeof(int));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(double));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var bOMDateParameter = bOMDate.HasValue ?
                new ObjectParameter("BOMDate", bOMDate) :
                new ObjectParameter("BOMDate", typeof(System.DateTime));
    
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("deptid", deptid) :
                new ObjectParameter("deptid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateBOM", bom_MidParameter, tLCodeParameter, totalQtyParameter, actionParameter, bOMDateParameter, deptidParameter);
        }
    
        public virtual int SP_InsertUpdateBOMDetails(Nullable<int> action, Nullable<int> bom_Did, Nullable<int> bom_Mid, string item_Description, string batchNo, Nullable<double> qty, Nullable<double> costPrice, Nullable<int> drugId, Nullable<int> companyid)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var bom_DidParameter = bom_Did.HasValue ?
                new ObjectParameter("Bom_Did", bom_Did) :
                new ObjectParameter("Bom_Did", typeof(int));
    
            var bom_MidParameter = bom_Mid.HasValue ?
                new ObjectParameter("Bom_Mid", bom_Mid) :
                new ObjectParameter("Bom_Mid", typeof(int));
    
            var item_DescriptionParameter = item_Description != null ?
                new ObjectParameter("Item_Description", item_Description) :
                new ObjectParameter("Item_Description", typeof(string));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(double));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(double));
    
            var drugIdParameter = drugId.HasValue ?
                new ObjectParameter("DrugId", drugId) :
                new ObjectParameter("DrugId", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateBOMDetails", actionParameter, bom_DidParameter, bom_MidParameter, item_DescriptionParameter, batchNoParameter, qtyParameter, costPriceParameter, drugIdParameter, companyidParameter);
        }
    
        public virtual int SP_InsertUpdateBOMEntry(string tLCode, Nullable<int> bom_Mid, Nullable<double> totalQty, Nullable<int> action, Nullable<System.DateTime> bOMDate, Nullable<int> deptid, Nullable<int> companyid)
        {
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var bom_MidParameter = bom_Mid.HasValue ?
                new ObjectParameter("Bom_Mid", bom_Mid) :
                new ObjectParameter("Bom_Mid", typeof(int));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(double));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var bOMDateParameter = bOMDate.HasValue ?
                new ObjectParameter("BOMDate", bOMDate) :
                new ObjectParameter("BOMDate", typeof(System.DateTime));
    
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("deptid", deptid) :
                new ObjectParameter("deptid", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateBOMEntry", tLCodeParameter, bom_MidParameter, totalQtyParameter, actionParameter, bOMDateParameter, deptidParameter, companyidParameter);
        }
    
        public virtual int SP_InsertUpdateDefaultResult(Nullable<int> action, string testcode, string result, string name, string prevName, Nullable<int> number, Nullable<bool> defaultFlag, Nullable<int> companyid)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var testcodeParameter = testcode != null ?
                new ObjectParameter("Testcode", testcode) :
                new ObjectParameter("Testcode", typeof(string));
    
            var resultParameter = result != null ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var prevNameParameter = prevName != null ?
                new ObjectParameter("PrevName", prevName) :
                new ObjectParameter("PrevName", typeof(string));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var defaultFlagParameter = defaultFlag.HasValue ?
                new ObjectParameter("DefaultFlag", defaultFlag) :
                new ObjectParameter("DefaultFlag", typeof(bool));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDefaultResult", actionParameter, testcodeParameter, resultParameter, nameParameter, prevNameParameter, numberParameter, defaultFlagParameter, companyidParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteDepartment(Nullable<int> action, string heading, string hcode, string flag, string specialnote, Nullable<System.DateTime> dateofentry, Nullable<int> horderno, string remark, Nullable<bool> changeflag, Nullable<bool> addflag, Nullable<int> companyid, string mainDept, Nullable<int> compid, string username, string modality, Nullable<int> deptID, string tempHcode, Nullable<bool> profileFlag)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var headingParameter = heading != null ?
                new ObjectParameter("heading", heading) :
                new ObjectParameter("heading", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("hcode", hcode) :
                new ObjectParameter("hcode", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var specialnoteParameter = specialnote != null ?
                new ObjectParameter("specialnote", specialnote) :
                new ObjectParameter("specialnote", typeof(string));
    
            var dateofentryParameter = dateofentry.HasValue ?
                new ObjectParameter("dateofentry", dateofentry) :
                new ObjectParameter("dateofentry", typeof(System.DateTime));
    
            var hordernoParameter = horderno.HasValue ?
                new ObjectParameter("horderno", horderno) :
                new ObjectParameter("horderno", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var changeflagParameter = changeflag.HasValue ?
                new ObjectParameter("changeflag", changeflag) :
                new ObjectParameter("changeflag", typeof(bool));
    
            var addflagParameter = addflag.HasValue ?
                new ObjectParameter("addflag", addflag) :
                new ObjectParameter("addflag", typeof(bool));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var modalityParameter = modality != null ?
                new ObjectParameter("modality", modality) :
                new ObjectParameter("modality", typeof(string));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            var tempHcodeParameter = tempHcode != null ?
                new ObjectParameter("TempHcode", tempHcode) :
                new ObjectParameter("TempHcode", typeof(string));
    
            var profileFlagParameter = profileFlag.HasValue ?
                new ObjectParameter("ProfileFlag", profileFlag) :
                new ObjectParameter("ProfileFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteDepartment", actionParameter, headingParameter, hcodeParameter, flagParameter, specialnoteParameter, dateofentryParameter, hordernoParameter, remarkParameter, changeflagParameter, addflagParameter, companyidParameter, mainDeptParameter, compidParameter, usernameParameter, modalityParameter, deptIDParameter, tempHcodeParameter, profileFlagParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteDepartment_MASM(Nullable<int> action, string heading, string hcode, string flag, string specialnote, Nullable<System.DateTime> dateofentry, Nullable<int> horderno, string remark, Nullable<bool> changeflag, Nullable<bool> addflag, Nullable<int> companyid, string mainDept, Nullable<int> compid, string username, string modality, Nullable<int> deptID)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var headingParameter = heading != null ?
                new ObjectParameter("heading", heading) :
                new ObjectParameter("heading", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("hcode", hcode) :
                new ObjectParameter("hcode", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var specialnoteParameter = specialnote != null ?
                new ObjectParameter("specialnote", specialnote) :
                new ObjectParameter("specialnote", typeof(string));
    
            var dateofentryParameter = dateofentry.HasValue ?
                new ObjectParameter("dateofentry", dateofentry) :
                new ObjectParameter("dateofentry", typeof(System.DateTime));
    
            var hordernoParameter = horderno.HasValue ?
                new ObjectParameter("horderno", horderno) :
                new ObjectParameter("horderno", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var changeflagParameter = changeflag.HasValue ?
                new ObjectParameter("changeflag", changeflag) :
                new ObjectParameter("changeflag", typeof(bool));
    
            var addflagParameter = addflag.HasValue ?
                new ObjectParameter("addflag", addflag) :
                new ObjectParameter("addflag", typeof(bool));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var modalityParameter = modality != null ?
                new ObjectParameter("modality", modality) :
                new ObjectParameter("modality", typeof(string));
    
            var deptIDParameter = deptID.HasValue ?
                new ObjectParameter("DeptID", deptID) :
                new ObjectParameter("DeptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteDepartment_MASM", actionParameter, headingParameter, hcodeParameter, flagParameter, specialnoteParameter, dateofentryParameter, hordernoParameter, remarkParameter, changeflagParameter, addflagParameter, companyidParameter, mainDeptParameter, compidParameter, usernameParameter, modalityParameter, deptIDParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteFormula(Nullable<int> action, Nullable<int> iD, string testcode, string exp, string testname, string expdesc, string codes, Nullable<float> value1, Nullable<bool> check1, string hcode, Nullable<int> companyid, string username)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var testcodeParameter = testcode != null ?
                new ObjectParameter("testcode", testcode) :
                new ObjectParameter("testcode", typeof(string));
    
            var expParameter = exp != null ?
                new ObjectParameter("exp", exp) :
                new ObjectParameter("exp", typeof(string));
    
            var testnameParameter = testname != null ?
                new ObjectParameter("testname", testname) :
                new ObjectParameter("testname", typeof(string));
    
            var expdescParameter = expdesc != null ?
                new ObjectParameter("expdesc", expdesc) :
                new ObjectParameter("expdesc", typeof(string));
    
            var codesParameter = codes != null ?
                new ObjectParameter("codes", codes) :
                new ObjectParameter("codes", typeof(string));
    
            var value1Parameter = value1.HasValue ?
                new ObjectParameter("value1", value1) :
                new ObjectParameter("value1", typeof(float));
    
            var check1Parameter = check1.HasValue ?
                new ObjectParameter("check1", check1) :
                new ObjectParameter("check1", typeof(bool));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("hcode", hcode) :
                new ObjectParameter("hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteFormula", actionParameter, iDParameter, testcodeParameter, expParameter, testnameParameter, expdescParameter, codesParameter, value1Parameter, check1Parameter, hcodeParameter, companyidParameter, usernameParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteNormalvalue(Nullable<int> action, Nullable<int> normalID, Nullable<int> greaterThanDays, Nullable<int> lessThanDays, string sex, string upperRange, string lowerRange, string paramPrintHead, string paramUnit, string paramConvNormal, string tlcode, string testCode, Nullable<int> companyid, string username)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var normalIDParameter = normalID.HasValue ?
                new ObjectParameter("NormalID", normalID) :
                new ObjectParameter("NormalID", typeof(int));
    
            var greaterThanDaysParameter = greaterThanDays.HasValue ?
                new ObjectParameter("GreaterThanDays", greaterThanDays) :
                new ObjectParameter("GreaterThanDays", typeof(int));
    
            var lessThanDaysParameter = lessThanDays.HasValue ?
                new ObjectParameter("LessThanDays", lessThanDays) :
                new ObjectParameter("LessThanDays", typeof(int));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var upperRangeParameter = upperRange != null ?
                new ObjectParameter("UpperRange", upperRange) :
                new ObjectParameter("UpperRange", typeof(string));
    
            var lowerRangeParameter = lowerRange != null ?
                new ObjectParameter("LowerRange", lowerRange) :
                new ObjectParameter("LowerRange", typeof(string));
    
            var paramPrintHeadParameter = paramPrintHead != null ?
                new ObjectParameter("ParamPrintHead", paramPrintHead) :
                new ObjectParameter("ParamPrintHead", typeof(string));
    
            var paramUnitParameter = paramUnit != null ?
                new ObjectParameter("ParamUnit", paramUnit) :
                new ObjectParameter("ParamUnit", typeof(string));
    
            var paramConvNormalParameter = paramConvNormal != null ?
                new ObjectParameter("ParamConvNormal", paramConvNormal) :
                new ObjectParameter("ParamConvNormal", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteNormalvalue", actionParameter, normalIDParameter, greaterThanDaysParameter, lessThanDaysParameter, sexParameter, upperRangeParameter, lowerRangeParameter, paramPrintHeadParameter, paramUnitParameter, paramConvNormalParameter, tlcodeParameter, testCodeParameter, companyidParameter, usernameParameter);
        }
    
        public virtual int SP_InsertUpdateDeletePanicvalue(Nullable<int> action, Nullable<int> normalID, Nullable<int> greaterThanDays, Nullable<int> lessThanDays, string sex, string upperRange, string lowerRange, string paramPrintHead, string paramUnit, string paramConvNormal, string tlcode, string testCode, Nullable<int> companyid, string username)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var normalIDParameter = normalID.HasValue ?
                new ObjectParameter("NormalID", normalID) :
                new ObjectParameter("NormalID", typeof(int));
    
            var greaterThanDaysParameter = greaterThanDays.HasValue ?
                new ObjectParameter("GreaterThanDays", greaterThanDays) :
                new ObjectParameter("GreaterThanDays", typeof(int));
    
            var lessThanDaysParameter = lessThanDays.HasValue ?
                new ObjectParameter("LessThanDays", lessThanDays) :
                new ObjectParameter("LessThanDays", typeof(int));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var upperRangeParameter = upperRange != null ?
                new ObjectParameter("UpperRange", upperRange) :
                new ObjectParameter("UpperRange", typeof(string));
    
            var lowerRangeParameter = lowerRange != null ?
                new ObjectParameter("LowerRange", lowerRange) :
                new ObjectParameter("LowerRange", typeof(string));
    
            var paramPrintHeadParameter = paramPrintHead != null ?
                new ObjectParameter("ParamPrintHead", paramPrintHead) :
                new ObjectParameter("ParamPrintHead", typeof(string));
    
            var paramUnitParameter = paramUnit != null ?
                new ObjectParameter("ParamUnit", paramUnit) :
                new ObjectParameter("ParamUnit", typeof(string));
    
            var paramConvNormalParameter = paramConvNormal != null ?
                new ObjectParameter("ParamConvNormal", paramConvNormal) :
                new ObjectParameter("ParamConvNormal", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeletePanicvalue", actionParameter, normalIDParameter, greaterThanDaysParameter, lessThanDaysParameter, sexParameter, upperRangeParameter, lowerRangeParameter, paramPrintHeadParameter, paramUnitParameter, paramConvNormalParameter, tlcodeParameter, testCodeParameter, companyidParameter, usernameParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteProfileTest(Nullable<int> action, string groupCode, string groupCodePrev, string groupName, Nullable<int> groupRateAmount, Nullable<int> companyid, Nullable<int> deptid, string flag, Nullable<System.DateTime> dateofEntry, string method, string profileDeptCode)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var groupCodePrevParameter = groupCodePrev != null ?
                new ObjectParameter("GroupCodePrev", groupCodePrev) :
                new ObjectParameter("GroupCodePrev", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var groupRateAmountParameter = groupRateAmount.HasValue ?
                new ObjectParameter("GroupRateAmount", groupRateAmount) :
                new ObjectParameter("GroupRateAmount", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("Deptid", deptid) :
                new ObjectParameter("Deptid", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var dateofEntryParameter = dateofEntry.HasValue ?
                new ObjectParameter("DateofEntry", dateofEntry) :
                new ObjectParameter("DateofEntry", typeof(System.DateTime));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var profileDeptCodeParameter = profileDeptCode != null ?
                new ObjectParameter("ProfileDeptCode", profileDeptCode) :
                new ObjectParameter("ProfileDeptCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteProfileTest", actionParameter, groupCodeParameter, groupCodePrevParameter, groupNameParameter, groupRateAmountParameter, companyidParameter, deptidParameter, flagParameter, dateofEntryParameter, methodParameter, profileDeptCodeParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteReason(Nullable<int> action, Nullable<int> reasonid, string reason, Nullable<int> companyid)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var reasonidParameter = reasonid.HasValue ?
                new ObjectParameter("Reasonid", reasonid) :
                new ObjectParameter("Reasonid", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteReason", actionParameter, reasonidParameter, reasonParameter, companyidParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteSample(Nullable<int> action, Nullable<int> sampleid, string sampletype, Nullable<int> companyid, string username)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var sampleidParameter = sampleid.HasValue ?
                new ObjectParameter("sampleid", sampleid) :
                new ObjectParameter("sampleid", typeof(int));
    
            var sampletypeParameter = sampletype != null ?
                new ObjectParameter("Sampletype", sampletype) :
                new ObjectParameter("Sampletype", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteSample", actionParameter, sampleidParameter, sampletypeParameter, companyidParameter, usernameParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteShortform(Nullable<int> action, Nullable<int> shortFormID, string shortform, string description, string testname, Nullable<int> companyid, string username)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var shortFormIDParameter = shortFormID.HasValue ?
                new ObjectParameter("ShortFormID", shortFormID) :
                new ObjectParameter("ShortFormID", typeof(int));
    
            var shortformParameter = shortform != null ?
                new ObjectParameter("shortform", shortform) :
                new ObjectParameter("shortform", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var testnameParameter = testname != null ?
                new ObjectParameter("testname", testname) :
                new ObjectParameter("testname", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteShortform", actionParameter, shortFormIDParameter, shortformParameter, descriptionParameter, testnameParameter, companyidParameter, usernameParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteSpecialNote(Nullable<int> action, string name, string specialNote, Nullable<bool> sNFlag, string tlcode, Nullable<int> companyid)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var specialNoteParameter = specialNote != null ?
                new ObjectParameter("SpecialNote", specialNote) :
                new ObjectParameter("SpecialNote", typeof(string));
    
            var sNFlagParameter = sNFlag.HasValue ?
                new ObjectParameter("SNFlag", sNFlag) :
                new ObjectParameter("SNFlag", typeof(bool));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteSpecialNote", actionParameter, nameParameter, specialNoteParameter, sNFlagParameter, tlcodeParameter, companyidParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteTest(Nullable<int> action, Nullable<int> testID, string testName, string testCode, string normalValueNew, string nornalValueGeneral, Nullable<int> testRate, string tLCode, string hCode, string textMemo, Nullable<System.DateTime> dateofentry, Nullable<int> oRDNO, Nullable<int> colmn, string groupsForFormat, string defaultResult, string testResult_memo, string defaultTestMethod, string testMethod, Nullable<bool> change_Flag, Nullable<bool> add_flag, string settestresult, Nullable<bool> numericFlag, string defaultResultList, string machineName, string scode, Nullable<int> companyid, Nullable<int> mcode, string testname_machine)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var testIDParameter = testID.HasValue ?
                new ObjectParameter("TestID", testID) :
                new ObjectParameter("TestID", typeof(int));
    
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var normalValueNewParameter = normalValueNew != null ?
                new ObjectParameter("NormalValueNew", normalValueNew) :
                new ObjectParameter("NormalValueNew", typeof(string));
    
            var nornalValueGeneralParameter = nornalValueGeneral != null ?
                new ObjectParameter("NornalValueGeneral", nornalValueGeneral) :
                new ObjectParameter("NornalValueGeneral", typeof(string));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(int));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var textMemoParameter = textMemo != null ?
                new ObjectParameter("TextMemo", textMemo) :
                new ObjectParameter("TextMemo", typeof(string));
    
            var dateofentryParameter = dateofentry.HasValue ?
                new ObjectParameter("Dateofentry", dateofentry) :
                new ObjectParameter("Dateofentry", typeof(System.DateTime));
    
            var oRDNOParameter = oRDNO.HasValue ?
                new ObjectParameter("ORDNO", oRDNO) :
                new ObjectParameter("ORDNO", typeof(int));
    
            var colmnParameter = colmn.HasValue ?
                new ObjectParameter("colmn", colmn) :
                new ObjectParameter("colmn", typeof(int));
    
            var groupsForFormatParameter = groupsForFormat != null ?
                new ObjectParameter("GroupsForFormat", groupsForFormat) :
                new ObjectParameter("GroupsForFormat", typeof(string));
    
            var defaultResultParameter = defaultResult != null ?
                new ObjectParameter("DefaultResult", defaultResult) :
                new ObjectParameter("DefaultResult", typeof(string));
    
            var testResult_memoParameter = testResult_memo != null ?
                new ObjectParameter("TestResult_memo", testResult_memo) :
                new ObjectParameter("TestResult_memo", typeof(string));
    
            var defaultTestMethodParameter = defaultTestMethod != null ?
                new ObjectParameter("DefaultTestMethod", defaultTestMethod) :
                new ObjectParameter("DefaultTestMethod", typeof(string));
    
            var testMethodParameter = testMethod != null ?
                new ObjectParameter("TestMethod", testMethod) :
                new ObjectParameter("TestMethod", typeof(string));
    
            var change_FlagParameter = change_Flag.HasValue ?
                new ObjectParameter("Change_Flag", change_Flag) :
                new ObjectParameter("Change_Flag", typeof(bool));
    
            var add_flagParameter = add_flag.HasValue ?
                new ObjectParameter("add_flag", add_flag) :
                new ObjectParameter("add_flag", typeof(bool));
    
            var settestresultParameter = settestresult != null ?
                new ObjectParameter("settestresult", settestresult) :
                new ObjectParameter("settestresult", typeof(string));
    
            var numericFlagParameter = numericFlag.HasValue ?
                new ObjectParameter("NumericFlag", numericFlag) :
                new ObjectParameter("NumericFlag", typeof(bool));
    
            var defaultResultListParameter = defaultResultList != null ?
                new ObjectParameter("DefaultResultList", defaultResultList) :
                new ObjectParameter("DefaultResultList", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var scodeParameter = scode != null ?
                new ObjectParameter("scode", scode) :
                new ObjectParameter("scode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mcodeParameter = mcode.HasValue ?
                new ObjectParameter("mcode", mcode) :
                new ObjectParameter("mcode", typeof(int));
    
            var testname_machineParameter = testname_machine != null ?
                new ObjectParameter("testname_machine", testname_machine) :
                new ObjectParameter("testname_machine", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteTest", actionParameter, testIDParameter, testNameParameter, testCodeParameter, normalValueNewParameter, nornalValueGeneralParameter, testRateParameter, tLCodeParameter, hCodeParameter, textMemoParameter, dateofentryParameter, oRDNOParameter, colmnParameter, groupsForFormatParameter, defaultResultParameter, testResult_memoParameter, defaultTestMethodParameter, testMethodParameter, change_FlagParameter, add_flagParameter, settestresultParameter, numericFlagParameter, defaultResultListParameter, machineNameParameter, scodeParameter, companyidParameter, mcodeParameter, testname_machineParameter);
        }
    
        public virtual int SP_InsertUpdateDeleteTitle(Nullable<int> action, Nullable<int> titleid, string title, string tlcode, string hcode, string singleFormat, Nullable<float> testrate, string defaultResultList, string defaultResult, string normalValueNew, string textMemo, string testResult, string defaultTestMethod, string testMethod_temp, Nullable<System.DateTime> dateofentry, Nullable<int> ordno, Nullable<bool> change_Flag, Nullable<bool> add_Flag, Nullable<bool> numericFlag, Nullable<bool> cFlag, string sampletype, string machinename, Nullable<int> graphFlag, Nullable<int> companyid, Nullable<bool> tResultFlag, string username, string preparationTime, string specificInstruction, string hCPCSCode, string cPTCode, string cghscode, string scode, string sex, Nullable<int> mcode, string testname_machine, string hMSDB, Nullable<int> isHide, Nullable<int> iSGlocusePP)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var titleidParameter = titleid.HasValue ?
                new ObjectParameter("titleid", titleid) :
                new ObjectParameter("titleid", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("hcode", hcode) :
                new ObjectParameter("hcode", typeof(string));
    
            var singleFormatParameter = singleFormat != null ?
                new ObjectParameter("SingleFormat", singleFormat) :
                new ObjectParameter("SingleFormat", typeof(string));
    
            var testrateParameter = testrate.HasValue ?
                new ObjectParameter("testrate", testrate) :
                new ObjectParameter("testrate", typeof(float));
    
            var defaultResultListParameter = defaultResultList != null ?
                new ObjectParameter("DefaultResultList", defaultResultList) :
                new ObjectParameter("DefaultResultList", typeof(string));
    
            var defaultResultParameter = defaultResult != null ?
                new ObjectParameter("DefaultResult", defaultResult) :
                new ObjectParameter("DefaultResult", typeof(string));
    
            var normalValueNewParameter = normalValueNew != null ?
                new ObjectParameter("NormalValueNew", normalValueNew) :
                new ObjectParameter("NormalValueNew", typeof(string));
    
            var textMemoParameter = textMemo != null ?
                new ObjectParameter("TextMemo", textMemo) :
                new ObjectParameter("TextMemo", typeof(string));
    
            var testResultParameter = testResult != null ?
                new ObjectParameter("TestResult", testResult) :
                new ObjectParameter("TestResult", typeof(string));
    
            var defaultTestMethodParameter = defaultTestMethod != null ?
                new ObjectParameter("DefaultTestMethod", defaultTestMethod) :
                new ObjectParameter("DefaultTestMethod", typeof(string));
    
            var testMethod_tempParameter = testMethod_temp != null ?
                new ObjectParameter("TestMethod_temp", testMethod_temp) :
                new ObjectParameter("TestMethod_temp", typeof(string));
    
            var dateofentryParameter = dateofentry.HasValue ?
                new ObjectParameter("dateofentry", dateofentry) :
                new ObjectParameter("dateofentry", typeof(System.DateTime));
    
            var ordnoParameter = ordno.HasValue ?
                new ObjectParameter("ordno", ordno) :
                new ObjectParameter("ordno", typeof(int));
    
            var change_FlagParameter = change_Flag.HasValue ?
                new ObjectParameter("Change_Flag", change_Flag) :
                new ObjectParameter("Change_Flag", typeof(bool));
    
            var add_FlagParameter = add_Flag.HasValue ?
                new ObjectParameter("add_Flag", add_Flag) :
                new ObjectParameter("add_Flag", typeof(bool));
    
            var numericFlagParameter = numericFlag.HasValue ?
                new ObjectParameter("NumericFlag", numericFlag) :
                new ObjectParameter("NumericFlag", typeof(bool));
    
            var cFlagParameter = cFlag.HasValue ?
                new ObjectParameter("CFlag", cFlag) :
                new ObjectParameter("CFlag", typeof(bool));
    
            var sampletypeParameter = sampletype != null ?
                new ObjectParameter("sampletype", sampletype) :
                new ObjectParameter("sampletype", typeof(string));
    
            var machinenameParameter = machinename != null ?
                new ObjectParameter("machinename", machinename) :
                new ObjectParameter("machinename", typeof(string));
    
            var graphFlagParameter = graphFlag.HasValue ?
                new ObjectParameter("GraphFlag", graphFlag) :
                new ObjectParameter("GraphFlag", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var tResultFlagParameter = tResultFlag.HasValue ?
                new ObjectParameter("TResultFlag", tResultFlag) :
                new ObjectParameter("TResultFlag", typeof(bool));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var preparationTimeParameter = preparationTime != null ?
                new ObjectParameter("PreparationTime", preparationTime) :
                new ObjectParameter("PreparationTime", typeof(string));
    
            var specificInstructionParameter = specificInstruction != null ?
                new ObjectParameter("SpecificInstruction", specificInstruction) :
                new ObjectParameter("SpecificInstruction", typeof(string));
    
            var hCPCSCodeParameter = hCPCSCode != null ?
                new ObjectParameter("HCPCSCode", hCPCSCode) :
                new ObjectParameter("HCPCSCode", typeof(string));
    
            var cPTCodeParameter = cPTCode != null ?
                new ObjectParameter("CPTCode", cPTCode) :
                new ObjectParameter("CPTCode", typeof(string));
    
            var cghscodeParameter = cghscode != null ?
                new ObjectParameter("cghscode", cghscode) :
                new ObjectParameter("cghscode", typeof(string));
    
            var scodeParameter = scode != null ?
                new ObjectParameter("scode", scode) :
                new ObjectParameter("scode", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var mcodeParameter = mcode.HasValue ?
                new ObjectParameter("mcode", mcode) :
                new ObjectParameter("mcode", typeof(int));
    
            var testname_machineParameter = testname_machine != null ?
                new ObjectParameter("testname_machine", testname_machine) :
                new ObjectParameter("testname_machine", typeof(string));
    
            var hMSDBParameter = hMSDB != null ?
                new ObjectParameter("HMSDB", hMSDB) :
                new ObjectParameter("HMSDB", typeof(string));
    
            var isHideParameter = isHide.HasValue ?
                new ObjectParameter("IsHide", isHide) :
                new ObjectParameter("IsHide", typeof(int));
    
            var iSGlocusePPParameter = iSGlocusePP.HasValue ?
                new ObjectParameter("ISGlocusePP", iSGlocusePP) :
                new ObjectParameter("ISGlocusePP", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateDeleteTitle", actionParameter, titleidParameter, titleParameter, tlcodeParameter, hcodeParameter, singleFormatParameter, testrateParameter, defaultResultListParameter, defaultResultParameter, normalValueNewParameter, textMemoParameter, testResultParameter, defaultTestMethodParameter, testMethod_tempParameter, dateofentryParameter, ordnoParameter, change_FlagParameter, add_FlagParameter, numericFlagParameter, cFlagParameter, sampletypeParameter, machinenameParameter, graphFlagParameter, companyidParameter, tResultFlagParameter, usernameParameter, preparationTimeParameter, specificInstructionParameter, hCPCSCodeParameter, cPTCodeParameter, cghscodeParameter, scodeParameter, sexParameter, mcodeParameter, testname_machineParameter, hMSDBParameter, isHideParameter, iSGlocusePPParameter);
        }
    
        public virtual int Sp_InsertUpdateFormat(string testcode, string result, string name, Nullable<int> number, Nullable<bool> defaultFlag, Nullable<int> companyid)
        {
            var testcodeParameter = testcode != null ?
                new ObjectParameter("Testcode", testcode) :
                new ObjectParameter("Testcode", typeof(string));
    
            var resultParameter = result != null ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var defaultFlagParameter = defaultFlag.HasValue ?
                new ObjectParameter("DefaultFlag", defaultFlag) :
                new ObjectParameter("DefaultFlag", typeof(bool));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateFormat", testcodeParameter, resultParameter, nameParameter, numberParameter, defaultFlagParameter, companyidParameter);
        }
    
        public virtual int sp_InsertUpdateGroupMaster_Lab(string groupCode, string groupName, string method, Nullable<System.DateTime> dateofEntry, Nullable<int> companyid, Nullable<decimal> groupRateAmount, Nullable<int> packId, Nullable<double> groupRateAmountNew, string subbpid, string particularDetails, string hcode)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var dateofEntryParameter = dateofEntry.HasValue ?
                new ObjectParameter("DateofEntry", dateofEntry) :
                new ObjectParameter("DateofEntry", typeof(System.DateTime));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var groupRateAmountParameter = groupRateAmount.HasValue ?
                new ObjectParameter("GroupRateAmount", groupRateAmount) :
                new ObjectParameter("GroupRateAmount", typeof(decimal));
    
            var packIdParameter = packId.HasValue ?
                new ObjectParameter("packId", packId) :
                new ObjectParameter("packId", typeof(int));
    
            var groupRateAmountNewParameter = groupRateAmountNew.HasValue ?
                new ObjectParameter("GroupRateAmountNew", groupRateAmountNew) :
                new ObjectParameter("GroupRateAmountNew", typeof(double));
    
            var subbpidParameter = subbpid != null ?
                new ObjectParameter("subbpid", subbpid) :
                new ObjectParameter("subbpid", typeof(string));
    
            var particularDetailsParameter = particularDetails != null ?
                new ObjectParameter("ParticularDetails", particularDetails) :
                new ObjectParameter("ParticularDetails", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("Hcode", hcode) :
                new ObjectParameter("Hcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateGroupMaster_Lab", groupCodeParameter, groupNameParameter, methodParameter, dateofEntryParameter, companyidParameter, groupRateAmountParameter, packIdParameter, groupRateAmountNewParameter, subbpidParameter, particularDetailsParameter, hcodeParameter);
        }
    
        public virtual int sp_Insertupdatehisto(string tlcode, string title, string organ, string specimen, string clinical, string grossexamination, string impression, string microscopic, string descrip, string title_rep, string reportNo, string iOPD, string regId, string diaglcode, string diagllcode, string diaglllcode, string diagvcode, Nullable<decimal> companyID, string slide, string remark, Nullable<bool> gross_flag, Nullable<bool> imp_flag, Nullable<bool> micro_flag, Nullable<bool> advise_flag, Nullable<bool> revised_flag, Nullable<bool> remark_flag, string hCFlag, string pePatID, string regNo, string specimenAdequacy, string advice, string revised, Nullable<System.DateTime> dateOfReceipt, string genCat, Nullable<decimal> rno, Nullable<int> signid, string financialYearID, string authorised_flag, string username, string comments, Nullable<bool> comments_flag, string if_format, Nullable<bool> if_format_flag, Nullable<bool> clinical_flag, Nullable<bool> specimen_flag)
        {
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var organParameter = organ != null ?
                new ObjectParameter("organ", organ) :
                new ObjectParameter("organ", typeof(string));
    
            var specimenParameter = specimen != null ?
                new ObjectParameter("specimen", specimen) :
                new ObjectParameter("specimen", typeof(string));
    
            var clinicalParameter = clinical != null ?
                new ObjectParameter("clinical", clinical) :
                new ObjectParameter("clinical", typeof(string));
    
            var grossexaminationParameter = grossexamination != null ?
                new ObjectParameter("grossexamination", grossexamination) :
                new ObjectParameter("grossexamination", typeof(string));
    
            var impressionParameter = impression != null ?
                new ObjectParameter("impression", impression) :
                new ObjectParameter("impression", typeof(string));
    
            var microscopicParameter = microscopic != null ?
                new ObjectParameter("microscopic", microscopic) :
                new ObjectParameter("microscopic", typeof(string));
    
            var descripParameter = descrip != null ?
                new ObjectParameter("descrip", descrip) :
                new ObjectParameter("descrip", typeof(string));
    
            var title_repParameter = title_rep != null ?
                new ObjectParameter("title_rep", title_rep) :
                new ObjectParameter("title_rep", typeof(string));
    
            var reportNoParameter = reportNo != null ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var regIdParameter = regId != null ?
                new ObjectParameter("regId", regId) :
                new ObjectParameter("regId", typeof(string));
    
            var diaglcodeParameter = diaglcode != null ?
                new ObjectParameter("diaglcode", diaglcode) :
                new ObjectParameter("diaglcode", typeof(string));
    
            var diagllcodeParameter = diagllcode != null ?
                new ObjectParameter("diagllcode", diagllcode) :
                new ObjectParameter("diagllcode", typeof(string));
    
            var diaglllcodeParameter = diaglllcode != null ?
                new ObjectParameter("diaglllcode", diaglllcode) :
                new ObjectParameter("diaglllcode", typeof(string));
    
            var diagvcodeParameter = diagvcode != null ?
                new ObjectParameter("diagvcode", diagvcode) :
                new ObjectParameter("diagvcode", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(decimal));
    
            var slideParameter = slide != null ?
                new ObjectParameter("Slide", slide) :
                new ObjectParameter("Slide", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var gross_flagParameter = gross_flag.HasValue ?
                new ObjectParameter("gross_flag", gross_flag) :
                new ObjectParameter("gross_flag", typeof(bool));
    
            var imp_flagParameter = imp_flag.HasValue ?
                new ObjectParameter("imp_flag", imp_flag) :
                new ObjectParameter("imp_flag", typeof(bool));
    
            var micro_flagParameter = micro_flag.HasValue ?
                new ObjectParameter("micro_flag", micro_flag) :
                new ObjectParameter("micro_flag", typeof(bool));
    
            var advise_flagParameter = advise_flag.HasValue ?
                new ObjectParameter("advise_flag", advise_flag) :
                new ObjectParameter("advise_flag", typeof(bool));
    
            var revised_flagParameter = revised_flag.HasValue ?
                new ObjectParameter("revised_flag", revised_flag) :
                new ObjectParameter("revised_flag", typeof(bool));
    
            var remark_flagParameter = remark_flag.HasValue ?
                new ObjectParameter("remark_flag", remark_flag) :
                new ObjectParameter("remark_flag", typeof(bool));
    
            var hCFlagParameter = hCFlag != null ?
                new ObjectParameter("HCFlag", hCFlag) :
                new ObjectParameter("HCFlag", typeof(string));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var specimenAdequacyParameter = specimenAdequacy != null ?
                new ObjectParameter("SpecimenAdequacy", specimenAdequacy) :
                new ObjectParameter("SpecimenAdequacy", typeof(string));
    
            var adviceParameter = advice != null ?
                new ObjectParameter("Advice", advice) :
                new ObjectParameter("Advice", typeof(string));
    
            var revisedParameter = revised != null ?
                new ObjectParameter("Revised", revised) :
                new ObjectParameter("Revised", typeof(string));
    
            var dateOfReceiptParameter = dateOfReceipt.HasValue ?
                new ObjectParameter("DateOfReceipt", dateOfReceipt) :
                new ObjectParameter("DateOfReceipt", typeof(System.DateTime));
    
            var genCatParameter = genCat != null ?
                new ObjectParameter("GenCat", genCat) :
                new ObjectParameter("GenCat", typeof(string));
    
            var rnoParameter = rno.HasValue ?
                new ObjectParameter("rno", rno) :
                new ObjectParameter("rno", typeof(decimal));
    
            var signidParameter = signid.HasValue ?
                new ObjectParameter("signid", signid) :
                new ObjectParameter("signid", typeof(int));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var authorised_flagParameter = authorised_flag != null ?
                new ObjectParameter("Authorised_flag", authorised_flag) :
                new ObjectParameter("Authorised_flag", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var comments_flagParameter = comments_flag.HasValue ?
                new ObjectParameter("Comments_flag", comments_flag) :
                new ObjectParameter("Comments_flag", typeof(bool));
    
            var if_formatParameter = if_format != null ?
                new ObjectParameter("If_format", if_format) :
                new ObjectParameter("If_format", typeof(string));
    
            var if_format_flagParameter = if_format_flag.HasValue ?
                new ObjectParameter("If_format_flag", if_format_flag) :
                new ObjectParameter("If_format_flag", typeof(bool));
    
            var clinical_flagParameter = clinical_flag.HasValue ?
                new ObjectParameter("clinical_flag", clinical_flag) :
                new ObjectParameter("clinical_flag", typeof(bool));
    
            var specimen_flagParameter = specimen_flag.HasValue ?
                new ObjectParameter("Specimen_flag", specimen_flag) :
                new ObjectParameter("Specimen_flag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insertupdatehisto", tlcodeParameter, titleParameter, organParameter, specimenParameter, clinicalParameter, grossexaminationParameter, impressionParameter, microscopicParameter, descripParameter, title_repParameter, reportNoParameter, iOPDParameter, regIdParameter, diaglcodeParameter, diagllcodeParameter, diaglllcodeParameter, diagvcodeParameter, companyIDParameter, slideParameter, remarkParameter, gross_flagParameter, imp_flagParameter, micro_flagParameter, advise_flagParameter, revised_flagParameter, remark_flagParameter, hCFlagParameter, pePatIDParameter, regNoParameter, specimenAdequacyParameter, adviceParameter, revisedParameter, dateOfReceiptParameter, genCatParameter, rnoParameter, signidParameter, financialYearIDParameter, authorised_flagParameter, usernameParameter, commentsParameter, comments_flagParameter, if_formatParameter, if_format_flagParameter, clinical_flagParameter, specimen_flagParameter);
        }
    
        public virtual int SP_InsertUpdateLabTest(string mainDept, string testTitle, string tlCode, string headings, string hCode, string sampleName, Nullable<double> testRate, Nullable<int> companyid, string userName)
        {
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var testTitleParameter = testTitle != null ?
                new ObjectParameter("TestTitle", testTitle) :
                new ObjectParameter("TestTitle", typeof(string));
    
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var headingsParameter = headings != null ?
                new ObjectParameter("Headings", headings) :
                new ObjectParameter("Headings", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var sampleNameParameter = sampleName != null ?
                new ObjectParameter("SampleName", sampleName) :
                new ObjectParameter("SampleName", typeof(string));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(double));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateLabTest", mainDeptParameter, testTitleParameter, tlCodeParameter, headingsParameter, hCodeParameter, sampleNameParameter, testRateParameter, companyidParameter, userNameParameter);
        }
    
        public virtual int SP_InsertUpdateMarquee(Nullable<int> action, Nullable<int> mid, string marqueeText, Nullable<int> companyid)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var midParameter = mid.HasValue ?
                new ObjectParameter("mid", mid) :
                new ObjectParameter("mid", typeof(int));
    
            var marqueeTextParameter = marqueeText != null ?
                new ObjectParameter("MarqueeText", marqueeText) :
                new ObjectParameter("MarqueeText", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateMarquee", actionParameter, midParameter, marqueeTextParameter, companyidParameter);
        }
    
        public virtual int Sp_InsertUpdateMenoResult(string regNo, string iOPD, string tlCode, string testCode, string textMemo, string computerName, Nullable<decimal> signID, string status)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var textMemoParameter = textMemo != null ?
                new ObjectParameter("TextMemo", textMemo) :
                new ObjectParameter("TextMemo", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var signIDParameter = signID.HasValue ?
                new ObjectParameter("SignID", signID) :
                new ObjectParameter("SignID", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateMenoResult", regNoParameter, iOPDParameter, tlCodeParameter, testCodeParameter, textMemoParameter, computerNameParameter, signIDParameter, statusParameter);
        }
    
        public virtual int Sp_InsertUpdatePathRadOherNo(string iopd, string maindept, Nullable<int> companyid, Nullable<int> c_ID)
        {
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdatePathRadOherNo", iopdParameter, maindeptParameter, companyidParameter, c_IDParameter);
        }
    
        public virtual int sp_InsertUpdateReportPhoto(Nullable<int> headid, byte[] photo)
        {
            var headidParameter = headid.HasValue ?
                new ObjectParameter("headid", headid) :
                new ObjectParameter("headid", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateReportPhoto", headidParameter, photoParameter);
        }
    
        public virtual int SP_InsertUpdateSignature(Nullable<int> action, Nullable<int> signid, string sign, Nullable<int> companyID, byte[] signPicture, string sign2)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var signidParameter = signid.HasValue ?
                new ObjectParameter("signid", signid) :
                new ObjectParameter("signid", typeof(int));
    
            var signParameter = sign != null ?
                new ObjectParameter("Sign", sign) :
                new ObjectParameter("Sign", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var signPictureParameter = signPicture != null ?
                new ObjectParameter("SignPicture", signPicture) :
                new ObjectParameter("SignPicture", typeof(byte[]));
    
            var sign2Parameter = sign2 != null ?
                new ObjectParameter("sign2", sign2) :
                new ObjectParameter("sign2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateSignature", actionParameter, signidParameter, signParameter, companyIDParameter, signPictureParameter, sign2Parameter);
        }
    
        public virtual int sp_Insertupdateslide(Nullable<decimal> slideNo, string slideDesc, string imagePath, string regNo, string financialYearID, string username, Nullable<decimal> companyID, string pePatID)
        {
            var slideNoParameter = slideNo.HasValue ?
                new ObjectParameter("SlideNo", slideNo) :
                new ObjectParameter("SlideNo", typeof(decimal));
    
            var slideDescParameter = slideDesc != null ?
                new ObjectParameter("SlideDesc", slideDesc) :
                new ObjectParameter("SlideDesc", typeof(string));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(decimal));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insertupdateslide", slideNoParameter, slideDescParameter, imagePathParameter, regNoParameter, financialYearIDParameter, usernameParameter, companyIDParameter, pePatIDParameter);
        }
    
        public virtual int Sp_InsertUpdateTempStore(string tlcode, string regno, string iOPD, string financialYearID, Nullable<int> companyId, Nullable<int> c_ID, string lab_code)
        {
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateTempStore", tlcodeParameter, regnoParameter, iOPDParameter, financialYearIDParameter, companyIdParameter, c_IDParameter, lab_codeParameter);
        }
    
        public virtual int Sp_InsertUpdateTempStore_14_07_2014(string tlcode, string regno, string iOPD, string financialYearID, Nullable<int> companyId, Nullable<int> c_ID, string lab_code)
        {
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateTempStore_14_07_2014", tlcodeParameter, regnoParameter, iOPDParameter, financialYearIDParameter, companyIdParameter, c_IDParameter, lab_codeParameter);
        }
    
        public virtual int Sp_InsertUpdateTempStore_15_07_2014(string tlcode, string regno, string iOPD, string financialYearID, Nullable<int> companyId, Nullable<int> c_ID, string lab_code)
        {
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateTempStore_15_07_2014", tlcodeParameter, regnoParameter, iOPDParameter, financialYearIDParameter, companyIdParameter, c_IDParameter, lab_codeParameter);
        }
    
        public virtual int Sp_InsertUpdateTempStore_28022014(string tlcode, string regno, string iOPD, string financialYearID, Nullable<int> companyId, string lab_code)
        {
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateTempStore_28022014", tlcodeParameter, regnoParameter, iOPDParameter, financialYearIDParameter, companyIdParameter, lab_codeParameter);
        }
    
        public virtual int Sp_InsertUpdateTempStore_TestResult(string tlcode, string regno, string iOPD, Nullable<int> companyId, Nullable<int> c_ID, string testCode, string testResult_Format, string status, string statusAudit, string testUser, Nullable<System.DateTime> testedDate, Nullable<bool> printstatus, string reason, Nullable<System.DateTime> dateofentry, Nullable<bool> teststatus, string pePatID, string attachFilePath, Nullable<System.DateTime> reportDate, Nullable<int> signid, Nullable<int> tlcodeflag)
        {
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var testResult_FormatParameter = testResult_Format != null ?
                new ObjectParameter("TestResult_Format", testResult_Format) :
                new ObjectParameter("TestResult_Format", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var statusAuditParameter = statusAudit != null ?
                new ObjectParameter("statusAudit", statusAudit) :
                new ObjectParameter("statusAudit", typeof(string));
    
            var testUserParameter = testUser != null ?
                new ObjectParameter("TestUser", testUser) :
                new ObjectParameter("TestUser", typeof(string));
    
            var testedDateParameter = testedDate.HasValue ?
                new ObjectParameter("TestedDate", testedDate) :
                new ObjectParameter("TestedDate", typeof(System.DateTime));
    
            var printstatusParameter = printstatus.HasValue ?
                new ObjectParameter("printstatus", printstatus) :
                new ObjectParameter("printstatus", typeof(bool));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var dateofentryParameter = dateofentry.HasValue ?
                new ObjectParameter("dateofentry", dateofentry) :
                new ObjectParameter("dateofentry", typeof(System.DateTime));
    
            var teststatusParameter = teststatus.HasValue ?
                new ObjectParameter("teststatus", teststatus) :
                new ObjectParameter("teststatus", typeof(bool));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var attachFilePathParameter = attachFilePath != null ?
                new ObjectParameter("AttachFilePath", attachFilePath) :
                new ObjectParameter("AttachFilePath", typeof(string));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var signidParameter = signid.HasValue ?
                new ObjectParameter("signid", signid) :
                new ObjectParameter("signid", typeof(int));
    
            var tlcodeflagParameter = tlcodeflag.HasValue ?
                new ObjectParameter("tlcodeflag", tlcodeflag) :
                new ObjectParameter("tlcodeflag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateTempStore_TestResult", tlcodeParameter, regnoParameter, iOPDParameter, companyIdParameter, c_IDParameter, testCodeParameter, testResult_FormatParameter, statusParameter, statusAuditParameter, testUserParameter, testedDateParameter, printstatusParameter, reasonParameter, dateofentryParameter, teststatusParameter, pePatIDParameter, attachFilePathParameter, reportDateParameter, signidParameter, tlcodeflagParameter);
        }
    
        public virtual ObjectResult<string> Sp_InsertUpdateTestRemark(Nullable<int> action, string regno, string iopd, string tlcode, Nullable<int> companyid, string remarks)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_InsertUpdateTestRemark", actionParameter, regnoParameter, iopdParameter, tlcodeParameter, companyidParameter, remarksParameter);
        }
    
        public virtual int SP_InsertUpdateTextMemo(Nullable<int> action, Nullable<int> c_ID, string regNo, Nullable<int> signID, string computerName, string iOPD, string tlCode, string testCode, string textMemo, Nullable<int> companyid, string comments)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var signIDParameter = signID.HasValue ?
                new ObjectParameter("SignID", signID) :
                new ObjectParameter("SignID", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var textMemoParameter = textMemo != null ?
                new ObjectParameter("TextMemo", textMemo) :
                new ObjectParameter("TextMemo", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdateTextMemo", actionParameter, c_IDParameter, regNoParameter, signIDParameter, computerNameParameter, iOPDParameter, tlCodeParameter, testCodeParameter, textMemoParameter, companyidParameter, commentsParameter);
        }
    
        public virtual int Sp_InsertUpdateVialMaster(Nullable<int> c_ID, string vialID, string sampleType, string testCodes, string testNames, string sampleStatus, string remark, Nullable<int> companyid)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var testCodesParameter = testCodes != null ?
                new ObjectParameter("TestCodes", testCodes) :
                new ObjectParameter("TestCodes", typeof(string));
    
            var testNamesParameter = testNames != null ?
                new ObjectParameter("TestNames", testNames) :
                new ObjectParameter("TestNames", typeof(string));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateVialMaster", c_IDParameter, vialIDParameter, sampleTypeParameter, testCodesParameter, testNamesParameter, sampleStatusParameter, remarkParameter, companyidParameter);
        }
    
        public virtual int SP_InsertUpdHelpMaster(Nullable<int> srNo, string helpTest, string tlCode, string testCode, string userName, Nullable<int> companyId)
        {
            var srNoParameter = srNo.HasValue ?
                new ObjectParameter("SrNo", srNo) :
                new ObjectParameter("SrNo", typeof(int));
    
            var helpTestParameter = helpTest != null ?
                new ObjectParameter("HelpTest", helpTest) :
                new ObjectParameter("HelpTest", typeof(string));
    
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUpdHelpMaster", srNoParameter, helpTestParameter, tlCodeParameter, testCodeParameter, userNameParameter, companyIdParameter);
        }
    
        public virtual int SP_Loadcompanydata(Nullable<int> compyid, string compnayName)
        {
            var compyidParameter = compyid.HasValue ?
                new ObjectParameter("compyid", compyid) :
                new ObjectParameter("compyid", typeof(int));
    
            var compnayNameParameter = compnayName != null ?
                new ObjectParameter("compnayName", compnayName) :
                new ObjectParameter("compnayName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Loadcompanydata", compyidParameter, compnayNameParameter);
        }
    
        public virtual ObjectResult<sp_loadvialmaster_Result> sp_loadvialmaster(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_loadvialmaster_Result>("sp_loadvialmaster", companyidParameter);
        }
    
        public virtual int SP_MakeBillSave()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MakeBillSave");
        }
    
        public virtual int SP_MakeBillSave111()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MakeBillSave111");
        }
    
        public virtual int SP_MakeBillSaveForRegNoIopd(string regNo, string iOPD)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MakeBillSaveForRegNoIopd", regNoParameter, iOPDParameter);
        }
    
        public virtual int SP_MakeBillSaveWithDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MakeBillSaveWithDate", startDateParameter, endDateParameter);
        }
    
        public virtual int SP_MakeBillSell1(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MakeBillSell1", datefromParameter, datetoParameter);
        }
    
        public virtual int SP_MakeBillSell2(Nullable<int> regno1, string iopd1)
        {
            var regno1Parameter = regno1.HasValue ?
                new ObjectParameter("regno1", regno1) :
                new ObjectParameter("regno1", typeof(int));
    
            var iopd1Parameter = iopd1 != null ?
                new ObjectParameter("iopd1", iopd1) :
                new ObjectParameter("iopd1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MakeBillSell2", regno1Parameter, iopd1Parameter);
        }
    
        public virtual int SP_MakeBillSell3(Nullable<int> regno1, string iopd1, Nullable<int> amount)
        {
            var regno1Parameter = regno1.HasValue ?
                new ObjectParameter("regno1", regno1) :
                new ObjectParameter("regno1", typeof(int));
    
            var iopd1Parameter = iopd1 != null ?
                new ObjectParameter("iopd1", iopd1) :
                new ObjectParameter("iopd1", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MakeBillSell3", regno1Parameter, iopd1Parameter, amountParameter);
        }
    
        public virtual ObjectResult<SP_MonthlyCollCenterDetail_Result> SP_MonthlyCollCenterDetail(Nullable<int> regno, string iopd, string tLCode, Nullable<int> companyid)
        {
            var regnoParameter = regno.HasValue ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(int));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MonthlyCollCenterDetail_Result>("SP_MonthlyCollCenterDetail", regnoParameter, iopdParameter, tLCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_PrintStatusTableExist_Result> SP_PrintStatusTableExist(string regno, string iopd, string tLCode, Nullable<int> companyid)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("Iopd", iopd) :
                new ObjectParameter("Iopd", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PrintStatusTableExist_Result>("SP_PrintStatusTableExist", regnoParameter, iopdParameter, tLCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<sp_ratemaster_Result> sp_ratemaster(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ratemaster_Result>("sp_ratemaster", companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_RegNoAutogenerateLogic(string iOPD, Nullable<int> companyId)
        {
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_RegNoAutogenerateLogic", iOPDParameter, companyIdParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<SP_SampleWiseTest_Result> SP_SampleWiseTest(string sampletype, Nullable<int> companyid)
        {
            var sampletypeParameter = sampletype != null ?
                new ObjectParameter("Sampletype", sampletype) :
                new ObjectParameter("Sampletype", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SampleWiseTest_Result>("SP_SampleWiseTest", sampletypeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<SP_SearchCodeFromformulaTable_Result> SP_SearchCodeFromformulaTable(string testcode)
        {
            var testcodeParameter = testcode != null ?
                new ObjectParameter("testcode", testcode) :
                new ObjectParameter("testcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SearchCodeFromformulaTable_Result>("SP_SearchCodeFromformulaTable", testcodeParameter);
        }
    
        public virtual int Sp_SelectReportNo(string tlcodes, Nullable<int> c_Id, Nullable<int> companyid)
        {
            var tlcodesParameter = tlcodes != null ?
                new ObjectParameter("tlcodes", tlcodes) :
                new ObjectParameter("tlcodes", typeof(string));
    
            var c_IdParameter = c_Id.HasValue ?
                new ObjectParameter("C_Id", c_Id) :
                new ObjectParameter("C_Id", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_SelectReportNo", tlcodesParameter, c_IdParameter, companyidParameter);
        }
    
        public virtual int sp_SetPrintStatus(string username, string status, string tlcode, Nullable<int> companyId, Nullable<int> c_ID, Nullable<int> task)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SetPrintStatus", usernameParameter, statusParameter, tlcodeParameter, companyIdParameter, c_IDParameter, taskParameter);
        }
    
        public virtual int SP_TempDeptWisePatientDailyInsert(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_TempDeptWisePatientDailyInsert", datefromParameter, datetoParameter);
        }
    
        public virtual int sp_turntimeall(string testcode, string testname, Nullable<int> turnaroundtiomehour, Nullable<int> reportduedays, string vialtype, Nullable<int> companyid, string username, string timeflag, Nullable<int> sr_no)
        {
            var testcodeParameter = testcode != null ?
                new ObjectParameter("Testcode", testcode) :
                new ObjectParameter("Testcode", typeof(string));
    
            var testnameParameter = testname != null ?
                new ObjectParameter("Testname", testname) :
                new ObjectParameter("Testname", typeof(string));
    
            var turnaroundtiomehourParameter = turnaroundtiomehour.HasValue ?
                new ObjectParameter("Turnaroundtiomehour", turnaroundtiomehour) :
                new ObjectParameter("Turnaroundtiomehour", typeof(int));
    
            var reportduedaysParameter = reportduedays.HasValue ?
                new ObjectParameter("Reportduedays", reportduedays) :
                new ObjectParameter("Reportduedays", typeof(int));
    
            var vialtypeParameter = vialtype != null ?
                new ObjectParameter("vialtype", vialtype) :
                new ObjectParameter("vialtype", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var timeflagParameter = timeflag != null ?
                new ObjectParameter("timeflag", timeflag) :
                new ObjectParameter("timeflag", typeof(string));
    
            var sr_noParameter = sr_no.HasValue ?
                new ObjectParameter("sr_no", sr_no) :
                new ObjectParameter("sr_no", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_turntimeall", testcodeParameter, testnameParameter, turnaroundtiomehourParameter, reportduedaysParameter, vialtypeParameter, companyidParameter, usernameParameter, timeflagParameter, sr_noParameter);
        }
    
        public virtual int SP_UpadateImage(string slide1, string slide2, string slide3, byte[] image1, byte[] image2, byte[] image3, string hCFlag, string regno)
        {
            var slide1Parameter = slide1 != null ?
                new ObjectParameter("Slide1", slide1) :
                new ObjectParameter("Slide1", typeof(string));
    
            var slide2Parameter = slide2 != null ?
                new ObjectParameter("Slide2", slide2) :
                new ObjectParameter("Slide2", typeof(string));
    
            var slide3Parameter = slide3 != null ?
                new ObjectParameter("Slide3", slide3) :
                new ObjectParameter("Slide3", typeof(string));
    
            var image1Parameter = image1 != null ?
                new ObjectParameter("Image1", image1) :
                new ObjectParameter("Image1", typeof(byte[]));
    
            var image2Parameter = image2 != null ?
                new ObjectParameter("Image2", image2) :
                new ObjectParameter("Image2", typeof(byte[]));
    
            var image3Parameter = image3 != null ?
                new ObjectParameter("Image3", image3) :
                new ObjectParameter("Image3", typeof(byte[]));
    
            var hCFlagParameter = hCFlag != null ?
                new ObjectParameter("HCFlag", hCFlag) :
                new ObjectParameter("HCFlag", typeof(string));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpadateImage", slide1Parameter, slide2Parameter, slide3Parameter, image1Parameter, image2Parameter, image3Parameter, hCFlagParameter, regnoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Update_ContactInformationSegical(string username, string usertype, string tests, string pePatID, string regNo, string iOPD, Nullable<System.DateTime> dateOfEntry, string intial, string firstName, string lastName, string sex, Nullable<int> age, string mDY, string refDr, string check_Flag, Nullable<bool> printFlag, Nullable<bool> flag_CollCenter, Nullable<bool> flag_Tech, Nullable<bool> emergencyflag, Nullable<System.DateTime> reportdate, string report_time, Nullable<System.DateTime> exam_date, string exam_time, string patientPhoneNo, string patientCity, string patient_addr, string emailID, string technician_Name, string collection_Center, string tech_Code, string dr_Code, string docName, string coll_Code, string compCode, string compName, string financialYearID, Nullable<bool> cbcflag, string graph, Nullable<int> xa, Nullable<int> xr, Nullable<int> ec, Nullable<int> mr, Nullable<int> ct, Nullable<int> se, Nullable<int> pt, string wbc, string rbc, string plt, string plt1, string coulter, Nullable<double> testCharges, string sampleID, Nullable<decimal> hospitalID, string wardNo, string bedNo, string wDeptNo, string deptno, Nullable<int> iPDNo, string bednum, string roomnum, Nullable<int> companyid, string sampleStatus, string sampleType, string sampleNotes, string pSCRegNo, string vialID, string clinical_History, string courierDetails, Nullable<int> oPDNo, Nullable<int> labNo, string telNo, Nullable<int> pat_id, string orderPriority, string tLCode, string hCode, string groupCode, Nullable<double> testRate, Nullable<double> comp_Amt, Nullable<double> comp_Per, string remark, string lab_code, string codeTes, string vSampleType, string vTestCodes, string vTestNames, string vCodeTes, string ptype, Nullable<int> count, Nullable<int> unitid, Nullable<int> cIDNew)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(string));
    
            var testsParameter = tests != null ?
                new ObjectParameter("Tests", tests) :
                new ObjectParameter("Tests", typeof(string));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var intialParameter = intial != null ?
                new ObjectParameter("intial", intial) :
                new ObjectParameter("intial", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var mDYParameter = mDY != null ?
                new ObjectParameter("MDY", mDY) :
                new ObjectParameter("MDY", typeof(string));
    
            var refDrParameter = refDr != null ?
                new ObjectParameter("RefDr", refDr) :
                new ObjectParameter("RefDr", typeof(string));
    
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var printFlagParameter = printFlag.HasValue ?
                new ObjectParameter("PrintFlag", printFlag) :
                new ObjectParameter("PrintFlag", typeof(bool));
    
            var flag_CollCenterParameter = flag_CollCenter.HasValue ?
                new ObjectParameter("Flag_CollCenter", flag_CollCenter) :
                new ObjectParameter("Flag_CollCenter", typeof(bool));
    
            var flag_TechParameter = flag_Tech.HasValue ?
                new ObjectParameter("Flag_Tech", flag_Tech) :
                new ObjectParameter("Flag_Tech", typeof(bool));
    
            var emergencyflagParameter = emergencyflag.HasValue ?
                new ObjectParameter("emergencyflag", emergencyflag) :
                new ObjectParameter("emergencyflag", typeof(bool));
    
            var reportdateParameter = reportdate.HasValue ?
                new ObjectParameter("Reportdate", reportdate) :
                new ObjectParameter("Reportdate", typeof(System.DateTime));
    
            var report_timeParameter = report_time != null ?
                new ObjectParameter("Report_time", report_time) :
                new ObjectParameter("Report_time", typeof(string));
    
            var exam_dateParameter = exam_date.HasValue ?
                new ObjectParameter("exam_date", exam_date) :
                new ObjectParameter("exam_date", typeof(System.DateTime));
    
            var exam_timeParameter = exam_time != null ?
                new ObjectParameter("exam_time", exam_time) :
                new ObjectParameter("exam_time", typeof(string));
    
            var patientPhoneNoParameter = patientPhoneNo != null ?
                new ObjectParameter("PatientPhoneNo", patientPhoneNo) :
                new ObjectParameter("PatientPhoneNo", typeof(string));
    
            var patientCityParameter = patientCity != null ?
                new ObjectParameter("PatientCity", patientCity) :
                new ObjectParameter("PatientCity", typeof(string));
    
            var patient_addrParameter = patient_addr != null ?
                new ObjectParameter("patient_addr", patient_addr) :
                new ObjectParameter("patient_addr", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var technician_NameParameter = technician_Name != null ?
                new ObjectParameter("Technician_Name", technician_Name) :
                new ObjectParameter("Technician_Name", typeof(string));
    
            var collection_CenterParameter = collection_Center != null ?
                new ObjectParameter("Collection_Center", collection_Center) :
                new ObjectParameter("Collection_Center", typeof(string));
    
            var tech_CodeParameter = tech_Code != null ?
                new ObjectParameter("Tech_Code", tech_Code) :
                new ObjectParameter("Tech_Code", typeof(string));
    
            var dr_CodeParameter = dr_Code != null ?
                new ObjectParameter("Dr_Code", dr_Code) :
                new ObjectParameter("Dr_Code", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var coll_CodeParameter = coll_Code != null ?
                new ObjectParameter("Coll_Code", coll_Code) :
                new ObjectParameter("Coll_Code", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var cbcflagParameter = cbcflag.HasValue ?
                new ObjectParameter("cbcflag", cbcflag) :
                new ObjectParameter("cbcflag", typeof(bool));
    
            var graphParameter = graph != null ?
                new ObjectParameter("graph", graph) :
                new ObjectParameter("graph", typeof(string));
    
            var xaParameter = xa.HasValue ?
                new ObjectParameter("xa", xa) :
                new ObjectParameter("xa", typeof(int));
    
            var xrParameter = xr.HasValue ?
                new ObjectParameter("xr", xr) :
                new ObjectParameter("xr", typeof(int));
    
            var ecParameter = ec.HasValue ?
                new ObjectParameter("ec", ec) :
                new ObjectParameter("ec", typeof(int));
    
            var mrParameter = mr.HasValue ?
                new ObjectParameter("mr", mr) :
                new ObjectParameter("mr", typeof(int));
    
            var ctParameter = ct.HasValue ?
                new ObjectParameter("ct", ct) :
                new ObjectParameter("ct", typeof(int));
    
            var seParameter = se.HasValue ?
                new ObjectParameter("se", se) :
                new ObjectParameter("se", typeof(int));
    
            var ptParameter = pt.HasValue ?
                new ObjectParameter("pt", pt) :
                new ObjectParameter("pt", typeof(int));
    
            var wbcParameter = wbc != null ?
                new ObjectParameter("wbc", wbc) :
                new ObjectParameter("wbc", typeof(string));
    
            var rbcParameter = rbc != null ?
                new ObjectParameter("rbc", rbc) :
                new ObjectParameter("rbc", typeof(string));
    
            var pltParameter = plt != null ?
                new ObjectParameter("plt", plt) :
                new ObjectParameter("plt", typeof(string));
    
            var plt1Parameter = plt1 != null ?
                new ObjectParameter("plt1", plt1) :
                new ObjectParameter("plt1", typeof(string));
    
            var coulterParameter = coulter != null ?
                new ObjectParameter("coulter", coulter) :
                new ObjectParameter("coulter", typeof(string));
    
            var testChargesParameter = testCharges.HasValue ?
                new ObjectParameter("TestCharges", testCharges) :
                new ObjectParameter("TestCharges", typeof(double));
    
            var sampleIDParameter = sampleID != null ?
                new ObjectParameter("SampleID", sampleID) :
                new ObjectParameter("SampleID", typeof(string));
    
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(decimal));
    
            var wardNoParameter = wardNo != null ?
                new ObjectParameter("WardNo", wardNo) :
                new ObjectParameter("WardNo", typeof(string));
    
            var bedNoParameter = bedNo != null ?
                new ObjectParameter("BedNo", bedNo) :
                new ObjectParameter("BedNo", typeof(string));
    
            var wDeptNoParameter = wDeptNo != null ?
                new ObjectParameter("WDeptNo", wDeptNo) :
                new ObjectParameter("WDeptNo", typeof(string));
    
            var deptnoParameter = deptno != null ?
                new ObjectParameter("deptno", deptno) :
                new ObjectParameter("deptno", typeof(string));
    
            var iPDNoParameter = iPDNo.HasValue ?
                new ObjectParameter("IPDNo", iPDNo) :
                new ObjectParameter("IPDNo", typeof(int));
    
            var bednumParameter = bednum != null ?
                new ObjectParameter("bednum", bednum) :
                new ObjectParameter("bednum", typeof(string));
    
            var roomnumParameter = roomnum != null ?
                new ObjectParameter("roomnum", roomnum) :
                new ObjectParameter("roomnum", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var sampleNotesParameter = sampleNotes != null ?
                new ObjectParameter("SampleNotes", sampleNotes) :
                new ObjectParameter("SampleNotes", typeof(string));
    
            var pSCRegNoParameter = pSCRegNo != null ?
                new ObjectParameter("pSCRegNo", pSCRegNo) :
                new ObjectParameter("pSCRegNo", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var clinical_HistoryParameter = clinical_History != null ?
                new ObjectParameter("Clinical_History", clinical_History) :
                new ObjectParameter("Clinical_History", typeof(string));
    
            var courierDetailsParameter = courierDetails != null ?
                new ObjectParameter("CourierDetails", courierDetails) :
                new ObjectParameter("CourierDetails", typeof(string));
    
            var oPDNoParameter = oPDNo.HasValue ?
                new ObjectParameter("OPDNo", oPDNo) :
                new ObjectParameter("OPDNo", typeof(int));
    
            var labNoParameter = labNo.HasValue ?
                new ObjectParameter("labNo", labNo) :
                new ObjectParameter("labNo", typeof(int));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var pat_idParameter = pat_id.HasValue ?
                new ObjectParameter("pat_id", pat_id) :
                new ObjectParameter("pat_id", typeof(int));
    
            var orderPriorityParameter = orderPriority != null ?
                new ObjectParameter("OrderPriority", orderPriority) :
                new ObjectParameter("OrderPriority", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(double));
    
            var comp_AmtParameter = comp_Amt.HasValue ?
                new ObjectParameter("comp_Amt", comp_Amt) :
                new ObjectParameter("comp_Amt", typeof(double));
    
            var comp_PerParameter = comp_Per.HasValue ?
                new ObjectParameter("comp_Per", comp_Per) :
                new ObjectParameter("comp_Per", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            var codeTesParameter = codeTes != null ?
                new ObjectParameter("CodeTes", codeTes) :
                new ObjectParameter("CodeTes", typeof(string));
    
            var vSampleTypeParameter = vSampleType != null ?
                new ObjectParameter("VSampleType", vSampleType) :
                new ObjectParameter("VSampleType", typeof(string));
    
            var vTestCodesParameter = vTestCodes != null ?
                new ObjectParameter("VTestCodes", vTestCodes) :
                new ObjectParameter("VTestCodes", typeof(string));
    
            var vTestNamesParameter = vTestNames != null ?
                new ObjectParameter("VTestNames", vTestNames) :
                new ObjectParameter("VTestNames", typeof(string));
    
            var vCodeTesParameter = vCodeTes != null ?
                new ObjectParameter("VCodeTes", vCodeTes) :
                new ObjectParameter("VCodeTes", typeof(string));
    
            var ptypeParameter = ptype != null ?
                new ObjectParameter("ptype", ptype) :
                new ObjectParameter("ptype", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var unitidParameter = unitid.HasValue ?
                new ObjectParameter("Unitid", unitid) :
                new ObjectParameter("Unitid", typeof(int));
    
            var cIDNewParameter = cIDNew.HasValue ?
                new ObjectParameter("CIDNew", cIDNew) :
                new ObjectParameter("CIDNew", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Update_ContactInformationSegical", usernameParameter, usertypeParameter, testsParameter, pePatIDParameter, regNoParameter, iOPDParameter, dateOfEntryParameter, intialParameter, firstNameParameter, lastNameParameter, sexParameter, ageParameter, mDYParameter, refDrParameter, check_FlagParameter, printFlagParameter, flag_CollCenterParameter, flag_TechParameter, emergencyflagParameter, reportdateParameter, report_timeParameter, exam_dateParameter, exam_timeParameter, patientPhoneNoParameter, patientCityParameter, patient_addrParameter, emailIDParameter, technician_NameParameter, collection_CenterParameter, tech_CodeParameter, dr_CodeParameter, docNameParameter, coll_CodeParameter, compCodeParameter, compNameParameter, financialYearIDParameter, cbcflagParameter, graphParameter, xaParameter, xrParameter, ecParameter, mrParameter, ctParameter, seParameter, ptParameter, wbcParameter, rbcParameter, pltParameter, plt1Parameter, coulterParameter, testChargesParameter, sampleIDParameter, hospitalIDParameter, wardNoParameter, bedNoParameter, wDeptNoParameter, deptnoParameter, iPDNoParameter, bednumParameter, roomnumParameter, companyidParameter, sampleStatusParameter, sampleTypeParameter, sampleNotesParameter, pSCRegNoParameter, vialIDParameter, clinical_HistoryParameter, courierDetailsParameter, oPDNoParameter, labNoParameter, telNoParameter, pat_idParameter, orderPriorityParameter, tLCodeParameter, hCodeParameter, groupCodeParameter, testRateParameter, comp_AmtParameter, comp_PerParameter, remarkParameter, lab_codeParameter, codeTesParameter, vSampleTypeParameter, vTestCodesParameter, vTestNamesParameter, vCodeTesParameter, ptypeParameter, countParameter, unitidParameter, cIDNewParameter);
        }
    
        public virtual int SP_UpdateBillDetails(Nullable<int> pepatid, Nullable<int> opdno, Nullable<int> ipdno, string financialYearId, Nullable<int> companyid, string titlecode, Nullable<int> signid)
        {
            var pepatidParameter = pepatid.HasValue ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(int));
    
            var opdnoParameter = opdno.HasValue ?
                new ObjectParameter("opdno", opdno) :
                new ObjectParameter("opdno", typeof(int));
    
            var ipdnoParameter = ipdno.HasValue ?
                new ObjectParameter("ipdno", ipdno) :
                new ObjectParameter("ipdno", typeof(int));
    
            var financialYearIdParameter = financialYearId != null ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var titlecodeParameter = titlecode != null ?
                new ObjectParameter("titlecode", titlecode) :
                new ObjectParameter("titlecode", typeof(string));
    
            var signidParameter = signid.HasValue ?
                new ObjectParameter("signid", signid) :
                new ObjectParameter("signid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateBillDetails", pepatidParameter, opdnoParameter, ipdnoParameter, financialYearIdParameter, companyidParameter, titlecodeParameter, signidParameter);
        }
    
        public virtual int Sp_UpdateContactinfo(Nullable<int> c_ID, string username, string usertype, string tests, string pePatID, string regNo, string check_Flag, string iOPD, Nullable<System.DateTime> dateOfEntry, string intial, string firstName, string lastName, string sex, Nullable<int> age, string mDY, string refDr, Nullable<bool> printFlag, Nullable<bool> flag, Nullable<bool> emergencyflag, Nullable<System.DateTime> reportdate, string report_time, Nullable<System.DateTime> exam_date, Nullable<System.DateTime> exam_time, string patientPhoneNo, string patientCity, string patient_addr, string emailID, string technician_Name, string collection_Center, string tech_Code, string dr_Code, string docName, string coll_Code, string compCode, string compName, string financialYearID, Nullable<bool> cbcflag, Nullable<int> xa, Nullable<int> xr, Nullable<int> ec, Nullable<int> mr, Nullable<int> ct, Nullable<int> se, Nullable<int> pt, Nullable<double> testCharges, string sampleID, string wDeptNo, string bedNo, string wardNo, Nullable<int> hospitalID, string sampleStatus, string vialID, string clinical_History, string courierDetails, string telNo, Nullable<int> companyid)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(string));
    
            var testsParameter = tests != null ?
                new ObjectParameter("Tests", tests) :
                new ObjectParameter("Tests", typeof(string));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var intialParameter = intial != null ?
                new ObjectParameter("intial", intial) :
                new ObjectParameter("intial", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var mDYParameter = mDY != null ?
                new ObjectParameter("MDY", mDY) :
                new ObjectParameter("MDY", typeof(string));
    
            var refDrParameter = refDr != null ?
                new ObjectParameter("RefDr", refDr) :
                new ObjectParameter("RefDr", typeof(string));
    
            var printFlagParameter = printFlag.HasValue ?
                new ObjectParameter("PrintFlag", printFlag) :
                new ObjectParameter("PrintFlag", typeof(bool));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(bool));
    
            var emergencyflagParameter = emergencyflag.HasValue ?
                new ObjectParameter("emergencyflag", emergencyflag) :
                new ObjectParameter("emergencyflag", typeof(bool));
    
            var reportdateParameter = reportdate.HasValue ?
                new ObjectParameter("Reportdate", reportdate) :
                new ObjectParameter("Reportdate", typeof(System.DateTime));
    
            var report_timeParameter = report_time != null ?
                new ObjectParameter("Report_time", report_time) :
                new ObjectParameter("Report_time", typeof(string));
    
            var exam_dateParameter = exam_date.HasValue ?
                new ObjectParameter("exam_date", exam_date) :
                new ObjectParameter("exam_date", typeof(System.DateTime));
    
            var exam_timeParameter = exam_time.HasValue ?
                new ObjectParameter("exam_time", exam_time) :
                new ObjectParameter("exam_time", typeof(System.DateTime));
    
            var patientPhoneNoParameter = patientPhoneNo != null ?
                new ObjectParameter("PatientPhoneNo", patientPhoneNo) :
                new ObjectParameter("PatientPhoneNo", typeof(string));
    
            var patientCityParameter = patientCity != null ?
                new ObjectParameter("PatientCity", patientCity) :
                new ObjectParameter("PatientCity", typeof(string));
    
            var patient_addrParameter = patient_addr != null ?
                new ObjectParameter("patient_addr", patient_addr) :
                new ObjectParameter("patient_addr", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var technician_NameParameter = technician_Name != null ?
                new ObjectParameter("Technician_Name", technician_Name) :
                new ObjectParameter("Technician_Name", typeof(string));
    
            var collection_CenterParameter = collection_Center != null ?
                new ObjectParameter("Collection_Center", collection_Center) :
                new ObjectParameter("Collection_Center", typeof(string));
    
            var tech_CodeParameter = tech_Code != null ?
                new ObjectParameter("Tech_Code", tech_Code) :
                new ObjectParameter("Tech_Code", typeof(string));
    
            var dr_CodeParameter = dr_Code != null ?
                new ObjectParameter("Dr_Code", dr_Code) :
                new ObjectParameter("Dr_Code", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var coll_CodeParameter = coll_Code != null ?
                new ObjectParameter("Coll_Code", coll_Code) :
                new ObjectParameter("Coll_Code", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var cbcflagParameter = cbcflag.HasValue ?
                new ObjectParameter("cbcflag", cbcflag) :
                new ObjectParameter("cbcflag", typeof(bool));
    
            var xaParameter = xa.HasValue ?
                new ObjectParameter("xa", xa) :
                new ObjectParameter("xa", typeof(int));
    
            var xrParameter = xr.HasValue ?
                new ObjectParameter("xr", xr) :
                new ObjectParameter("xr", typeof(int));
    
            var ecParameter = ec.HasValue ?
                new ObjectParameter("ec", ec) :
                new ObjectParameter("ec", typeof(int));
    
            var mrParameter = mr.HasValue ?
                new ObjectParameter("mr", mr) :
                new ObjectParameter("mr", typeof(int));
    
            var ctParameter = ct.HasValue ?
                new ObjectParameter("ct", ct) :
                new ObjectParameter("ct", typeof(int));
    
            var seParameter = se.HasValue ?
                new ObjectParameter("se", se) :
                new ObjectParameter("se", typeof(int));
    
            var ptParameter = pt.HasValue ?
                new ObjectParameter("pt", pt) :
                new ObjectParameter("pt", typeof(int));
    
            var testChargesParameter = testCharges.HasValue ?
                new ObjectParameter("TestCharges", testCharges) :
                new ObjectParameter("TestCharges", typeof(double));
    
            var sampleIDParameter = sampleID != null ?
                new ObjectParameter("SampleID", sampleID) :
                new ObjectParameter("SampleID", typeof(string));
    
            var wDeptNoParameter = wDeptNo != null ?
                new ObjectParameter("WDeptNo", wDeptNo) :
                new ObjectParameter("WDeptNo", typeof(string));
    
            var bedNoParameter = bedNo != null ?
                new ObjectParameter("BedNo", bedNo) :
                new ObjectParameter("BedNo", typeof(string));
    
            var wardNoParameter = wardNo != null ?
                new ObjectParameter("WardNo", wardNo) :
                new ObjectParameter("WardNo", typeof(string));
    
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(int));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var clinical_HistoryParameter = clinical_History != null ?
                new ObjectParameter("Clinical_History", clinical_History) :
                new ObjectParameter("Clinical_History", typeof(string));
    
            var courierDetailsParameter = courierDetails != null ?
                new ObjectParameter("CourierDetails", courierDetails) :
                new ObjectParameter("CourierDetails", typeof(string));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateContactinfo", c_IDParameter, usernameParameter, usertypeParameter, testsParameter, pePatIDParameter, regNoParameter, check_FlagParameter, iOPDParameter, dateOfEntryParameter, intialParameter, firstNameParameter, lastNameParameter, sexParameter, ageParameter, mDYParameter, refDrParameter, printFlagParameter, flagParameter, emergencyflagParameter, reportdateParameter, report_timeParameter, exam_dateParameter, exam_timeParameter, patientPhoneNoParameter, patientCityParameter, patient_addrParameter, emailIDParameter, technician_NameParameter, collection_CenterParameter, tech_CodeParameter, dr_CodeParameter, docNameParameter, coll_CodeParameter, compCodeParameter, compNameParameter, financialYearIDParameter, cbcflagParameter, xaParameter, xrParameter, ecParameter, mrParameter, ctParameter, seParameter, ptParameter, testChargesParameter, sampleIDParameter, wDeptNoParameter, bedNoParameter, wardNoParameter, hospitalIDParameter, sampleStatusParameter, vialIDParameter, clinical_HistoryParameter, courierDetailsParameter, telNoParameter, companyidParameter);
        }
    
        public virtual int SP_Updatecontactinformation(Nullable<int> regno, Nullable<System.DateTime> dateofEntry)
        {
            var regnoParameter = regno.HasValue ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(int));
    
            var dateofEntryParameter = dateofEntry.HasValue ?
                new ObjectParameter("dateofEntry", dateofEntry) :
                new ObjectParameter("dateofEntry", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Updatecontactinformation", regnoParameter, dateofEntryParameter);
        }
    
        public virtual ObjectResult<Sp_UpdateContactinformation_Accession_Result> Sp_UpdateContactinformation_Accession(string regNo, Nullable<int> c_ID, string vialID, Nullable<int> companyid)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("regNo", regNo) :
                new ObjectParameter("regNo", typeof(string));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UpdateContactinformation_Accession_Result>("Sp_UpdateContactinformation_Accession", regNoParameter, c_IDParameter, vialIDParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Sp_UpdateContactinformation_SampleCollect_Result> Sp_UpdateContactinformation_SampleCollect(string regNo, Nullable<int> c_ID, string vialID, Nullable<int> companyid)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("regNo", regNo) :
                new ObjectParameter("regNo", typeof(string));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UpdateContactinformation_SampleCollect_Result>("Sp_UpdateContactinformation_SampleCollect", regNoParameter, c_IDParameter, vialIDParameter, companyidParameter);
        }
    
        public virtual int sp_UpdateContactinformationAuthorised(Nullable<int> c_ID, string userName, Nullable<int> companyId)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateContactinformationAuthorised", c_IDParameter, userNameParameter, companyIdParameter);
        }
    
        public virtual int Sp_UpdatePrintstatus(string regno, string iopd, string tlcode, Nullable<int> companyid, Nullable<int> c_ID, Nullable<System.DateTime> report_Date)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var report_DateParameter = report_Date.HasValue ?
                new ObjectParameter("Report_Date", report_Date) :
                new ObjectParameter("Report_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdatePrintstatus", regnoParameter, iopdParameter, tlcodeParameter, companyidParameter, c_IDParameter, report_DateParameter);
        }
    
        public virtual int SP_UpdatePrintStatusFromTextMemo(string regno, string iopd, string hcode, string tlcode, Nullable<bool> printstatus, string testCode, string reason, Nullable<System.DateTime> dateofentry, Nullable<bool> teststatus, Nullable<int> testorderno, string pePatID, string attachFilePath, string status, string registerUser, string testUser, Nullable<System.DateTime> testedDate, Nullable<System.DateTime> reportDate, Nullable<int> signid, string groupCode, Nullable<int> companyid, Nullable<int> c_ID)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("hcode", hcode) :
                new ObjectParameter("hcode", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var printstatusParameter = printstatus.HasValue ?
                new ObjectParameter("printstatus", printstatus) :
                new ObjectParameter("printstatus", typeof(bool));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var dateofentryParameter = dateofentry.HasValue ?
                new ObjectParameter("dateofentry", dateofentry) :
                new ObjectParameter("dateofentry", typeof(System.DateTime));
    
            var teststatusParameter = teststatus.HasValue ?
                new ObjectParameter("teststatus", teststatus) :
                new ObjectParameter("teststatus", typeof(bool));
    
            var testordernoParameter = testorderno.HasValue ?
                new ObjectParameter("testorderno", testorderno) :
                new ObjectParameter("testorderno", typeof(int));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var attachFilePathParameter = attachFilePath != null ?
                new ObjectParameter("AttachFilePath", attachFilePath) :
                new ObjectParameter("AttachFilePath", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            var testUserParameter = testUser != null ?
                new ObjectParameter("TestUser", testUser) :
                new ObjectParameter("TestUser", typeof(string));
    
            var testedDateParameter = testedDate.HasValue ?
                new ObjectParameter("TestedDate", testedDate) :
                new ObjectParameter("TestedDate", typeof(System.DateTime));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var signidParameter = signid.HasValue ?
                new ObjectParameter("signid", signid) :
                new ObjectParameter("signid", typeof(int));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdatePrintStatusFromTextMemo", regnoParameter, iopdParameter, hcodeParameter, tlcodeParameter, printstatusParameter, testCodeParameter, reasonParameter, dateofentryParameter, teststatusParameter, testordernoParameter, pePatIDParameter, attachFilePathParameter, statusParameter, registerUserParameter, testUserParameter, testedDateParameter, reportDateParameter, signidParameter, groupCodeParameter, companyidParameter, c_IDParameter);
        }
    
        public virtual int SP_UpdatePrintstatusReject(string regno, string iopd, string tlcode, Nullable<int> companyid)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdatePrintstatusReject", regnoParameter, iopdParameter, tlcodeParameter, companyidParameter);
        }
    
        public virtual int Sp_UpdatereportNoInMakebill(string regno, string iOPD, string reportNo)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var reportNoParameter = reportNo != null ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdatereportNoInMakebill", regnoParameter, iOPDParameter, reportNoParameter);
        }
    
        public virtual ObjectResult<string> sp_UpdateSetting(Nullable<int> companyid, string userName, string aFlag, string constName, Nullable<int> task)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var aFlagParameter = aFlag != null ?
                new ObjectParameter("AFlag", aFlag) :
                new ObjectParameter("AFlag", typeof(string));
    
            var constNameParameter = constName != null ?
                new ObjectParameter("ConstName", constName) :
                new ObjectParameter("ConstName", typeof(string));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_UpdateSetting", companyidParameter, userNameParameter, aFlagParameter, constNameParameter, taskParameter);
        }
    
        public virtual int Sp_UpdateSOP(string specialNote, Nullable<decimal> companyid, string username, string title, string tLCode, string hCode, string heading, string flag)
        {
            var specialNoteParameter = specialNote != null ?
                new ObjectParameter("SpecialNote", specialNote) :
                new ObjectParameter("SpecialNote", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(decimal));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var headingParameter = heading != null ?
                new ObjectParameter("Heading", heading) :
                new ObjectParameter("Heading", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateSOP", specialNoteParameter, companyidParameter, usernameParameter, titleParameter, tLCodeParameter, hCodeParameter, headingParameter, flagParameter);
        }
    
        public virtual int SP_UpdateStatusByLabForProfile(Nullable<System.DateTime> registratonDateTime, string regNo, string iOPD, Nullable<int> c_ID, string sampleStatus, Nullable<int> companyId)
        {
            var registratonDateTimeParameter = registratonDateTime.HasValue ?
                new ObjectParameter("RegistratonDateTime", registratonDateTime) :
                new ObjectParameter("RegistratonDateTime", typeof(System.DateTime));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateStatusByLabForProfile", registratonDateTimeParameter, regNoParameter, iOPDParameter, c_IDParameter, sampleStatusParameter, companyIdParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_vialtype_Result> sp_vialtype(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_vialtype_Result>("sp_vialtype", companyidParameter);
        }
    
        public virtual ObjectResult<spCheckAlradyExist_Result> spCheckAlradyExist(Nullable<int> flag, Nullable<int> slideNo, string pePatID, string regNo, string financialYearID, Nullable<int> companyId)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var slideNoParameter = slideNo.HasValue ?
                new ObjectParameter("SlideNo", slideNo) :
                new ObjectParameter("SlideNo", typeof(int));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckAlradyExist_Result>("spCheckAlradyExist", flagParameter, slideNoParameter, pePatIDParameter, regNoParameter, financialYearIDParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Special_Charges_Result> Special_Charges(string drname)
        {
            var drnameParameter = drname != null ?
                new ObjectParameter("drname", drname) :
                new ObjectParameter("drname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Special_Charges_Result>("Special_Charges", drnameParameter);
        }
    
        public virtual int Special_Charges1(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Special_Charges1", datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spHistopathalogy_Future(string organ_Name, string name_Of_Format, string specimen, string report_Title, string report_Code, string siteCode1, string siteCode2, string siteCode3, string siteCode4, string diagnosis, string clinicalHistory, string specimenAdequcy, string general_Catarisation, string gross_Examination, string microscopic_Examination, string impression, string advise, string revised, string note, string title, string organ, string clinical, string grossexamination, string microscopic, string descrip, string title_rep, string regId, string diaglcode, string diagllcode, string diaglllcode, string diagvcode, Nullable<decimal> companyID, string slide, string remark, Nullable<bool> gross_flag, Nullable<bool> imp_flag, Nullable<bool> micro_flag, Nullable<bool> advise_flag, Nullable<bool> revised_flag, Nullable<bool> remark_flag, string hCFlag, string specimenAdequacy, string advice, string genCat, string username, string comments, Nullable<bool> comments_flag, string if_format, Nullable<bool> if_format_flag, Nullable<bool> clinical_flag)
        {
            var organ_NameParameter = organ_Name != null ?
                new ObjectParameter("Organ_Name", organ_Name) :
                new ObjectParameter("Organ_Name", typeof(string));
    
            var name_Of_FormatParameter = name_Of_Format != null ?
                new ObjectParameter("Name_Of_Format", name_Of_Format) :
                new ObjectParameter("Name_Of_Format", typeof(string));
    
            var specimenParameter = specimen != null ?
                new ObjectParameter("Specimen", specimen) :
                new ObjectParameter("Specimen", typeof(string));
    
            var report_TitleParameter = report_Title != null ?
                new ObjectParameter("Report_Title", report_Title) :
                new ObjectParameter("Report_Title", typeof(string));
    
            var report_CodeParameter = report_Code != null ?
                new ObjectParameter("Report_Code", report_Code) :
                new ObjectParameter("Report_Code", typeof(string));
    
            var siteCode1Parameter = siteCode1 != null ?
                new ObjectParameter("SiteCode1", siteCode1) :
                new ObjectParameter("SiteCode1", typeof(string));
    
            var siteCode2Parameter = siteCode2 != null ?
                new ObjectParameter("SiteCode2", siteCode2) :
                new ObjectParameter("SiteCode2", typeof(string));
    
            var siteCode3Parameter = siteCode3 != null ?
                new ObjectParameter("SiteCode3", siteCode3) :
                new ObjectParameter("SiteCode3", typeof(string));
    
            var siteCode4Parameter = siteCode4 != null ?
                new ObjectParameter("SiteCode4", siteCode4) :
                new ObjectParameter("SiteCode4", typeof(string));
    
            var diagnosisParameter = diagnosis != null ?
                new ObjectParameter("Diagnosis", diagnosis) :
                new ObjectParameter("Diagnosis", typeof(string));
    
            var clinicalHistoryParameter = clinicalHistory != null ?
                new ObjectParameter("ClinicalHistory", clinicalHistory) :
                new ObjectParameter("ClinicalHistory", typeof(string));
    
            var specimenAdequcyParameter = specimenAdequcy != null ?
                new ObjectParameter("SpecimenAdequcy", specimenAdequcy) :
                new ObjectParameter("SpecimenAdequcy", typeof(string));
    
            var general_CatarisationParameter = general_Catarisation != null ?
                new ObjectParameter("General_Catarisation", general_Catarisation) :
                new ObjectParameter("General_Catarisation", typeof(string));
    
            var gross_ExaminationParameter = gross_Examination != null ?
                new ObjectParameter("Gross_Examination", gross_Examination) :
                new ObjectParameter("Gross_Examination", typeof(string));
    
            var microscopic_ExaminationParameter = microscopic_Examination != null ?
                new ObjectParameter("Microscopic_Examination", microscopic_Examination) :
                new ObjectParameter("Microscopic_Examination", typeof(string));
    
            var impressionParameter = impression != null ?
                new ObjectParameter("Impression", impression) :
                new ObjectParameter("Impression", typeof(string));
    
            var adviseParameter = advise != null ?
                new ObjectParameter("Advise", advise) :
                new ObjectParameter("Advise", typeof(string));
    
            var revisedParameter = revised != null ?
                new ObjectParameter("Revised", revised) :
                new ObjectParameter("Revised", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var organParameter = organ != null ?
                new ObjectParameter("organ", organ) :
                new ObjectParameter("organ", typeof(string));
    
            var clinicalParameter = clinical != null ?
                new ObjectParameter("clinical", clinical) :
                new ObjectParameter("clinical", typeof(string));
    
            var grossexaminationParameter = grossexamination != null ?
                new ObjectParameter("grossexamination", grossexamination) :
                new ObjectParameter("grossexamination", typeof(string));
    
            var microscopicParameter = microscopic != null ?
                new ObjectParameter("microscopic", microscopic) :
                new ObjectParameter("microscopic", typeof(string));
    
            var descripParameter = descrip != null ?
                new ObjectParameter("descrip", descrip) :
                new ObjectParameter("descrip", typeof(string));
    
            var title_repParameter = title_rep != null ?
                new ObjectParameter("title_rep", title_rep) :
                new ObjectParameter("title_rep", typeof(string));
    
            var regIdParameter = regId != null ?
                new ObjectParameter("regId", regId) :
                new ObjectParameter("regId", typeof(string));
    
            var diaglcodeParameter = diaglcode != null ?
                new ObjectParameter("diaglcode", diaglcode) :
                new ObjectParameter("diaglcode", typeof(string));
    
            var diagllcodeParameter = diagllcode != null ?
                new ObjectParameter("diagllcode", diagllcode) :
                new ObjectParameter("diagllcode", typeof(string));
    
            var diaglllcodeParameter = diaglllcode != null ?
                new ObjectParameter("diaglllcode", diaglllcode) :
                new ObjectParameter("diaglllcode", typeof(string));
    
            var diagvcodeParameter = diagvcode != null ?
                new ObjectParameter("diagvcode", diagvcode) :
                new ObjectParameter("diagvcode", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(decimal));
    
            var slideParameter = slide != null ?
                new ObjectParameter("Slide", slide) :
                new ObjectParameter("Slide", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var gross_flagParameter = gross_flag.HasValue ?
                new ObjectParameter("gross_flag", gross_flag) :
                new ObjectParameter("gross_flag", typeof(bool));
    
            var imp_flagParameter = imp_flag.HasValue ?
                new ObjectParameter("imp_flag", imp_flag) :
                new ObjectParameter("imp_flag", typeof(bool));
    
            var micro_flagParameter = micro_flag.HasValue ?
                new ObjectParameter("micro_flag", micro_flag) :
                new ObjectParameter("micro_flag", typeof(bool));
    
            var advise_flagParameter = advise_flag.HasValue ?
                new ObjectParameter("advise_flag", advise_flag) :
                new ObjectParameter("advise_flag", typeof(bool));
    
            var revised_flagParameter = revised_flag.HasValue ?
                new ObjectParameter("revised_flag", revised_flag) :
                new ObjectParameter("revised_flag", typeof(bool));
    
            var remark_flagParameter = remark_flag.HasValue ?
                new ObjectParameter("remark_flag", remark_flag) :
                new ObjectParameter("remark_flag", typeof(bool));
    
            var hCFlagParameter = hCFlag != null ?
                new ObjectParameter("HCFlag", hCFlag) :
                new ObjectParameter("HCFlag", typeof(string));
    
            var specimenAdequacyParameter = specimenAdequacy != null ?
                new ObjectParameter("SpecimenAdequacy", specimenAdequacy) :
                new ObjectParameter("SpecimenAdequacy", typeof(string));
    
            var adviceParameter = advice != null ?
                new ObjectParameter("Advice", advice) :
                new ObjectParameter("Advice", typeof(string));
    
            var genCatParameter = genCat != null ?
                new ObjectParameter("GenCat", genCat) :
                new ObjectParameter("GenCat", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var comments_flagParameter = comments_flag.HasValue ?
                new ObjectParameter("Comments_flag", comments_flag) :
                new ObjectParameter("Comments_flag", typeof(bool));
    
            var if_formatParameter = if_format != null ?
                new ObjectParameter("If_format", if_format) :
                new ObjectParameter("If_format", typeof(string));
    
            var if_format_flagParameter = if_format_flag.HasValue ?
                new ObjectParameter("If_format_flag", if_format_flag) :
                new ObjectParameter("If_format_flag", typeof(bool));
    
            var clinical_flagParameter = clinical_flag.HasValue ?
                new ObjectParameter("clinical_flag", clinical_flag) :
                new ObjectParameter("clinical_flag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spHistopathalogy_Future", organ_NameParameter, name_Of_FormatParameter, specimenParameter, report_TitleParameter, report_CodeParameter, siteCode1Parameter, siteCode2Parameter, siteCode3Parameter, siteCode4Parameter, diagnosisParameter, clinicalHistoryParameter, specimenAdequcyParameter, general_CatarisationParameter, gross_ExaminationParameter, microscopic_ExaminationParameter, impressionParameter, adviseParameter, revisedParameter, noteParameter, titleParameter, organParameter, clinicalParameter, grossexaminationParameter, microscopicParameter, descripParameter, title_repParameter, regIdParameter, diaglcodeParameter, diagllcodeParameter, diaglllcodeParameter, diagvcodeParameter, companyIDParameter, slideParameter, remarkParameter, gross_flagParameter, imp_flagParameter, micro_flagParameter, advise_flagParameter, revised_flagParameter, remark_flagParameter, hCFlagParameter, specimenAdequacyParameter, adviceParameter, genCatParameter, usernameParameter, commentsParameter, comments_flagParameter, if_formatParameter, if_format_flagParameter, clinical_flagParameter);
        }
    
        public virtual int UpdateContactinformation_Lab(Nullable<int> c_ID, string username, string usertype, string tests, string pePatID, string regNo, string iOPD, Nullable<System.DateTime> dateOfEntry, string intial, string firstName, string lastName, string sex, string age, string mDY, string refDr, string check_Flag, Nullable<bool> printFlag, Nullable<bool> emergencyflag, Nullable<System.DateTime> reportdate, string report_time, Nullable<System.DateTime> exam_date, Nullable<System.DateTime> exam_time, string patientPhoneNo, string patientCity, string patient_addr, string emailID, string technician_Name, string collection_Center, string tech_Code, string dr_Code, string docName, string coll_Code, string compCode, string compName, string financialYearID, Nullable<bool> cbcflag, Nullable<int> xa, Nullable<int> xr, Nullable<int> ec, Nullable<int> mr, Nullable<int> ct, Nullable<int> se, Nullable<int> pt, Nullable<double> testCharges, string sampleID, string wDeptNo, string bedNo, string wardNo, Nullable<int> hospitalID, Nullable<int> companyid, string sampleStatus, string vialID, string clinical_History, string courierDetails, string telNo, Nullable<bool> flag, string roomnum, string bednum, string deptNo, Nullable<int> oPDNo, string orderPriority, Nullable<int> iPDNo)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(string));
    
            var testsParameter = tests != null ?
                new ObjectParameter("Tests", tests) :
                new ObjectParameter("Tests", typeof(string));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var intialParameter = intial != null ?
                new ObjectParameter("intial", intial) :
                new ObjectParameter("intial", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(string));
    
            var mDYParameter = mDY != null ?
                new ObjectParameter("MDY", mDY) :
                new ObjectParameter("MDY", typeof(string));
    
            var refDrParameter = refDr != null ?
                new ObjectParameter("RefDr", refDr) :
                new ObjectParameter("RefDr", typeof(string));
    
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var printFlagParameter = printFlag.HasValue ?
                new ObjectParameter("PrintFlag", printFlag) :
                new ObjectParameter("PrintFlag", typeof(bool));
    
            var emergencyflagParameter = emergencyflag.HasValue ?
                new ObjectParameter("emergencyflag", emergencyflag) :
                new ObjectParameter("emergencyflag", typeof(bool));
    
            var reportdateParameter = reportdate.HasValue ?
                new ObjectParameter("Reportdate", reportdate) :
                new ObjectParameter("Reportdate", typeof(System.DateTime));
    
            var report_timeParameter = report_time != null ?
                new ObjectParameter("Report_time", report_time) :
                new ObjectParameter("Report_time", typeof(string));
    
            var exam_dateParameter = exam_date.HasValue ?
                new ObjectParameter("exam_date", exam_date) :
                new ObjectParameter("exam_date", typeof(System.DateTime));
    
            var exam_timeParameter = exam_time.HasValue ?
                new ObjectParameter("exam_time", exam_time) :
                new ObjectParameter("exam_time", typeof(System.DateTime));
    
            var patientPhoneNoParameter = patientPhoneNo != null ?
                new ObjectParameter("PatientPhoneNo", patientPhoneNo) :
                new ObjectParameter("PatientPhoneNo", typeof(string));
    
            var patientCityParameter = patientCity != null ?
                new ObjectParameter("PatientCity", patientCity) :
                new ObjectParameter("PatientCity", typeof(string));
    
            var patient_addrParameter = patient_addr != null ?
                new ObjectParameter("patient_addr", patient_addr) :
                new ObjectParameter("patient_addr", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var technician_NameParameter = technician_Name != null ?
                new ObjectParameter("Technician_Name", technician_Name) :
                new ObjectParameter("Technician_Name", typeof(string));
    
            var collection_CenterParameter = collection_Center != null ?
                new ObjectParameter("Collection_Center", collection_Center) :
                new ObjectParameter("Collection_Center", typeof(string));
    
            var tech_CodeParameter = tech_Code != null ?
                new ObjectParameter("Tech_Code", tech_Code) :
                new ObjectParameter("Tech_Code", typeof(string));
    
            var dr_CodeParameter = dr_Code != null ?
                new ObjectParameter("Dr_Code", dr_Code) :
                new ObjectParameter("Dr_Code", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var coll_CodeParameter = coll_Code != null ?
                new ObjectParameter("Coll_Code", coll_Code) :
                new ObjectParameter("Coll_Code", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var cbcflagParameter = cbcflag.HasValue ?
                new ObjectParameter("cbcflag", cbcflag) :
                new ObjectParameter("cbcflag", typeof(bool));
    
            var xaParameter = xa.HasValue ?
                new ObjectParameter("xa", xa) :
                new ObjectParameter("xa", typeof(int));
    
            var xrParameter = xr.HasValue ?
                new ObjectParameter("xr", xr) :
                new ObjectParameter("xr", typeof(int));
    
            var ecParameter = ec.HasValue ?
                new ObjectParameter("ec", ec) :
                new ObjectParameter("ec", typeof(int));
    
            var mrParameter = mr.HasValue ?
                new ObjectParameter("mr", mr) :
                new ObjectParameter("mr", typeof(int));
    
            var ctParameter = ct.HasValue ?
                new ObjectParameter("ct", ct) :
                new ObjectParameter("ct", typeof(int));
    
            var seParameter = se.HasValue ?
                new ObjectParameter("se", se) :
                new ObjectParameter("se", typeof(int));
    
            var ptParameter = pt.HasValue ?
                new ObjectParameter("pt", pt) :
                new ObjectParameter("pt", typeof(int));
    
            var testChargesParameter = testCharges.HasValue ?
                new ObjectParameter("TestCharges", testCharges) :
                new ObjectParameter("TestCharges", typeof(double));
    
            var sampleIDParameter = sampleID != null ?
                new ObjectParameter("SampleID", sampleID) :
                new ObjectParameter("SampleID", typeof(string));
    
            var wDeptNoParameter = wDeptNo != null ?
                new ObjectParameter("WDeptNo", wDeptNo) :
                new ObjectParameter("WDeptNo", typeof(string));
    
            var bedNoParameter = bedNo != null ?
                new ObjectParameter("BedNo", bedNo) :
                new ObjectParameter("BedNo", typeof(string));
    
            var wardNoParameter = wardNo != null ?
                new ObjectParameter("WardNo", wardNo) :
                new ObjectParameter("WardNo", typeof(string));
    
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var clinical_HistoryParameter = clinical_History != null ?
                new ObjectParameter("Clinical_History", clinical_History) :
                new ObjectParameter("Clinical_History", typeof(string));
    
            var courierDetailsParameter = courierDetails != null ?
                new ObjectParameter("CourierDetails", courierDetails) :
                new ObjectParameter("CourierDetails", typeof(string));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(bool));
    
            var roomnumParameter = roomnum != null ?
                new ObjectParameter("roomnum", roomnum) :
                new ObjectParameter("roomnum", typeof(string));
    
            var bednumParameter = bednum != null ?
                new ObjectParameter("bednum", bednum) :
                new ObjectParameter("bednum", typeof(string));
    
            var deptNoParameter = deptNo != null ?
                new ObjectParameter("deptNo", deptNo) :
                new ObjectParameter("deptNo", typeof(string));
    
            var oPDNoParameter = oPDNo.HasValue ?
                new ObjectParameter("OPDNo", oPDNo) :
                new ObjectParameter("OPDNo", typeof(int));
    
            var orderPriorityParameter = orderPriority != null ?
                new ObjectParameter("OrderPriority", orderPriority) :
                new ObjectParameter("OrderPriority", typeof(string));
    
            var iPDNoParameter = iPDNo.HasValue ?
                new ObjectParameter("IPDNo", iPDNo) :
                new ObjectParameter("IPDNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContactinformation_Lab", c_IDParameter, usernameParameter, usertypeParameter, testsParameter, pePatIDParameter, regNoParameter, iOPDParameter, dateOfEntryParameter, intialParameter, firstNameParameter, lastNameParameter, sexParameter, ageParameter, mDYParameter, refDrParameter, check_FlagParameter, printFlagParameter, emergencyflagParameter, reportdateParameter, report_timeParameter, exam_dateParameter, exam_timeParameter, patientPhoneNoParameter, patientCityParameter, patient_addrParameter, emailIDParameter, technician_NameParameter, collection_CenterParameter, tech_CodeParameter, dr_CodeParameter, docNameParameter, coll_CodeParameter, compCodeParameter, compNameParameter, financialYearIDParameter, cbcflagParameter, xaParameter, xrParameter, ecParameter, mrParameter, ctParameter, seParameter, ptParameter, testChargesParameter, sampleIDParameter, wDeptNoParameter, bedNoParameter, wardNoParameter, hospitalIDParameter, companyidParameter, sampleStatusParameter, vialIDParameter, clinical_HistoryParameter, courierDetailsParameter, telNoParameter, flagParameter, roomnumParameter, bednumParameter, deptNoParameter, oPDNoParameter, orderPriorityParameter, iPDNoParameter);
        }
    
        public virtual ObjectResult<UpdateContactinformation_LabCid_Result> UpdateContactinformation_LabCid(Nullable<int> c_ID, Nullable<int> companyID, string fID)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var fIDParameter = fID != null ?
                new ObjectParameter("fID", fID) :
                new ObjectParameter("fID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateContactinformation_LabCid_Result>("UpdateContactinformation_LabCid", c_IDParameter, companyIDParameter, fIDParameter);
        }
    
        public virtual int UpdateContactinformationTLCode(string regNo, string iOPD, string vialID, string tLCode, string hCode, string groupCode, Nullable<System.DateTime> dAteOfEntry, Nullable<double> testRate, Nullable<int> c_ID, Nullable<int> companyid, string lab_code, string surgeryInitial, Nullable<double> comp_per, Nullable<double> comp_amt, Nullable<double> ptype)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var dAteOfEntryParameter = dAteOfEntry.HasValue ?
                new ObjectParameter("DAteOfEntry", dAteOfEntry) :
                new ObjectParameter("DAteOfEntry", typeof(System.DateTime));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(double));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            var surgeryInitialParameter = surgeryInitial != null ?
                new ObjectParameter("SurgeryInitial", surgeryInitial) :
                new ObjectParameter("SurgeryInitial", typeof(string));
    
            var comp_perParameter = comp_per.HasValue ?
                new ObjectParameter("Comp_per", comp_per) :
                new ObjectParameter("Comp_per", typeof(double));
    
            var comp_amtParameter = comp_amt.HasValue ?
                new ObjectParameter("Comp_amt", comp_amt) :
                new ObjectParameter("Comp_amt", typeof(double));
    
            var ptypeParameter = ptype.HasValue ?
                new ObjectParameter("ptype", ptype) :
                new ObjectParameter("ptype", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContactinformationTLCode", regNoParameter, iOPDParameter, vialIDParameter, tLCodeParameter, hCodeParameter, groupCodeParameter, dAteOfEntryParameter, testRateParameter, c_IDParameter, companyidParameter, lab_codeParameter, surgeryInitialParameter, comp_perParameter, comp_amtParameter, ptypeParameter);
        }
    
        public virtual int UpdateContactinformationTLCode_Lab(string regNo, string iOPD, string vialID, string tLCode, string hCode, string groupCode, Nullable<System.DateTime> dAteOfEntry, Nullable<double> testRate, Nullable<int> c_ID, Nullable<int> companyid, string lab_code, string surgeryInitial, Nullable<double> comp_per, Nullable<double> comp_amt, Nullable<double> ptype)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var dAteOfEntryParameter = dAteOfEntry.HasValue ?
                new ObjectParameter("DAteOfEntry", dAteOfEntry) :
                new ObjectParameter("DAteOfEntry", typeof(System.DateTime));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(double));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            var surgeryInitialParameter = surgeryInitial != null ?
                new ObjectParameter("SurgeryInitial", surgeryInitial) :
                new ObjectParameter("SurgeryInitial", typeof(string));
    
            var comp_perParameter = comp_per.HasValue ?
                new ObjectParameter("Comp_per", comp_per) :
                new ObjectParameter("Comp_per", typeof(double));
    
            var comp_amtParameter = comp_amt.HasValue ?
                new ObjectParameter("Comp_amt", comp_amt) :
                new ObjectParameter("Comp_amt", typeof(double));
    
            var ptypeParameter = ptype.HasValue ?
                new ObjectParameter("ptype", ptype) :
                new ObjectParameter("ptype", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateContactinformationTLCode_Lab", regNoParameter, iOPDParameter, vialIDParameter, tLCodeParameter, hCodeParameter, groupCodeParameter, dAteOfEntryParameter, testRateParameter, c_IDParameter, companyidParameter, lab_codeParameter, surgeryInitialParameter, comp_perParameter, comp_amtParameter, ptypeParameter);
        }
    
        public virtual ObjectResult<string> usp_BindGridComparing(string testname)
        {
            var testnameParameter = testname != null ?
                new ObjectParameter("testname", testname) :
                new ObjectParameter("testname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_BindGridComparing", testnameParameter);
        }
    
        public virtual ObjectResult<usp_bindpivotgriddata_Result> usp_bindpivotgriddata(string pepatid, string titleName, string iopd, Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, string testcode, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var titleNameParameter = titleName != null ?
                new ObjectParameter("TitleName", titleName) :
                new ObjectParameter("TitleName", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("Iopd", iopd) :
                new ObjectParameter("Iopd", typeof(string));
    
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("fdate", fdate) :
                new ObjectParameter("fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("tdate", tdate) :
                new ObjectParameter("tdate", typeof(System.DateTime));
    
            var testcodeParameter = testcode != null ?
                new ObjectParameter("testcode", testcode) :
                new ObjectParameter("testcode", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_bindpivotgriddata_Result>("usp_bindpivotgriddata", pepatidParameter, titleNameParameter, iopdParameter, fdateParameter, tdateParameter, testcodeParameter, compidParameter);
        }
    
        public virtual ObjectResult<usp_bindpivotgriddata_Android_Result> usp_bindpivotgriddata_Android(string pepatid, string titleName, string iopd, Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate, string testcode, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var titleNameParameter = titleName != null ?
                new ObjectParameter("TitleName", titleName) :
                new ObjectParameter("TitleName", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("Iopd", iopd) :
                new ObjectParameter("Iopd", typeof(string));
    
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("fdate", fdate) :
                new ObjectParameter("fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("tdate", tdate) :
                new ObjectParameter("tdate", typeof(System.DateTime));
    
            var testcodeParameter = testcode != null ?
                new ObjectParameter("testcode", testcode) :
                new ObjectParameter("testcode", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_bindpivotgriddata_Android_Result>("usp_bindpivotgriddata_Android", pepatidParameter, titleNameParameter, iopdParameter, fdateParameter, tdateParameter, testcodeParameter, compidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_Check_GlocusePP_Outsource(Nullable<int> task, Nullable<int> companyid, string tlcode)
        {
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("tlcode", tlcode) :
                new ObjectParameter("tlcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_Check_GlocusePP_Outsource", taskParameter, companyidParameter, tlcodeParameter);
        }
    
        public virtual ObjectResult<usp_editorgetTextMemoResult_Result> usp_editorgetTextMemoResult(string pepatid, string titlename, Nullable<int> compid, string iopd, Nullable<System.DateTime> datetime)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var titlenameParameter = titlename != null ?
                new ObjectParameter("titlename", titlename) :
                new ObjectParameter("titlename", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_editorgetTextMemoResult_Result>("usp_editorgetTextMemoResult", pepatidParameter, titlenameParameter, compidParameter, iopdParameter, datetimeParameter);
        }
    
        public virtual ObjectResult<usp_editorgetTextMemoResult_Android_Result> usp_editorgetTextMemoResult_Android(string pepatid, string titlename, Nullable<int> compid, string iopd, Nullable<System.DateTime> datetime)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var titlenameParameter = titlename != null ?
                new ObjectParameter("titlename", titlename) :
                new ObjectParameter("titlename", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_editorgetTextMemoResult_Android_Result>("usp_editorgetTextMemoResult_Android", pepatidParameter, titlenameParameter, compidParameter, iopdParameter, datetimeParameter);
        }
    
        public virtual ObjectResult<Usp_FillComboForOutSourceLab_Result> Usp_FillComboForOutSourceLab(Nullable<int> companyId, string maindept)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_FillComboForOutSourceLab_Result>("Usp_FillComboForOutSourceLab", companyIdParameter, maindeptParameter);
        }
    
        public virtual ObjectResult<usp_FillForLab_Result> usp_FillForLab(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_FillForLab_Result>("usp_FillForLab", companyidParameter);
        }
    
        public virtual int usp_FilllabchargesGrid(string pHcode, Nullable<int> companyid, string titlecode, string titlename)
        {
            var pHcodeParameter = pHcode != null ?
                new ObjectParameter("PHcode", pHcode) :
                new ObjectParameter("PHcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var titlecodeParameter = titlecode != null ?
                new ObjectParameter("titlecode", titlecode) :
                new ObjectParameter("titlecode", typeof(string));
    
            var titlenameParameter = titlename != null ?
                new ObjectParameter("titlename", titlename) :
                new ObjectParameter("titlename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FilllabchargesGrid", pHcodeParameter, companyidParameter, titlecodeParameter, titlenameParameter);
        }
    
        public virtual int usp_FillOnSearchLABOPD(string lastName, Nullable<System.DateTime> toDate, Nullable<System.DateTime> fromDate, Nullable<int> pePatID, string username, Nullable<int> companyid, string financialYearID)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var pePatIDParameter = pePatID.HasValue ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FillOnSearchLABOPD", lastNameParameter, toDateParameter, fromDateParameter, pePatIDParameter, usernameParameter, companyidParameter, financialYearIDParameter);
        }
    
        public virtual ObjectResult<usp_Filltitlename_Result> usp_Filltitlename(string pHcode, Nullable<int> companyid)
        {
            var pHcodeParameter = pHcode != null ?
                new ObjectParameter("PHcode", pHcode) :
                new ObjectParameter("PHcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Filltitlename_Result>("usp_Filltitlename", pHcodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllNormalValues_Result> Usp_GetAllNormalValues(Nullable<int> companyId, string mainDept, string tLCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllNormalValues_Result>("Usp_GetAllNormalValues", companyIdParameter, mainDeptParameter, tLCodeParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllNormValues_Result> Usp_GetAllNormValues(string tlCode, Nullable<int> companyId, string testCode, string mainDept)
        {
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllNormValues_Result>("Usp_GetAllNormValues", tlCodeParameter, companyIdParameter, testCodeParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllPanicValues_Result> Usp_GetAllPanicValues(Nullable<int> companyId, string mainDept, string tLCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllPanicValues_Result>("Usp_GetAllPanicValues", companyIdParameter, mainDeptParameter, tLCodeParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllPanValues_Result> Usp_GetAllPanValues(string tlCode, Nullable<int> companyId, string testCode, string mainDept)
        {
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllPanValues_Result>("Usp_GetAllPanValues", tlCodeParameter, companyIdParameter, testCodeParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllProfileDept_Result> Usp_GetAllProfileDept(string mainDept, Nullable<int> companyId)
        {
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllProfileDept_Result>("Usp_GetAllProfileDept", mainDeptParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllProfileTests_Result> Usp_GetAllProfileTests(Nullable<int> companyId, string maindept)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllProfileTests_Result>("Usp_GetAllProfileTests", companyIdParameter, maindeptParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllSampleTypes_Result> Usp_GetAllSampleTypes(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllSampleTypes_Result>("Usp_GetAllSampleTypes", companyIdParameter);
        }
    
        public virtual ObjectResult<Usp_GetAllShortForms_Result> Usp_GetAllShortForms(Nullable<int> companyId, string mainDept)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetAllShortForms_Result>("Usp_GetAllShortForms", companyIdParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<Usp_getAllTests_Result> Usp_getAllTests(string tLCode, Nullable<int> companyid, string mainDept)
        {
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_getAllTests_Result>("Usp_getAllTests", tLCodeParameter, companyidParameter, mainDeptParameter);
        }
    
        public virtual int usp_GetAuthorizedStatus(Nullable<int> companyid, Nullable<int> opdno, string pePatID, string labDb)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var opdnoParameter = opdno.HasValue ?
                new ObjectParameter("opdno", opdno) :
                new ObjectParameter("opdno", typeof(int));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var labDbParameter = labDb != null ?
                new ObjectParameter("LabDb", labDb) :
                new ObjectParameter("LabDb", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetAuthorizedStatus", companyidParameter, opdnoParameter, pePatIDParameter, labDbParameter);
        }
    
        public virtual int usp_GetAuthorizedStatusIPD(Nullable<int> companyid, Nullable<int> ipdno, Nullable<int> pePatID)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var ipdnoParameter = ipdno.HasValue ?
                new ObjectParameter("ipdno", ipdno) :
                new ObjectParameter("ipdno", typeof(int));
    
            var pePatIDParameter = pePatID.HasValue ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetAuthorizedStatusIPD", companyidParameter, ipdnoParameter, pePatIDParameter);
        }
    
        public virtual int Usp_GetBOMUnit(Nullable<int> companyid, string pharmacyDB, string maindept)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var pharmacyDBParameter = pharmacyDB != null ?
                new ObjectParameter("PharmacyDB", pharmacyDB) :
                new ObjectParameter("PharmacyDB", typeof(string));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("Maindept", maindept) :
                new ObjectParameter("Maindept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_GetBOMUnit", companyidParameter, pharmacyDBParameter, maindeptParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_GetConsumption(string batchNo, string toDate, string fromDate, string mainDept, Nullable<int> companyid)
        {
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_GetConsumption", batchNoParameter, toDateParameter, fromDateParameter, mainDeptParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_GetContactInfoTlcodeTestCount(Nullable<int> companyId, string mainDept, string tlCode, string hCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_GetContactInfoTlcodeTestCount", companyIdParameter, mainDeptParameter, tlCodeParameter, hCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_GetCountForTestDelete(Nullable<int> companyId, string mainDept, string tlCode, string hCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_GetCountForTestDelete", companyIdParameter, mainDeptParameter, tlCodeParameter, hCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetFilmQty_Result> usp_GetFilmQty(Nullable<int> c_id, Nullable<int> companyid, string deptcode, string username)
        {
            var c_idParameter = c_id.HasValue ?
                new ObjectParameter("C_id", c_id) :
                new ObjectParameter("C_id", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var deptcodeParameter = deptcode != null ?
                new ObjectParameter("deptcode", deptcode) :
                new ObjectParameter("deptcode", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFilmQty_Result>("usp_GetFilmQty", c_idParameter, companyidParameter, deptcodeParameter, usernameParameter);
        }
    
        public virtual ObjectResult<usp_GetHeading_Result> usp_GetHeading(string pepatid, string maindept, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetHeading_Result>("usp_GetHeading", pepatidParameter, maindeptParameter, compidParameter);
        }
    
        public virtual ObjectResult<usp_getHeadingName_Result> usp_getHeadingName(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getHeadingName_Result>("usp_getHeadingName", companyidParameter);
        }
    
        public virtual ObjectResult<Usp_getHeadings_Result> Usp_getHeadings(Nullable<int> companyid, string mainDept)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_getHeadings_Result>("Usp_getHeadings", companyidParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<Usp_GetHeadingsDetails_Result> Usp_GetHeadingsDetails(Nullable<int> companyid, string mainDept)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetHeadingsDetails_Result>("Usp_GetHeadingsDetails", companyidParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<string> usp_getiopdforpatient(string pepatid, string regno, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getiopdforpatient", pepatidParameter, regnoParameter, compidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_GetIsOutSource(Nullable<int> companyId, string tlcode, string maindept, string labCode, string userName, Nullable<int> c_ID, Nullable<int> task)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            var labCodeParameter = labCode != null ?
                new ObjectParameter("LabCode", labCode) :
                new ObjectParameter("LabCode", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_GetIsOutSource", companyIdParameter, tlcodeParameter, maindeptParameter, labCodeParameter, userNameParameter, c_IDParameter, taskParameter);
        }
    
        public virtual int usp_GetLabdetailView(string labpatient, string pepatid, Nullable<int> companyid, string labdbname)
        {
            var labpatientParameter = labpatient != null ?
                new ObjectParameter("labpatient", labpatient) :
                new ObjectParameter("labpatient", typeof(string));
    
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var labdbnameParameter = labdbname != null ?
                new ObjectParameter("labdbname", labdbname) :
                new ObjectParameter("labdbname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetLabdetailView", labpatientParameter, pepatidParameter, companyidParameter, labdbnameParameter);
        }
    
        public virtual int usp_getLabInfo_Helpdesk(Nullable<int> companyId, string financialYearID, Nullable<int> pePatID, Nullable<int> labRegNo, string frmDate, string toDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var pePatIDParameter = pePatID.HasValue ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(int));
    
            var labRegNoParameter = labRegNo.HasValue ?
                new ObjectParameter("LabRegNo", labRegNo) :
                new ObjectParameter("LabRegNo", typeof(int));
    
            var frmDateParameter = frmDate != null ?
                new ObjectParameter("FrmDate", frmDate) :
                new ObjectParameter("FrmDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_getLabInfo_Helpdesk", companyIdParameter, financialYearIDParameter, pePatIDParameter, labRegNoParameter, frmDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetLabProfile_TestName_Result> usp_GetLabProfile_TestName(Nullable<int> companyid, string profile)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var profileParameter = profile != null ?
                new ObjectParameter("profile", profile) :
                new ObjectParameter("profile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLabProfile_TestName_Result>("usp_GetLabProfile_TestName", companyidParameter, profileParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> usp_getLabProfileDept(Nullable<int> companyid, string heading)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var headingParameter = heading != null ?
                new ObjectParameter("Heading", heading) :
                new ObjectParameter("Heading", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("usp_getLabProfileDept", companyidParameter, headingParameter);
        }
    
        public virtual ObjectResult<string> usp_getMaimDeptLab(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getMaimDeptLab", companyidParameter);
        }
    
        public virtual ObjectResult<string> usp_getnormalrange(string pepatid, string paraname, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var paranameParameter = paraname != null ?
                new ObjectParameter("paraname", paraname) :
                new ObjectParameter("paraname", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getnormalrange", pepatidParameter, paranameParameter, compidParameter);
        }
    
        public virtual ObjectResult<string> usp_getnormalrangefortitle(string pepatid, string titlename, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var titlenameParameter = titlename != null ?
                new ObjectParameter("titlename", titlename) :
                new ObjectParameter("titlename", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getnormalrangefortitle", pepatidParameter, titlenameParameter, compidParameter);
        }
    
        public virtual ObjectResult<Usp_GetOutSource_Result> Usp_GetOutSource(Nullable<int> companyId, string labCode)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var labCodeParameter = labCode != null ?
                new ObjectParameter("LabCode", labCode) :
                new ObjectParameter("LabCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetOutSource_Result>("Usp_GetOutSource", companyIdParameter, labCodeParameter);
        }
    
        public virtual ObjectResult<Usp_GetOutSourceLabRecords_Result> Usp_GetOutSourceLabRecords(Nullable<System.DateTime> fromDate, string labCode, Nullable<System.DateTime> toDate, Nullable<int> companyId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var labCodeParameter = labCode != null ?
                new ObjectParameter("labCode", labCode) :
                new ObjectParameter("labCode", typeof(string));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetOutSourceLabRecords_Result>("Usp_GetOutSourceLabRecords", fromDateParameter, labCodeParameter, toDateParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Usp_GetOutSourceLabTestWithRate_Result> Usp_GetOutSourceLabTestWithRate(Nullable<int> companyId, string labCode, string maindept)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var labCodeParameter = labCode != null ?
                new ObjectParameter("LabCode", labCode) :
                new ObjectParameter("LabCode", typeof(string));
    
            var maindeptParameter = maindept != null ?
                new ObjectParameter("maindept", maindept) :
                new ObjectParameter("maindept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetOutSourceLabTestWithRate_Result>("Usp_GetOutSourceLabTestWithRate", companyIdParameter, labCodeParameter, maindeptParameter);
        }
    
        public virtual ObjectResult<usp_GetPaitentTestResultforChart_Android_Result> usp_GetPaitentTestResultforChart_Android(Nullable<int> companyid, string fromdate, string todate, string pePatId, string parameterName, string testCode)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(string));
    
            var pePatIdParameter = pePatId != null ?
                new ObjectParameter("PePatId", pePatId) :
                new ObjectParameter("PePatId", typeof(string));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaitentTestResultforChart_Android_Result>("usp_GetPaitentTestResultforChart_Android", companyidParameter, fromdateParameter, todateParameter, pePatIdParameter, parameterNameParameter, testCodeParameter);
        }
    
        public virtual ObjectResult<usp_GetPrintstatusreport_Result> usp_GetPrintstatusreport(string regno, string iopd, string status, Nullable<int> companyid)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("regno", regno) :
                new ObjectParameter("regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("iopd", iopd) :
                new ObjectParameter("iopd", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPrintstatusreport_Result>("usp_GetPrintstatusreport", regnoParameter, iopdParameter, statusParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_GetProfileCountUsed(string groupCode, Nullable<int> companyid)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_GetProfileCountUsed", groupCodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<string> usp_getregnoforpatient(string pepatid, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getregnoforpatient", pepatidParameter, compidParameter);
        }
    
        public virtual ObjectResult<usp_GetTestbyHeading_Result> usp_GetTestbyHeading(string pepatid, string hcode, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("hcode", hcode) :
                new ObjectParameter("hcode", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTestbyHeading_Result>("usp_GetTestbyHeading", pepatidParameter, hcodeParameter, compidParameter);
        }
    
        public virtual ObjectResult<string> usp_gettestcode(string pepatid, string paramn, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var paramnParameter = paramn != null ?
                new ObjectParameter("paramn", paramn) :
                new ObjectParameter("paramn", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_gettestcode", pepatidParameter, paramnParameter, compidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_GetTestCountExistance(string hcode, Nullable<int> companyid, string tLCode, string mainDept)
        {
            var hcodeParameter = hcode != null ?
                new ObjectParameter("Hcode", hcode) :
                new ObjectParameter("Hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_GetTestCountExistance", hcodeParameter, companyidParameter, tLCodeParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_GetTestCountForMemoDelete(string mainDept, Nullable<int> companyId, string testCode)
        {
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var testCodeParameter = testCode != null ?
                new ObjectParameter("TestCode", testCode) :
                new ObjectParameter("TestCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_GetTestCountForMemoDelete", mainDeptParameter, companyIdParameter, testCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Usp_GetTestCountUsed(string hcode, Nullable<int> companyid, string tLCode, string mainDept)
        {
            var hcodeParameter = hcode != null ?
                new ObjectParameter("Hcode", hcode) :
                new ObjectParameter("Hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Usp_GetTestCountUsed", hcodeParameter, companyidParameter, tLCodeParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<usp_getTestName_Result> usp_getTestName(Nullable<int> companyid, string hCode)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getTestName_Result>("usp_getTestName", companyidParameter, hCodeParameter);
        }
    
        public virtual int usp_getTestNameforBillCharges(Nullable<int> companyid, string hCode, string tLCode, string dbname, Nullable<int> rateTypeID)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var dbnameParameter = dbname != null ?
                new ObjectParameter("dbname", dbname) :
                new ObjectParameter("dbname", typeof(string));
    
            var rateTypeIDParameter = rateTypeID.HasValue ?
                new ObjectParameter("RateTypeID", rateTypeID) :
                new ObjectParameter("RateTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_getTestNameforBillCharges", companyidParameter, hCodeParameter, tLCodeParameter, dbnameParameter, rateTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_getTitleByHcode_Result> usp_getTitleByHcode(string hcode, Nullable<int> companyid)
        {
            var hcodeParameter = hcode != null ?
                new ObjectParameter("Hcode", hcode) :
                new ObjectParameter("Hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getTitleByHcode_Result>("usp_getTitleByHcode", hcodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<usp_getTitleByHcode1_Result> usp_getTitleByHcode1(string hcode, Nullable<int> companyid)
        {
            var hcodeParameter = hcode != null ?
                new ObjectParameter("Hcode", hcode) :
                new ObjectParameter("Hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getTitleByHcode1_Result>("usp_getTitleByHcode1", hcodeParameter, companyidParameter);
        }
    
        public virtual ObjectResult<Usp_GetTitlesByCompany_Result> Usp_GetTitlesByCompany(string title, Nullable<int> companyid, string hCode, string mainDept)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetTitlesByCompany_Result>("Usp_GetTitlesByCompany", titleParameter, companyidParameter, hCodeParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<Usp_GetTitlesByTestName_Result> Usp_GetTitlesByTestName(string testName, Nullable<int> companyid, string hCode, string mainDept)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_GetTitlesByTestName_Result>("Usp_GetTitlesByTestName", testNameParameter, companyidParameter, hCodeParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<usp_GetTitlesByTLCodes_Result> usp_GetTitlesByTLCodes(string tLCode, Nullable<int> companyid, string hCode, string mainDept)
        {
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(int));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTitlesByTLCodes_Result>("usp_GetTitlesByTLCodes", tLCodeParameter, companyidParameter, hCodeParameter, mainDeptParameter);
        }
    
        public virtual ObjectResult<string> usp_getunitnormalrange(string pepatid, string paraname, Nullable<int> compid)
        {
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var paranameParameter = paraname != null ?
                new ObjectParameter("paraname", paraname) :
                new ObjectParameter("paraname", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getunitnormalrange", pepatidParameter, paranameParameter, compidParameter);
        }
    
        public virtual ObjectResult<Usp_HistoCytoOldReports_Result> Usp_HistoCytoOldReports(string reportPath, string regNo, string reportNo, string regCode, string iOPD, string remark, Nullable<decimal> companyid, Nullable<System.DateTime> dateOfReport, Nullable<int> task)
        {
            var reportPathParameter = reportPath != null ?
                new ObjectParameter("ReportPath", reportPath) :
                new ObjectParameter("ReportPath", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var reportNoParameter = reportNo != null ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(string));
    
            var regCodeParameter = regCode != null ?
                new ObjectParameter("RegCode", regCode) :
                new ObjectParameter("RegCode", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(decimal));
    
            var dateOfReportParameter = dateOfReport.HasValue ?
                new ObjectParameter("DateOfReport", dateOfReport) :
                new ObjectParameter("DateOfReport", typeof(System.DateTime));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_HistoCytoOldReports_Result>("Usp_HistoCytoOldReports", reportPathParameter, regNoParameter, reportNoParameter, regCodeParameter, iOPDParameter, remarkParameter, companyidParameter, dateOfReportParameter, taskParameter);
        }
    
        public virtual int usp_hlpdsk_PatientLabDetails(Nullable<int> companyid, string pepatid, Nullable<int> opdno, Nullable<int> ipdno, Nullable<int> labno, string dbMainClinic)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var pepatidParameter = pepatid != null ?
                new ObjectParameter("pepatid", pepatid) :
                new ObjectParameter("pepatid", typeof(string));
    
            var opdnoParameter = opdno.HasValue ?
                new ObjectParameter("opdno", opdno) :
                new ObjectParameter("opdno", typeof(int));
    
            var ipdnoParameter = ipdno.HasValue ?
                new ObjectParameter("ipdno", ipdno) :
                new ObjectParameter("ipdno", typeof(int));
    
            var labnoParameter = labno.HasValue ?
                new ObjectParameter("labno", labno) :
                new ObjectParameter("labno", typeof(int));
    
            var dbMainClinicParameter = dbMainClinic != null ?
                new ObjectParameter("dbMainClinic", dbMainClinic) :
                new ObjectParameter("dbMainClinic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_hlpdsk_PatientLabDetails", companyidParameter, pepatidParameter, opdnoParameter, ipdnoParameter, labnoParameter, dbMainClinicParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_Insert_ContactInformation1_Android(string username, string usertype, string tests, string pePatID, string regNo, string iOPD, Nullable<System.DateTime> dateOfEntry, string intial, string firstName, string lastName, string sex, Nullable<int> age, string mDY, string refDr, string check_Flag, Nullable<bool> printFlag, Nullable<bool> flag_CollCenter, Nullable<bool> flag_Tech, Nullable<bool> emergencyflag, Nullable<System.DateTime> reportdate, string report_time, Nullable<System.DateTime> exam_date, string exam_time, string patientPhoneNo, string patientCity, string patient_addr, string emailID, string technician_Name, string collection_Center, string tech_Code, string dr_Code, string docName, string coll_Code, string compCode, string compName, string financialYearID, Nullable<bool> cbcflag, string graph, Nullable<int> xa, Nullable<int> xr, Nullable<int> ec, Nullable<int> mr, Nullable<int> ct, Nullable<int> se, Nullable<int> pt, string wbc, string rbc, string plt, string plt1, string coulter, Nullable<double> testCharges, string sampleID, Nullable<decimal> hospitalID, string wardNo, string bedNo, string wDeptNo, string deptno, Nullable<int> iPDNo, string bednum, string roomnum, Nullable<int> companyid, string sampleStatus, string sampleType, string sampleNotes, string pSCRegNo, string vialID, string clinical_History, string courierDetails, Nullable<int> oPDNo, Nullable<int> labNo, string telNo, Nullable<int> pat_id, string orderPriority, string tLCode, string hCode, string groupCode, Nullable<double> testRate, string remark, string lab_code, string codeTes, string vSampleType, string vTestCodes, string vTestNames, string vCodeTes, string ptype, Nullable<int> count, Nullable<int> cIDNew, Nullable<int> hivNo, Nullable<int> clinicNo, string hivType)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(string));
    
            var testsParameter = tests != null ?
                new ObjectParameter("Tests", tests) :
                new ObjectParameter("Tests", typeof(string));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var intialParameter = intial != null ?
                new ObjectParameter("intial", intial) :
                new ObjectParameter("intial", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var mDYParameter = mDY != null ?
                new ObjectParameter("MDY", mDY) :
                new ObjectParameter("MDY", typeof(string));
    
            var refDrParameter = refDr != null ?
                new ObjectParameter("RefDr", refDr) :
                new ObjectParameter("RefDr", typeof(string));
    
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var printFlagParameter = printFlag.HasValue ?
                new ObjectParameter("PrintFlag", printFlag) :
                new ObjectParameter("PrintFlag", typeof(bool));
    
            var flag_CollCenterParameter = flag_CollCenter.HasValue ?
                new ObjectParameter("Flag_CollCenter", flag_CollCenter) :
                new ObjectParameter("Flag_CollCenter", typeof(bool));
    
            var flag_TechParameter = flag_Tech.HasValue ?
                new ObjectParameter("Flag_Tech", flag_Tech) :
                new ObjectParameter("Flag_Tech", typeof(bool));
    
            var emergencyflagParameter = emergencyflag.HasValue ?
                new ObjectParameter("emergencyflag", emergencyflag) :
                new ObjectParameter("emergencyflag", typeof(bool));
    
            var reportdateParameter = reportdate.HasValue ?
                new ObjectParameter("Reportdate", reportdate) :
                new ObjectParameter("Reportdate", typeof(System.DateTime));
    
            var report_timeParameter = report_time != null ?
                new ObjectParameter("Report_time", report_time) :
                new ObjectParameter("Report_time", typeof(string));
    
            var exam_dateParameter = exam_date.HasValue ?
                new ObjectParameter("exam_date", exam_date) :
                new ObjectParameter("exam_date", typeof(System.DateTime));
    
            var exam_timeParameter = exam_time != null ?
                new ObjectParameter("exam_time", exam_time) :
                new ObjectParameter("exam_time", typeof(string));
    
            var patientPhoneNoParameter = patientPhoneNo != null ?
                new ObjectParameter("PatientPhoneNo", patientPhoneNo) :
                new ObjectParameter("PatientPhoneNo", typeof(string));
    
            var patientCityParameter = patientCity != null ?
                new ObjectParameter("PatientCity", patientCity) :
                new ObjectParameter("PatientCity", typeof(string));
    
            var patient_addrParameter = patient_addr != null ?
                new ObjectParameter("patient_addr", patient_addr) :
                new ObjectParameter("patient_addr", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var technician_NameParameter = technician_Name != null ?
                new ObjectParameter("Technician_Name", technician_Name) :
                new ObjectParameter("Technician_Name", typeof(string));
    
            var collection_CenterParameter = collection_Center != null ?
                new ObjectParameter("Collection_Center", collection_Center) :
                new ObjectParameter("Collection_Center", typeof(string));
    
            var tech_CodeParameter = tech_Code != null ?
                new ObjectParameter("Tech_Code", tech_Code) :
                new ObjectParameter("Tech_Code", typeof(string));
    
            var dr_CodeParameter = dr_Code != null ?
                new ObjectParameter("Dr_Code", dr_Code) :
                new ObjectParameter("Dr_Code", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var coll_CodeParameter = coll_Code != null ?
                new ObjectParameter("Coll_Code", coll_Code) :
                new ObjectParameter("Coll_Code", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var cbcflagParameter = cbcflag.HasValue ?
                new ObjectParameter("cbcflag", cbcflag) :
                new ObjectParameter("cbcflag", typeof(bool));
    
            var graphParameter = graph != null ?
                new ObjectParameter("graph", graph) :
                new ObjectParameter("graph", typeof(string));
    
            var xaParameter = xa.HasValue ?
                new ObjectParameter("xa", xa) :
                new ObjectParameter("xa", typeof(int));
    
            var xrParameter = xr.HasValue ?
                new ObjectParameter("xr", xr) :
                new ObjectParameter("xr", typeof(int));
    
            var ecParameter = ec.HasValue ?
                new ObjectParameter("ec", ec) :
                new ObjectParameter("ec", typeof(int));
    
            var mrParameter = mr.HasValue ?
                new ObjectParameter("mr", mr) :
                new ObjectParameter("mr", typeof(int));
    
            var ctParameter = ct.HasValue ?
                new ObjectParameter("ct", ct) :
                new ObjectParameter("ct", typeof(int));
    
            var seParameter = se.HasValue ?
                new ObjectParameter("se", se) :
                new ObjectParameter("se", typeof(int));
    
            var ptParameter = pt.HasValue ?
                new ObjectParameter("pt", pt) :
                new ObjectParameter("pt", typeof(int));
    
            var wbcParameter = wbc != null ?
                new ObjectParameter("wbc", wbc) :
                new ObjectParameter("wbc", typeof(string));
    
            var rbcParameter = rbc != null ?
                new ObjectParameter("rbc", rbc) :
                new ObjectParameter("rbc", typeof(string));
    
            var pltParameter = plt != null ?
                new ObjectParameter("plt", plt) :
                new ObjectParameter("plt", typeof(string));
    
            var plt1Parameter = plt1 != null ?
                new ObjectParameter("plt1", plt1) :
                new ObjectParameter("plt1", typeof(string));
    
            var coulterParameter = coulter != null ?
                new ObjectParameter("coulter", coulter) :
                new ObjectParameter("coulter", typeof(string));
    
            var testChargesParameter = testCharges.HasValue ?
                new ObjectParameter("TestCharges", testCharges) :
                new ObjectParameter("TestCharges", typeof(double));
    
            var sampleIDParameter = sampleID != null ?
                new ObjectParameter("SampleID", sampleID) :
                new ObjectParameter("SampleID", typeof(string));
    
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(decimal));
    
            var wardNoParameter = wardNo != null ?
                new ObjectParameter("WardNo", wardNo) :
                new ObjectParameter("WardNo", typeof(string));
    
            var bedNoParameter = bedNo != null ?
                new ObjectParameter("BedNo", bedNo) :
                new ObjectParameter("BedNo", typeof(string));
    
            var wDeptNoParameter = wDeptNo != null ?
                new ObjectParameter("WDeptNo", wDeptNo) :
                new ObjectParameter("WDeptNo", typeof(string));
    
            var deptnoParameter = deptno != null ?
                new ObjectParameter("deptno", deptno) :
                new ObjectParameter("deptno", typeof(string));
    
            var iPDNoParameter = iPDNo.HasValue ?
                new ObjectParameter("IPDNo", iPDNo) :
                new ObjectParameter("IPDNo", typeof(int));
    
            var bednumParameter = bednum != null ?
                new ObjectParameter("bednum", bednum) :
                new ObjectParameter("bednum", typeof(string));
    
            var roomnumParameter = roomnum != null ?
                new ObjectParameter("roomnum", roomnum) :
                new ObjectParameter("roomnum", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var sampleNotesParameter = sampleNotes != null ?
                new ObjectParameter("SampleNotes", sampleNotes) :
                new ObjectParameter("SampleNotes", typeof(string));
    
            var pSCRegNoParameter = pSCRegNo != null ?
                new ObjectParameter("pSCRegNo", pSCRegNo) :
                new ObjectParameter("pSCRegNo", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var clinical_HistoryParameter = clinical_History != null ?
                new ObjectParameter("Clinical_History", clinical_History) :
                new ObjectParameter("Clinical_History", typeof(string));
    
            var courierDetailsParameter = courierDetails != null ?
                new ObjectParameter("CourierDetails", courierDetails) :
                new ObjectParameter("CourierDetails", typeof(string));
    
            var oPDNoParameter = oPDNo.HasValue ?
                new ObjectParameter("OPDNo", oPDNo) :
                new ObjectParameter("OPDNo", typeof(int));
    
            var labNoParameter = labNo.HasValue ?
                new ObjectParameter("labNo", labNo) :
                new ObjectParameter("labNo", typeof(int));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var pat_idParameter = pat_id.HasValue ?
                new ObjectParameter("pat_id", pat_id) :
                new ObjectParameter("pat_id", typeof(int));
    
            var orderPriorityParameter = orderPriority != null ?
                new ObjectParameter("OrderPriority", orderPriority) :
                new ObjectParameter("OrderPriority", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            var codeTesParameter = codeTes != null ?
                new ObjectParameter("CodeTes", codeTes) :
                new ObjectParameter("CodeTes", typeof(string));
    
            var vSampleTypeParameter = vSampleType != null ?
                new ObjectParameter("VSampleType", vSampleType) :
                new ObjectParameter("VSampleType", typeof(string));
    
            var vTestCodesParameter = vTestCodes != null ?
                new ObjectParameter("VTestCodes", vTestCodes) :
                new ObjectParameter("VTestCodes", typeof(string));
    
            var vTestNamesParameter = vTestNames != null ?
                new ObjectParameter("VTestNames", vTestNames) :
                new ObjectParameter("VTestNames", typeof(string));
    
            var vCodeTesParameter = vCodeTes != null ?
                new ObjectParameter("VCodeTes", vCodeTes) :
                new ObjectParameter("VCodeTes", typeof(string));
    
            var ptypeParameter = ptype != null ?
                new ObjectParameter("ptype", ptype) :
                new ObjectParameter("ptype", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var cIDNewParameter = cIDNew.HasValue ?
                new ObjectParameter("CIDNew", cIDNew) :
                new ObjectParameter("CIDNew", typeof(int));
    
            var hivNoParameter = hivNo.HasValue ?
                new ObjectParameter("HivNo", hivNo) :
                new ObjectParameter("HivNo", typeof(int));
    
            var clinicNoParameter = clinicNo.HasValue ?
                new ObjectParameter("ClinicNo", clinicNo) :
                new ObjectParameter("ClinicNo", typeof(int));
    
            var hivTypeParameter = hivType != null ?
                new ObjectParameter("HivType", hivType) :
                new ObjectParameter("HivType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_Insert_ContactInformation1_Android", usernameParameter, usertypeParameter, testsParameter, pePatIDParameter, regNoParameter, iOPDParameter, dateOfEntryParameter, intialParameter, firstNameParameter, lastNameParameter, sexParameter, ageParameter, mDYParameter, refDrParameter, check_FlagParameter, printFlagParameter, flag_CollCenterParameter, flag_TechParameter, emergencyflagParameter, reportdateParameter, report_timeParameter, exam_dateParameter, exam_timeParameter, patientPhoneNoParameter, patientCityParameter, patient_addrParameter, emailIDParameter, technician_NameParameter, collection_CenterParameter, tech_CodeParameter, dr_CodeParameter, docNameParameter, coll_CodeParameter, compCodeParameter, compNameParameter, financialYearIDParameter, cbcflagParameter, graphParameter, xaParameter, xrParameter, ecParameter, mrParameter, ctParameter, seParameter, ptParameter, wbcParameter, rbcParameter, pltParameter, plt1Parameter, coulterParameter, testChargesParameter, sampleIDParameter, hospitalIDParameter, wardNoParameter, bedNoParameter, wDeptNoParameter, deptnoParameter, iPDNoParameter, bednumParameter, roomnumParameter, companyidParameter, sampleStatusParameter, sampleTypeParameter, sampleNotesParameter, pSCRegNoParameter, vialIDParameter, clinical_HistoryParameter, courierDetailsParameter, oPDNoParameter, labNoParameter, telNoParameter, pat_idParameter, orderPriorityParameter, tLCodeParameter, hCodeParameter, groupCodeParameter, testRateParameter, remarkParameter, lab_codeParameter, codeTesParameter, vSampleTypeParameter, vTestCodesParameter, vTestNamesParameter, vCodeTesParameter, ptypeParameter, countParameter, cIDNewParameter, hivNoParameter, clinicNoParameter, hivTypeParameter);
        }
    
        public virtual int usp_InsertTurnAroundtime(string fullname, string testName, string regno, Nullable<System.DateTime> dateOfEntry, Nullable<System.DateTime> report_Date, string turnAroundTime, Nullable<int> companyId)
        {
            var fullnameParameter = fullname != null ?
                new ObjectParameter("Fullname", fullname) :
                new ObjectParameter("Fullname", typeof(string));
    
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            var regnoParameter = regno != null ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var report_DateParameter = report_Date.HasValue ?
                new ObjectParameter("Report_Date", report_Date) :
                new ObjectParameter("Report_Date", typeof(System.DateTime));
    
            var turnAroundTimeParameter = turnAroundTime != null ?
                new ObjectParameter("turnAroundTime", turnAroundTime) :
                new ObjectParameter("turnAroundTime", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertTurnAroundtime", fullnameParameter, testNameParameter, regnoParameter, dateOfEntryParameter, report_DateParameter, turnAroundTimeParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_InsertUpdateFilmQty(Nullable<int> c_ID, string regNo, string iOPD, string pepatId, string insertFlag, string tlCode, Nullable<int> drugID, Nullable<int> consumption, Nullable<int> companyid, string autoManualFlag, Nullable<System.DateTime> entryDate, Nullable<int> unitwiseDrugID, Nullable<int> qtyperPack, string itemName, Nullable<int> task)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var pepatIdParameter = pepatId != null ?
                new ObjectParameter("PepatId", pepatId) :
                new ObjectParameter("PepatId", typeof(string));
    
            var insertFlagParameter = insertFlag != null ?
                new ObjectParameter("InsertFlag", insertFlag) :
                new ObjectParameter("InsertFlag", typeof(string));
    
            var tlCodeParameter = tlCode != null ?
                new ObjectParameter("TlCode", tlCode) :
                new ObjectParameter("TlCode", typeof(string));
    
            var drugIDParameter = drugID.HasValue ?
                new ObjectParameter("DrugID", drugID) :
                new ObjectParameter("DrugID", typeof(int));
    
            var consumptionParameter = consumption.HasValue ?
                new ObjectParameter("Consumption", consumption) :
                new ObjectParameter("Consumption", typeof(int));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var autoManualFlagParameter = autoManualFlag != null ?
                new ObjectParameter("AutoManualFlag", autoManualFlag) :
                new ObjectParameter("AutoManualFlag", typeof(string));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var unitwiseDrugIDParameter = unitwiseDrugID.HasValue ?
                new ObjectParameter("UnitwiseDrugID", unitwiseDrugID) :
                new ObjectParameter("UnitwiseDrugID", typeof(int));
    
            var qtyperPackParameter = qtyperPack.HasValue ?
                new ObjectParameter("QtyperPack", qtyperPack) :
                new ObjectParameter("QtyperPack", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_InsertUpdateFilmQty", c_IDParameter, regNoParameter, iOPDParameter, pepatIdParameter, insertFlagParameter, tlCodeParameter, drugIDParameter, consumptionParameter, companyidParameter, autoManualFlagParameter, entryDateParameter, unitwiseDrugIDParameter, qtyperPackParameter, itemNameParameter, taskParameter);
        }
    
        public virtual int Usp_InsertUpdateOutSource(Nullable<int> task, string labCode, string labName, string email, string phone, string address, string city, string state, string country, Nullable<int> zip, string webaddress, string pSCCode, Nullable<int> companyId, string contactPerson, string userName)
        {
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            var labCodeParameter = labCode != null ?
                new ObjectParameter("LabCode", labCode) :
                new ObjectParameter("LabCode", typeof(string));
    
            var labNameParameter = labName != null ?
                new ObjectParameter("LabName", labName) :
                new ObjectParameter("LabName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var zipParameter = zip.HasValue ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(int));
    
            var webaddressParameter = webaddress != null ?
                new ObjectParameter("Webaddress", webaddress) :
                new ObjectParameter("Webaddress", typeof(string));
    
            var pSCCodeParameter = pSCCode != null ?
                new ObjectParameter("PSCCode", pSCCode) :
                new ObjectParameter("PSCCode", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_InsertUpdateOutSource", taskParameter, labCodeParameter, labNameParameter, emailParameter, phoneParameter, addressParameter, cityParameter, stateParameter, countryParameter, zipParameter, webaddressParameter, pSCCodeParameter, companyIdParameter, contactPersonParameter, userNameParameter);
        }
    
        public virtual int Usp_InsertUpdateOutSourceTestRate(Nullable<int> companyId, string labTestId, string labCode, string tlcode, Nullable<double> rate, Nullable<int> task, string userName)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var labTestIdParameter = labTestId != null ?
                new ObjectParameter("LabTestId", labTestId) :
                new ObjectParameter("LabTestId", typeof(string));
    
            var labCodeParameter = labCode != null ?
                new ObjectParameter("LabCode", labCode) :
                new ObjectParameter("LabCode", typeof(string));
    
            var tlcodeParameter = tlcode != null ?
                new ObjectParameter("Tlcode", tlcode) :
                new ObjectParameter("Tlcode", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_InsertUpdateOutSourceTestRate", companyIdParameter, labTestIdParameter, labCodeParameter, tlcodeParameter, rateParameter, taskParameter, userNameParameter);
        }
    
        public virtual ObjectResult<usp_perticular_BillIPDLabCharges_Result> usp_perticular_BillIPDLabCharges(Nullable<int> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_perticular_BillIPDLabCharges_Result>("usp_perticular_BillIPDLabCharges", companyidParameter);
        }
    
        public virtual int usp_Search_LabOPD(Nullable<int> companyId, Nullable<int> pePatID, string frmdate, string todate, string space, string lastname)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var pePatIDParameter = pePatID.HasValue ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(int));
    
            var frmdateParameter = frmdate != null ?
                new ObjectParameter("frmdate", frmdate) :
                new ObjectParameter("frmdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(string));
    
            var spaceParameter = space != null ?
                new ObjectParameter("space", space) :
                new ObjectParameter("space", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Search_LabOPD", companyIdParameter, pePatIDParameter, frmdateParameter, todateParameter, spaceParameter, lastnameParameter);
        }
    
        public virtual ObjectResult<usp_SelectAuthorizeDoctor_Result> usp_SelectAuthorizeDoctor(string regno, string iopd, Nullable<int> companyId)
        {
            var regnoParameter = regno != null ?
                new ObjectParameter("Regno", regno) :
                new ObjectParameter("Regno", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("Iopd", iopd) :
                new ObjectParameter("Iopd", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAuthorizeDoctor_Result>("usp_SelectAuthorizeDoctor", regnoParameter, iopdParameter, companyIdParameter);
        }
    
        public virtual int usp_SetAuthorizeDoctor(string regNo, string iopd, string signId, string hcode, Nullable<int> companyid)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iopdParameter = iopd != null ?
                new ObjectParameter("Iopd", iopd) :
                new ObjectParameter("Iopd", typeof(string));
    
            var signIdParameter = signId != null ?
                new ObjectParameter("SignId", signId) :
                new ObjectParameter("SignId", typeof(string));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("Hcode", hcode) :
                new ObjectParameter("Hcode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetAuthorizeDoctor", regNoParameter, iopdParameter, signIdParameter, hcodeParameter, companyidParameter);
        }
    
        public virtual int usp_SubPerti_BillIPDLabCharges(Nullable<int> companyid, string hcode)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var hcodeParameter = hcode != null ?
                new ObjectParameter("Hcode", hcode) :
                new ObjectParameter("Hcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SubPerti_BillIPDLabCharges", companyidParameter, hcodeParameter);
        }
    
        public virtual int usp_TruncateTurnAroundtime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TruncateTurnAroundtime");
        }
    
        public virtual int usp_TruncateTurnArountime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TruncateTurnArountime");
        }
    
        public virtual int usp_Update_ContactInformation1_Android(Nullable<int> action, Nullable<int> c_ID, string username, string usertype, string tests, string pePatID, string regNo, string iOPD, Nullable<System.DateTime> dateOfEntry, string intial, string firstName, string lastName, string sex, Nullable<int> age, string mDY, string refDr, string check_Flag, Nullable<bool> printFlag, Nullable<bool> flag_CollCenter, Nullable<bool> flag_Tech, Nullable<bool> emergencyflag, Nullable<System.DateTime> reportdate, string report_time, Nullable<System.DateTime> exam_date, string exam_time, string patientPhoneNo, string patientCity, string patient_addr, string emailID, string technician_Name, string collection_Center, string tech_Code, string dr_Code, string docName, string coll_Code, string compCode, string compName, string financialYearID, Nullable<bool> cbcflag, Nullable<bool> flag, string graph, Nullable<int> xa, Nullable<int> xr, Nullable<int> ec, Nullable<int> mr, Nullable<int> ct, Nullable<int> se, Nullable<int> pt, string wbc, string rbc, string plt, string plt1, string coulter, Nullable<double> testCharges, string sampleID, Nullable<decimal> hospitalID, string wardNo, string bedNo, string wDeptNo, string deptno, Nullable<int> iPDNo, string bednum, string roomnum, Nullable<int> companyid, string sampleStatus, string sampleType, string sampleNotes, string pSCRegNo, string vialID, string clinical_History, string courierDetails, Nullable<int> oPDNo, Nullable<int> labNo, string telNo, Nullable<int> pat_id, string orderPriority, string tLCode, string hCode, string groupCode, Nullable<double> testRate, string remark, string lab_code, string codeTes, string vSampleType, string vTestCodes, string vTestNames, string vCodeTes, string ptype, Nullable<int> count, Nullable<int> cIDNew, Nullable<int> hivNo, Nullable<int> clinicNo, string hivType)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var usertypeParameter = usertype != null ?
                new ObjectParameter("Usertype", usertype) :
                new ObjectParameter("Usertype", typeof(string));
    
            var testsParameter = tests != null ?
                new ObjectParameter("Tests", tests) :
                new ObjectParameter("Tests", typeof(string));
    
            var pePatIDParameter = pePatID != null ?
                new ObjectParameter("PePatID", pePatID) :
                new ObjectParameter("PePatID", typeof(string));
    
            var regNoParameter = regNo != null ?
                new ObjectParameter("RegNo", regNo) :
                new ObjectParameter("RegNo", typeof(string));
    
            var iOPDParameter = iOPD != null ?
                new ObjectParameter("IOPD", iOPD) :
                new ObjectParameter("IOPD", typeof(string));
    
            var dateOfEntryParameter = dateOfEntry.HasValue ?
                new ObjectParameter("DateOfEntry", dateOfEntry) :
                new ObjectParameter("DateOfEntry", typeof(System.DateTime));
    
            var intialParameter = intial != null ?
                new ObjectParameter("intial", intial) :
                new ObjectParameter("intial", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var mDYParameter = mDY != null ?
                new ObjectParameter("MDY", mDY) :
                new ObjectParameter("MDY", typeof(string));
    
            var refDrParameter = refDr != null ?
                new ObjectParameter("RefDr", refDr) :
                new ObjectParameter("RefDr", typeof(string));
    
            var check_FlagParameter = check_Flag != null ?
                new ObjectParameter("Check_Flag", check_Flag) :
                new ObjectParameter("Check_Flag", typeof(string));
    
            var printFlagParameter = printFlag.HasValue ?
                new ObjectParameter("PrintFlag", printFlag) :
                new ObjectParameter("PrintFlag", typeof(bool));
    
            var flag_CollCenterParameter = flag_CollCenter.HasValue ?
                new ObjectParameter("Flag_CollCenter", flag_CollCenter) :
                new ObjectParameter("Flag_CollCenter", typeof(bool));
    
            var flag_TechParameter = flag_Tech.HasValue ?
                new ObjectParameter("Flag_Tech", flag_Tech) :
                new ObjectParameter("Flag_Tech", typeof(bool));
    
            var emergencyflagParameter = emergencyflag.HasValue ?
                new ObjectParameter("emergencyflag", emergencyflag) :
                new ObjectParameter("emergencyflag", typeof(bool));
    
            var reportdateParameter = reportdate.HasValue ?
                new ObjectParameter("Reportdate", reportdate) :
                new ObjectParameter("Reportdate", typeof(System.DateTime));
    
            var report_timeParameter = report_time != null ?
                new ObjectParameter("Report_time", report_time) :
                new ObjectParameter("Report_time", typeof(string));
    
            var exam_dateParameter = exam_date.HasValue ?
                new ObjectParameter("exam_date", exam_date) :
                new ObjectParameter("exam_date", typeof(System.DateTime));
    
            var exam_timeParameter = exam_time != null ?
                new ObjectParameter("exam_time", exam_time) :
                new ObjectParameter("exam_time", typeof(string));
    
            var patientPhoneNoParameter = patientPhoneNo != null ?
                new ObjectParameter("PatientPhoneNo", patientPhoneNo) :
                new ObjectParameter("PatientPhoneNo", typeof(string));
    
            var patientCityParameter = patientCity != null ?
                new ObjectParameter("PatientCity", patientCity) :
                new ObjectParameter("PatientCity", typeof(string));
    
            var patient_addrParameter = patient_addr != null ?
                new ObjectParameter("patient_addr", patient_addr) :
                new ObjectParameter("patient_addr", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var technician_NameParameter = technician_Name != null ?
                new ObjectParameter("Technician_Name", technician_Name) :
                new ObjectParameter("Technician_Name", typeof(string));
    
            var collection_CenterParameter = collection_Center != null ?
                new ObjectParameter("Collection_Center", collection_Center) :
                new ObjectParameter("Collection_Center", typeof(string));
    
            var tech_CodeParameter = tech_Code != null ?
                new ObjectParameter("Tech_Code", tech_Code) :
                new ObjectParameter("Tech_Code", typeof(string));
    
            var dr_CodeParameter = dr_Code != null ?
                new ObjectParameter("Dr_Code", dr_Code) :
                new ObjectParameter("Dr_Code", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var coll_CodeParameter = coll_Code != null ?
                new ObjectParameter("Coll_Code", coll_Code) :
                new ObjectParameter("Coll_Code", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var financialYearIDParameter = financialYearID != null ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(string));
    
            var cbcflagParameter = cbcflag.HasValue ?
                new ObjectParameter("cbcflag", cbcflag) :
                new ObjectParameter("cbcflag", typeof(bool));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(bool));
    
            var graphParameter = graph != null ?
                new ObjectParameter("graph", graph) :
                new ObjectParameter("graph", typeof(string));
    
            var xaParameter = xa.HasValue ?
                new ObjectParameter("xa", xa) :
                new ObjectParameter("xa", typeof(int));
    
            var xrParameter = xr.HasValue ?
                new ObjectParameter("xr", xr) :
                new ObjectParameter("xr", typeof(int));
    
            var ecParameter = ec.HasValue ?
                new ObjectParameter("ec", ec) :
                new ObjectParameter("ec", typeof(int));
    
            var mrParameter = mr.HasValue ?
                new ObjectParameter("mr", mr) :
                new ObjectParameter("mr", typeof(int));
    
            var ctParameter = ct.HasValue ?
                new ObjectParameter("ct", ct) :
                new ObjectParameter("ct", typeof(int));
    
            var seParameter = se.HasValue ?
                new ObjectParameter("se", se) :
                new ObjectParameter("se", typeof(int));
    
            var ptParameter = pt.HasValue ?
                new ObjectParameter("pt", pt) :
                new ObjectParameter("pt", typeof(int));
    
            var wbcParameter = wbc != null ?
                new ObjectParameter("wbc", wbc) :
                new ObjectParameter("wbc", typeof(string));
    
            var rbcParameter = rbc != null ?
                new ObjectParameter("rbc", rbc) :
                new ObjectParameter("rbc", typeof(string));
    
            var pltParameter = plt != null ?
                new ObjectParameter("plt", plt) :
                new ObjectParameter("plt", typeof(string));
    
            var plt1Parameter = plt1 != null ?
                new ObjectParameter("plt1", plt1) :
                new ObjectParameter("plt1", typeof(string));
    
            var coulterParameter = coulter != null ?
                new ObjectParameter("coulter", coulter) :
                new ObjectParameter("coulter", typeof(string));
    
            var testChargesParameter = testCharges.HasValue ?
                new ObjectParameter("TestCharges", testCharges) :
                new ObjectParameter("TestCharges", typeof(double));
    
            var sampleIDParameter = sampleID != null ?
                new ObjectParameter("SampleID", sampleID) :
                new ObjectParameter("SampleID", typeof(string));
    
            var hospitalIDParameter = hospitalID.HasValue ?
                new ObjectParameter("HospitalID", hospitalID) :
                new ObjectParameter("HospitalID", typeof(decimal));
    
            var wardNoParameter = wardNo != null ?
                new ObjectParameter("WardNo", wardNo) :
                new ObjectParameter("WardNo", typeof(string));
    
            var bedNoParameter = bedNo != null ?
                new ObjectParameter("BedNo", bedNo) :
                new ObjectParameter("BedNo", typeof(string));
    
            var wDeptNoParameter = wDeptNo != null ?
                new ObjectParameter("WDeptNo", wDeptNo) :
                new ObjectParameter("WDeptNo", typeof(string));
    
            var deptnoParameter = deptno != null ?
                new ObjectParameter("deptno", deptno) :
                new ObjectParameter("deptno", typeof(string));
    
            var iPDNoParameter = iPDNo.HasValue ?
                new ObjectParameter("IPDNo", iPDNo) :
                new ObjectParameter("IPDNo", typeof(int));
    
            var bednumParameter = bednum != null ?
                new ObjectParameter("bednum", bednum) :
                new ObjectParameter("bednum", typeof(string));
    
            var roomnumParameter = roomnum != null ?
                new ObjectParameter("roomnum", roomnum) :
                new ObjectParameter("roomnum", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var sampleNotesParameter = sampleNotes != null ?
                new ObjectParameter("SampleNotes", sampleNotes) :
                new ObjectParameter("SampleNotes", typeof(string));
    
            var pSCRegNoParameter = pSCRegNo != null ?
                new ObjectParameter("pSCRegNo", pSCRegNo) :
                new ObjectParameter("pSCRegNo", typeof(string));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var clinical_HistoryParameter = clinical_History != null ?
                new ObjectParameter("Clinical_History", clinical_History) :
                new ObjectParameter("Clinical_History", typeof(string));
    
            var courierDetailsParameter = courierDetails != null ?
                new ObjectParameter("CourierDetails", courierDetails) :
                new ObjectParameter("CourierDetails", typeof(string));
    
            var oPDNoParameter = oPDNo.HasValue ?
                new ObjectParameter("OPDNo", oPDNo) :
                new ObjectParameter("OPDNo", typeof(int));
    
            var labNoParameter = labNo.HasValue ?
                new ObjectParameter("labNo", labNo) :
                new ObjectParameter("labNo", typeof(int));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            var pat_idParameter = pat_id.HasValue ?
                new ObjectParameter("pat_id", pat_id) :
                new ObjectParameter("pat_id", typeof(int));
    
            var orderPriorityParameter = orderPriority != null ?
                new ObjectParameter("OrderPriority", orderPriority) :
                new ObjectParameter("OrderPriority", typeof(string));
    
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var hCodeParameter = hCode != null ?
                new ObjectParameter("HCode", hCode) :
                new ObjectParameter("HCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var testRateParameter = testRate.HasValue ?
                new ObjectParameter("TestRate", testRate) :
                new ObjectParameter("TestRate", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var lab_codeParameter = lab_code != null ?
                new ObjectParameter("lab_code", lab_code) :
                new ObjectParameter("lab_code", typeof(string));
    
            var codeTesParameter = codeTes != null ?
                new ObjectParameter("CodeTes", codeTes) :
                new ObjectParameter("CodeTes", typeof(string));
    
            var vSampleTypeParameter = vSampleType != null ?
                new ObjectParameter("VSampleType", vSampleType) :
                new ObjectParameter("VSampleType", typeof(string));
    
            var vTestCodesParameter = vTestCodes != null ?
                new ObjectParameter("VTestCodes", vTestCodes) :
                new ObjectParameter("VTestCodes", typeof(string));
    
            var vTestNamesParameter = vTestNames != null ?
                new ObjectParameter("VTestNames", vTestNames) :
                new ObjectParameter("VTestNames", typeof(string));
    
            var vCodeTesParameter = vCodeTes != null ?
                new ObjectParameter("VCodeTes", vCodeTes) :
                new ObjectParameter("VCodeTes", typeof(string));
    
            var ptypeParameter = ptype != null ?
                new ObjectParameter("ptype", ptype) :
                new ObjectParameter("ptype", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var cIDNewParameter = cIDNew.HasValue ?
                new ObjectParameter("CIDNew", cIDNew) :
                new ObjectParameter("CIDNew", typeof(int));
    
            var hivNoParameter = hivNo.HasValue ?
                new ObjectParameter("HivNo", hivNo) :
                new ObjectParameter("HivNo", typeof(int));
    
            var clinicNoParameter = clinicNo.HasValue ?
                new ObjectParameter("ClinicNo", clinicNo) :
                new ObjectParameter("ClinicNo", typeof(int));
    
            var hivTypeParameter = hivType != null ?
                new ObjectParameter("HivType", hivType) :
                new ObjectParameter("HivType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_ContactInformation1_Android", actionParameter, c_IDParameter, usernameParameter, usertypeParameter, testsParameter, pePatIDParameter, regNoParameter, iOPDParameter, dateOfEntryParameter, intialParameter, firstNameParameter, lastNameParameter, sexParameter, ageParameter, mDYParameter, refDrParameter, check_FlagParameter, printFlagParameter, flag_CollCenterParameter, flag_TechParameter, emergencyflagParameter, reportdateParameter, report_timeParameter, exam_dateParameter, exam_timeParameter, patientPhoneNoParameter, patientCityParameter, patient_addrParameter, emailIDParameter, technician_NameParameter, collection_CenterParameter, tech_CodeParameter, dr_CodeParameter, docNameParameter, coll_CodeParameter, compCodeParameter, compNameParameter, financialYearIDParameter, cbcflagParameter, flagParameter, graphParameter, xaParameter, xrParameter, ecParameter, mrParameter, ctParameter, seParameter, ptParameter, wbcParameter, rbcParameter, pltParameter, plt1Parameter, coulterParameter, testChargesParameter, sampleIDParameter, hospitalIDParameter, wardNoParameter, bedNoParameter, wDeptNoParameter, deptnoParameter, iPDNoParameter, bednumParameter, roomnumParameter, companyidParameter, sampleStatusParameter, sampleTypeParameter, sampleNotesParameter, pSCRegNoParameter, vialIDParameter, clinical_HistoryParameter, courierDetailsParameter, oPDNoParameter, labNoParameter, telNoParameter, pat_idParameter, orderPriorityParameter, tLCodeParameter, hCodeParameter, groupCodeParameter, testRateParameter, remarkParameter, lab_codeParameter, codeTesParameter, vSampleTypeParameter, vTestCodesParameter, vTestNamesParameter, vCodeTesParameter, ptypeParameter, countParameter, cIDNewParameter, hivNoParameter, clinicNoParameter, hivTypeParameter);
        }
    
        public virtual int usp_Updateconsumption(string tLCode, Nullable<int> companyid, Nullable<double> financialYearId, string storeFlag, string issueToFlag, string labDB, string mainDept)
        {
            var tLCodeParameter = tLCode != null ?
                new ObjectParameter("TLCode", tLCode) :
                new ObjectParameter("TLCode", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("FinancialYearId", financialYearId) :
                new ObjectParameter("FinancialYearId", typeof(double));
    
            var storeFlagParameter = storeFlag != null ?
                new ObjectParameter("StoreFlag", storeFlag) :
                new ObjectParameter("StoreFlag", typeof(string));
    
            var issueToFlagParameter = issueToFlag != null ?
                new ObjectParameter("IssueToFlag", issueToFlag) :
                new ObjectParameter("IssueToFlag", typeof(string));
    
            var labDBParameter = labDB != null ?
                new ObjectParameter("LabDB", labDB) :
                new ObjectParameter("LabDB", typeof(string));
    
            var mainDeptParameter = mainDept != null ?
                new ObjectParameter("MainDept", mainDept) :
                new ObjectParameter("MainDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Updateconsumption", tLCodeParameter, companyidParameter, financialYearIdParameter, storeFlagParameter, issueToFlagParameter, labDBParameter, mainDeptParameter);
        }
    
        public virtual int Usp_UpdateSampleCondition(Nullable<int> c_ID, string sampleType, string condition, Nullable<int> companyId)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_UpdateSampleCondition", c_IDParameter, sampleTypeParameter, conditionParameter, companyIdParameter);
        }
    
        public virtual int usp_VialMaster_Delete_Android(Nullable<int> c_ID, Nullable<int> companyId)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VialMaster_Delete_Android", c_IDParameter, companyIdParameter);
        }
    
        public virtual int usp_VialMaster_Insert_Android(Nullable<int> c_ID, string vialID, string sampleType, string testCodes, string testNames, string sampleStatus, string remark, Nullable<int> companyId)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var testCodesParameter = testCodes != null ?
                new ObjectParameter("TestCodes", testCodes) :
                new ObjectParameter("TestCodes", typeof(string));
    
            var testNamesParameter = testNames != null ?
                new ObjectParameter("TestNames", testNames) :
                new ObjectParameter("TestNames", typeof(string));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VialMaster_Insert_Android", c_IDParameter, vialIDParameter, sampleTypeParameter, testCodesParameter, testNamesParameter, sampleStatusParameter, remarkParameter, companyIdParameter);
        }
    
        public virtual int usp_VialMaster_Update_Android(Nullable<int> c_ID, string sampleType, string testCodes, string testNames, Nullable<int> companyId)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var testCodesParameter = testCodes != null ?
                new ObjectParameter("TestCodes", testCodes) :
                new ObjectParameter("TestCodes", typeof(string));
    
            var testNamesParameter = testNames != null ?
                new ObjectParameter("TestNames", testNames) :
                new ObjectParameter("TestNames", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VialMaster_Update_Android", c_IDParameter, sampleTypeParameter, testCodesParameter, testNamesParameter, companyIdParameter);
        }
    
        public virtual int Usp_VialMasterUpdate(Nullable<int> c_ID, string vialID, string sampleType, string testCodes, string testNames, string sampleStatus, string remark, Nullable<int> companyid, Nullable<int> task)
        {
            var c_IDParameter = c_ID.HasValue ?
                new ObjectParameter("C_ID", c_ID) :
                new ObjectParameter("C_ID", typeof(int));
    
            var vialIDParameter = vialID != null ?
                new ObjectParameter("VialID", vialID) :
                new ObjectParameter("VialID", typeof(string));
    
            var sampleTypeParameter = sampleType != null ?
                new ObjectParameter("SampleType", sampleType) :
                new ObjectParameter("SampleType", typeof(string));
    
            var testCodesParameter = testCodes != null ?
                new ObjectParameter("TestCodes", testCodes) :
                new ObjectParameter("TestCodes", typeof(string));
    
            var testNamesParameter = testNames != null ?
                new ObjectParameter("TestNames", testNames) :
                new ObjectParameter("TestNames", typeof(string));
    
            var sampleStatusParameter = sampleStatus != null ?
                new ObjectParameter("SampleStatus", sampleStatus) :
                new ObjectParameter("SampleStatus", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var taskParameter = task.HasValue ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_VialMasterUpdate", c_IDParameter, vialIDParameter, sampleTypeParameter, testCodesParameter, testNamesParameter, sampleStatusParameter, remarkParameter, companyidParameter, taskParameter);
        }
    }
}
